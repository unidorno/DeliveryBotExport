const TelegramBot = require('node-telegram-bot-api')
//const mongoose = require('mongoose')
var GeoPoint = require('geopoint')
const debug = require('./helpers')
const config = require('./config')
const database = require('./database.json')
const keyboards = require('./src/keyboard-buttons')
const NodeGeocoder = require('node-geocoder')
//const firebase = require('./firebase_connect')
const { GoogleSpreadsheet } = require('google-spreadsheet')
const { GoogleAuth } = require('google-auth-library');
const creds = require('./src/upperrestaurant-9af5914c14f2.json')
const fs = require('fs');
const readline = require('readline');
const {google} = require('googleapis');
const gsheets = google.sheets('v4');
console.log('bot has been started...')


// If modifying these scopes, delete token.json.
const SCOPES = ['https://www.googleapis.com/auth/drive', 'https://www.googleapis.com/auth/spreadsheets'];
// The file token.json stores the user's access and refresh tokens, and is
// created automatically when the authorization flow completes for the first
// time.

const auth = new google.auth.JWT(
    creds.client_email,
    null,
    creds.private_key,
    SCOPES
);

listFiles(auth)

function listFiles(auth) {
  const drive = google.drive({version: 'v3', auth});
  drive.files.list({
    pageSize: 10,
    fields: 'nextPageToken, files(id, name)',
  }, (err, res) => {
    if (err) return console.log('The API returned an error: ' + err);
    const files = res.data.files;
    if (files.length) {
      console.log('Files:');
      files.map((file) => {
        console.log(`${file.name} (${file.id})`);
      });
    } else {
      console.log('No files found.');
    }
});
}
    
//====================INITIALIZE FIREBASE==============================
const firebase_connect = require('firebase')
const { reset } = require('nodemon')
const { captureRejectionSymbol } = require('node-telegram-bot-api')
const { redis } = require('googleapis/build/src/apis/redis')
const { chat } = require('googleapis/build/src/apis/chat')

const fb = firebase_connect.initializeApp({
    apiKey:'AIzaSyA0wSxSsB938N4mKpV5Nec0tBWbpPFyZAQ',
    authDomain:'upperrestaurant.firebaseapp.com',
    databaseURL: 'https://upperrestaurant-default-rtdb.europe-west1.firebasedatabase.app'
})

//====================================================================

const bot = new TelegramBot(config.TOKEN,
{
        polling:
            {
                interval: 300,
                autoStart: true,
                params: {
                    timeout: 10
                }
            }
})
//Google Variables
let guserdata = [] //–ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
let gusernames = ['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '–°—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞', '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', '–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞', '–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞' , '–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ', '–ü–æ—Å–µ—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å', '–ó–∞–º–æ—Ä–æ–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å', '–ù–∞—á–∞–ª–æ –∑–∞–º–æ—Ä–æ–∑–∫–∏']

///////////////////////
// text variables
let admin_id = []
let operators_chat = []
let current_chat = 0
let support_username = []

let temp_message = []
let userCity = [] // 0-NurSultan, 1-Almaty
let userCities = []
let userPoint = []
let userPoints = []
let cities_keyboard = []
let points_keyboard = []
let cities_count = []
let points_count = []
//
let userCategory = []
let userCategories = []
let category_keyboard = []
let categories_count = []
//
let userGyms = []
let gym_keyboard = []
let mother_link = 'https://t.me/ctos_nursultan'
let choosegym_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ä—Ç–∑–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å '
//
let userProgram = []
let userProgrammesList = []
let programmes_keyboard = []
let trener_keyboard = []
let userTreners = []
let userTrener = []
const choosetrener_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–º –±–æ–ª—å—à–µ:'
let foodlist_count = []
//
let shop_keyboard = []
let userShopCategories = []
let chooseshopcategory_text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:'
let userShopCategory = []

let shopitems_keyboard = []
let userItemsList = []
let anothershopcategory_text = '‚óÄÔ∏è –î—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
let chooseitem_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:'
let userItem = []
let userItemPrice = []
let userlastTraining = []

let waitlist = []

/////////////////////////////////////////////////////////////////
let anotherpoint_multiple = []
let club_name_fb = []

let card_instructions_text = `<b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>

‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç?
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–¥–∞—Å—Ç –í–∞–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ" —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. 
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –∑–∞–ª–µ, –≤–∞–º –Ω—É–∂–Ω–æ –ª–∏–±–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –Ω–∞ —Ä–µ—Å–µ–ø—à–Ω–µ, –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞. –ü–æ–∫–∞–∂–∏—Ç–µ —ç–∫—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞ –∏ –≤–ø–µ—Ä–µ–¥!

üí∞ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç? 
–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ KASPI –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É. –ù–∏–∂–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –§–ò–û, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ –∑–¥–µ—Å—å. –¢–∞–∫ –º—ã –ø–æ–π–º–µ–º, –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"‚òëÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç.`
/////////////////////////////////////////////////////
let cash_instructions_text = `<b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>

‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç?
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–¥–∞—Å—Ç –í–∞–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ" —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. 
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –∑–∞–ª–µ, –≤–∞–º –Ω—É–∂–Ω–æ –ª–∏–±–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –Ω–∞ —Ä–µ—Å–µ–ø—à–Ω–µ, –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞. –ü–æ–∫–∞–∂–∏—Ç–µ —ç–∫—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞ –∏ –≤–ø–µ—Ä–µ–¥!

üí∞ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏? 
–ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞ –Ω–∞ —Ä–µ—Å–µ–ø—à–Ω–µ –∏ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏. –ü–æ–∫–∞–∂–∏—Ç–µ –µ–º—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"‚òëÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>. –°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç. `
const choosepoint_text = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'
const backtoprogramme_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'backtoprogramme_cb']
const backtofillinginfo_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'backtofilling_cb']
const backtochoosepaingmethod_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'backtopme_cb']
const ihavepaid_text = ['‚òëÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª', 'ivepaid_cb']
const accepttraining_text = ['‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'accpwarng_cb']
const refusetraining_text = ['–ù–∞–∑–∞–¥', 'rfswarng_cb']
const backtotreners_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'backtotreners_cb']
const buyitem_text = ['üü¢ –ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä', 'buyitem_clbck']
const backtoitemslist_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktoitemslst_cb']
const dontuseskidka_text = ['–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', 'dontuseskidka_cb']
const useskidka_text = ['–î–∞, —Ö–æ—á—É!', 'useskidka_cb']
const igotmyitem_text = ['‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω','igtmtm_cb']
const continuemyabonement_text = ['ü§© –ü—Ä–æ–¥–ª–∏—Ç—å', 'ctnmabnt_cb']
const freezeabonement1_text = ['‚ùÑÔ∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', 'frzabnmt_cb']
const freezeabonement2_text = ['‚ùÑÔ∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', 'frzabnmt2_cb']
const unfreezeabonement1_text = ['üßä –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'unfrzabnmt_cb']
const unfreezeabonement2_text = ['üßä –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 'unfrzabnmt2_cb']
const refuseskidka_text = ['–ù–µ—Ç, –Ω–µ —Ö–æ—á—É', 'rfsskdk_cb']
const adduserdata_text = ['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'myprf_cb']
const backadduserdata_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bckaddsrdt_cb']
const adduserinfo_text = ['addusrname_cb', 'addusrphone_cb', 'addusreml_cb']
const backtoadduserinfo_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktddusrnf_cb']
const adminreports = ['üìà –û—Ç—á–µ—Ç—ã', 'admreports_cb']
const backfromadmreports = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bckfmreprts_cb']
const adminnewreport = ['üü¢ –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç', 'admnwrprt_cb']
const howdoyoulikeourtraining_text = '–ù—É —á—Ç–æ, –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞? –í—Å–µ –ª–∏ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –í–∞—à–µ –º–Ω–µ–Ω–∏–µ ‚ò∫Ô∏è'
const youchosepoint_text = 'üõí –ó–∞–∫–∞–∑–∞—Ç—å –∑–¥–µ—Å—å'
const anotherpoint_text = '‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ'
const backtomain_text = '‚óÄÔ∏è –ù–∞–∑–∞–¥'
const anothercategory_text = '‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø'
let hellomessage_text = `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –í–∞—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞. –°–æ –º–Ω–æ–π –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∑–∞–Ω—è—Ç–∏–π, –∞ —Ç–∞–∫–∂–µ –∫—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç`
const youchosecafe_text = '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ñ–µ–π–Ω—é Coffee BOOM, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: '
const sendlocation = 'üìç –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'
const choosecategory_text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:</b>'
const chooseprogramme_text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>'
const addto_basket_text = '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'
const changefoodamount_basket_text = '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
const addto_basket_text2 = '–ì–æ—Ç–æ–≤–æ'
const addto_basket_text3 = '–ì–æ—Ç–æ–≤–æ.'
const dont_addto_basket_text2 = 'üóë –£–¥–∞–ª–∏—Ç—å'
const anotherprogram_text = '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥—Ä—É–≥–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º'
const anotherfood_text2 = '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É'
const fillabonement_text = '–û—Ñ–æ—Ä–º–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç ‚ñ∂Ô∏è'
const chooseamountoffood_text = '–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '
const editbasket_text = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É'
const paybasket_text = '‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'
const youwanttochangepoint_text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –≤ –¥—Ä—É–≥–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏? –ü—Ä–∏ —Å–º–µ–Ω–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–¥–µ—Ç—Å—è –≤—ã–±–∏—Ä–∞—Ç—å –±–ª—é–¥–∞ —Å–Ω–æ–≤–∞'
const query_deletethismessage = '–ù–µ—Ç, –Ω–µ —Ö–æ—á—É'
const choosefoodtoedit_text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:'
const delete_basketfood = 'üóë  –£–¥–∞–ª–∏—Ç—å'
const basketisempty_text = '–¢–µ–ø–µ—Ä—å –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è. –î–∞–≤–∞–π –Ω–∞–ø–æ–ª–Ω–∏–º –µ–µ üòè'
const mybasket_text = 'üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞'
const myabonement_status = 'üßæ –°—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞'
const choosetime_text = '–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑? (–º–∏–Ω. 15 –º–∏–Ω)'
const chooseanothertime_text = '‚è≥ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è'
const paybutton_text = 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å'
const location_text = 'üìç –ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è?'
const phone_text = 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º'
const didyougetorder_text = '–í—ã —Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑? –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –º–æ–≥—É—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è'
const yesigotorder_text = '–î–∞, –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω'
const noigotorder_text = '–Ø –µ—â–µ –Ω–µ –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑'
const almostthere_text = 'ü§ó –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ –§–ò–û'
const dataiscorrect_text = '‚úîÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
const almostthere2_text = '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ "'+ dataiscorrect_text +'"'
const order_status_button = 'üö¥‚Äç‚ôÇÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
const coins_text = 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å'
const start_training_text = '‚è± –ù–∞—á–∞—Ç—å'
const add_email = 'üîó –î–æ–±–∞–≤–∏—Ç—å email'
const dont_add_email = '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ'
const spendmycoins = '–î–∞, —Ö–æ—á—É'
const dontspendmycoins = '–ù–µ—Ç'
const gotomain_text = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
const declineorder_button = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'
let help_phone = []
const didntaddemail_text = 'üòï –ñ–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π email. –≠—Ç–æ –µ—â–µ –æ–¥–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
const emailalreadyadded_text = '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å! –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –µ—â–µ –æ–¥–∏–Ω –∑–∞–∫–∞–∑: '
const badfeedback_text = 'üôÅ –ù–∞–º –∂–∞–ª—å, —á—Ç–æ –í—ã –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π. '
const goodfeedback_text = 'üëç –û—Ç–ª–∏—á–Ω–æ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. '
const normfeedback_text = 'üòê –°—Ç—Ä–∞–Ω–Ω–æ... –û–±—ã—á–Ω–æ –º—ã —Å–ª–µ–¥–∏–º –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –Ω–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∞ —É—Ä–∞! '
const dopblank_text = `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã. 
‚ùóÔ∏è –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω—É–∂–Ω–æ –≤ –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–ª—É–±–µ. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω`
const dataiscorrect2_text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ'

const leavecomment = '‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤'
const dontleavecomment = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑'
/////////////////////////////////////////////////////////////////
const openkeyboard_pic = 'https://storage.googleapis.com/upperrestaurant.appspot.com/Standards/howtoopen.jpg'
const sticker_hello = ['CAACAgIAAxkBAAMGYM3C1lBqxud-dg-iowVRkGW414MAAoMBAAIlA1IPWNNtHfsPGS0fBA', 'CAACAgIAAxkBAAIDqWDPepkl_U4La4z9-HJyBBHW-F3NAAKAAQACJQNSD7tHz-822-uaHwQ', 'CAACAgIAAxkBAAIDqmDPer1wMJFpjCOvjVn2mw9Va9ADAAKWAQACJQNSD1GYpaVpXb4FHwQ', 'CAACAgIAAxkBAAIDq2DPesqIO4cmZW7tzYiXN1ig0YSHAAKaAQACJQNSD6tgF3kuPi0sHwQ']
const sticker_success = 'CAACAgIAAxkBAAIG2mDQ-q0bypXtUaXFQsyObqaRI94tAAKHAQACJQNSD-j7MBUjpIIaHwQ'
const sticker_badtraining = 'CAACAgIAAxkBAAIE6mDYW84F1xGzOfhxYCWIu_zLCvBMAAKcAQACJQNSD4NGjRGcwhDcIAQ'
const sticker_goodtraining = 'CAACAgIAAxkBAAIE6WDYW0zgcKm6uDSjr4KJVoBvN7zdAAKFAQACJQNSD2kd7Abd4rJfIAQ'
const sticker_trainstarted = ['CAACAgIAAxkBAAIBmWDUsZ1U1D6NwePHF64U5Gh1un49AAKOAQACJQNSD3nI1sYpbxl6HwQ', 'CAACAgIAAxkBAAIBmmDUsaJq0HuhU4fhmD5vOWybr-cxAAKMAQACJQNSDzEM6U6Q3YWaHwQ', 'CAACAgIAAxkBAAIBm2DUsaV8qxjXEyWG_RANJ2Briw9-AAKQAQACJQNSD00wsDgYgXCMHwQ', 'CAACAgIAAxkBAAIBnGDUsaqphLiapGFRAAHfl65qaXCs8QACmAEAAiUDUg810q4HYxfDhR8E']
const text_notadmin = ['–≠—Ç–æ –±—ã–ª –ø—Ä–∞–Ω–∫, –º—ã –∑–Ω–∞–µ–º —á—Ç–æ –í—ã –Ω–µ –∞–¥–º–∏–Ω ü§£', '–°—Ç–æ–ø, —Ç–∞–∫ –í—ã –∂–µ –Ω–µ –∞–¥–º–∏–Ω üòü', '–ù–∞–ø–∏—Å–∞–Ω–æ –∂–µ, –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ üò°']
/////////////////////////////////////////////////////////////////
let basket = [] //–∫–æ—Ä–∑–∏–Ω–∞ (–º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤)
let decrease_foodcount = '-'
let increase_foodcount = '+'
let decrease_foodcount2 = '.-.'
let increase_foodcount2 = '.+.'
let temp_foodamount = []
//let food_categories = [['‚òïÔ∏è –ö–æ—Ñ–µ', 0, 'coffee'], ['üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ', 0, 'icecream'], ['üç£ –°—É—à–∏', 0, 'sushi'], ['üç∞ –î–µ—Å–µ—Ä—Ç—ã', 0, 'deserts'], ['üçî –§–∞—Å—Ç-—Ñ—É–¥', 0, 'fastfood'], ['–û—Å—Ç–∞–ª—å–Ω–æ–µ', 0, 'other']]
let food_categories = []
let temp_program_types = [] //
let myprogram_type = []
let temp_progtypes_text = [] //
let temp_backet_food = [] //
let finalbasket = [] //
let finalprice = [] //
let finaltime_deelay = ''
let finaltime = new Date()

//food_categories[current_chat] = [['‚òïÔ∏è –ö–æ—Ñ–µ', 0, 'coffee'], ['üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ', 0, 'icecream'], ['üç£ –°—É—à–∏', 0, 'sushi'], ['üç∞ –î–µ—Å–µ—Ä—Ç—ã', 0, 'deserts'], ['üçî –§–∞—Å—Ç-—Ñ—É–¥', 0, 'fastfood'], ['–û—Å—Ç–∞–ª—å–Ω–æ–µ', 0, 'other']]
//basket[current_chat] = []

///////////–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏///////////
let cashback = []
let max_cashback = []
let min_cashback = []
let min_price = []
let max_pay_percentage = 0
let min_pay_percentage = 0
let percent_foremail = 0
let skidka = [] //[current_chat]

///////////–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏///////////
let cheap_max = 0
let group_buys_amount = 0
let reach_min = 0
let user_mailingdata = []
let mailing_modes = ['sendall_cb', 'sndctgr_cb', 'sndprgrm_cb', 'sndper_cb', 'sndtm_cb']
let mailing_buttons =[ ['ü§º‚Äç‚ôÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'mlngcat_cb'], ['üïì –í—Ä–µ–º—è –¥–Ω—è','mlngtme_cb'], ['üìÖ –°—Ä–æ–∫ –ø–æ—Å–µ—â–µ–Ω–∏—è', 'mlnprd_cb'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'mlngback_cb']]
let mailing_time = [['üåû –£—Ç—Ä–µ–Ω–Ω–∏–µ –≥—Ä—É–ø–ø—ã', 'mlntmemor_cb'], ['üåö –í–µ—á–µ—Ä–Ω–∏–µ –≥—Ä—É–ø–ø—ã', 'mlntnght_cb'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'mlngtmebck_cb']]
let isMailingMessage = []
let mailing_text = []
let mailing_mode = []
let mailing_categories = []
const sendmessage_cb = 'sndmlngmsg_cb'
let isAdmin = []
///////////////////–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–±–æ–Ω–µ–º–µ–Ω—Ç–∞/////////////////
let keyboard_admin_cards = [['–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', 'chngdmcrd_cb'], ['–§–ò–û –Ω–∞ –∫–∞—Ä—Ç–µ', 'cngmcfio_cb'], ['KASPI –ù–æ–º–µ—Ä','cngkspnmbg_cb'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktopll_cb']]
let keyboard_admin_phone = [['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ', 'admcntphhlp_cb'], ['–ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ', 'admncktlg_cb'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktopll_cb']]
let keyboard_admin_times = [['–î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è: ', 'admdaytme_cb'], ['–í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è: ', 'admnghttme_cb'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktotm_cs']]
let keyboard_admin_location = [['–ê–¥—Ä–µ—Å: ', 'admadrstxt_cb'], ['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ', 'admadrscrdnt_cb'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktolct_cb']]
let keyboard_admin_loyal = [['–ö—ç—à–±—ç–∫ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: ', 'admcshbktran_cb'], ['–ú–∏–Ω. —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: ', 'armcshbmnvl_cb'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktolct_cb'], ['–ú–∏–Ω.: ','admcshbckmns_cb'], ['–ú–∞–∫—Å.: ','admcshbckmxs_cb']]
let keyboard_admin_voron = [['üòé: ', 'admnsgsskdgd_cb'], ['üòê: ', 'admnsgsskdmdl_cb'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktolct_cb'], ['ü§¨: ','admnsgsskdbad_cb'], ['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: ','admnsgsskdmxs_cb']]

let isChangingPrefs = []
let isChangingPhone = []
let isChangingTime = []
let isChangingLocation = []
let isChangingCashback = []
let isChangingVoron = []
///////////////–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ//////////////////
let user_phone = []
let user_email = []
let user_adress = []
let user_name = []
let user_username = []
//let user_lastbill = []
let user_id = []
let average_price = []
let average_purchases = []
let user_coins = []
let added_coins = []
let favourite_program = []
let abonements_bought = []
let userstatus = []
let order_name = []
let order_date = []
let abonement_status = []
let programme_pas = []

let user_payingmethod = []
let user_payingmethods = [['–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ','payingtocard_callback'], ['–ù–∞–ª–∏—á–Ω—ã–µ', 'payingcash_callback']]
let user_timescame = []
let user_freezeamount = []

/* user_phone[current_chat] = ''
user_email[current_chat] = ''
user_adress[current_chat] = ''
user_name[current_chat] = ''
user_username[current_chat] = 'unknown'
user_id[current_chat] = 0
average_price[current_chat] = 0
average_purchases[current_chat] = 0
user_coins[current_chat] = 0
added_coins[current_chat] = 0
favourite_food[current_chat] = 'unknown'
alltime_purchases_amount[current_chat] = 0
userstatus[current_chat] = 'unknown'
order_name[current_chat] = ''
order_date[current_chat] = ''
order_status[current_chat] = 'unknown'
skidka[current_chat] = 0 */

/* finalprice[current_chat] = 0
finalbasket[current_chat] = ''
temp_backet_food[current_chat] = 0
temp_food_text[current_chat] = ''
temp_food_price[current_chat] = 0
temp_foodamount[current_chat] = 1 */

let abonement_statuses_text = ['–í –æ–±—Ä–∞–±–æ—Ç–∫–µ ‚è≥', '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω', '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω', '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω', 'üòî –ò—Å—Ç–µ–∫']
let feedback_options = ['ü§© –•–æ—Ä–æ—à–æ', 'üòå –°—Ä–µ–¥–Ω–µ', 'üòí –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å']
let answered_feedback = []
let isAnswered_feedback = []
///////////////////////////////////////////////////////

//////////////////QUERY USER DATA//////////////////////
const changename_text = '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'
const changephone_text = '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä'
const changeadress_text = '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'
let isMakingChanges = []
let isMakingChanges_2 = []
///////////////////////////////////////////////////////

let delivery_min_price = 0
let delivery_price = 0
let point_location = []
let point_adress = []
let morning_time = []
let evening_time = []
let card_data = []
const abonementrequest_sended = '‚è≥ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ —É–≤–∏–¥–∏—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ–≥–æ. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫.'

var userlocation = []
var nearest_place = [] //–Ω–æ–º–µ—Ä –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è(–≤ –º–∞—Å—Å–∏–≤–µ)
var min_distance = []

//////////////////DATA FOR DELIVERS//////////////////////
let abonement_bill_topic_names = ['üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!', '‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω ', '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'ü•≥ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞']
let accept_order_callback = 'acc_n'
let refuse_order_callback = 'ref_n'
let isdelivered_callback = 'del_c'
let choosetype_callback = 'chstpe_'
let abonements_bill = ''
let abonements_bill_topic = ''
let abonemets_bill_client_info = ''
let abonements_bill_order_info = ''
let deliver_bill_finalprice = 0
let deliver_bill_order_details = ''
let accepted_order_name = ''
let deliver_bill_help_info = ''

///////////////////////////////////////////////////////

////////////////////SALES_PREFERENCES////////////////////
let suggestgoodskidka_text = []
let suggestmiddleskidka_text = []
let suggestbadskidka_text = []
let discountvalues = []
let programdiscount = []
////////////////////////////////////////////////////////

////////////////////MESSAGES_COUNTER////////////////////
let add_info_msg = []
let buttons_message = []
let messages_todelete = []
let messages_texts = []
///////////////////////////////////////////////////////
let types_keyboard = []
let unregistered_keyboard = []
unregistered_keyboard[0] = [
    [{
        text: mybasket_text
    }],
    [{
        text: paybasket_text
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]
unregistered_keyboard[1] = [
    [{
        text: start_training_text
    },{
        text: myabonement_status
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]
unregistered_keyboard[2] = [
    [{
        text: order_status_button
    },{
        text: myabonement_status
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]

unregistered_keyboard[3] = [
    [{
        text: myabonement_status
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]

let registered_keyboard = []
registered_keyboard[0] = [
    [{
        text: start_training_text
    }],
    [{
        text: gotomain_text
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]
const deelay = []

function StartMailing(towho, text, chatId) {
    if (towho === mailing_modes[4] + 'morning'){
        let mail = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/time/morning')
        mail.get().then(result => {
            let arr = result.val()
            arr = arr.split(',')
            for(let i = 0; i<arr.length; i++){
                bot.sendMessage(arr[i], text, {
                    parse_mode:'HTML'
                })
                .catch(err => {console.log(err)})
            }
        })
    }
    if (towho === mailing_modes[4] + 'evening'){
        let mail = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/time/evening')
        mail.get().then(result => {
            let arr = result.val()
            arr = arr.split(',')
            for(let i = 0; i<arr.length; i++){
                bot.sendMessage(arr[i], text, {
                    parse_mode:'HTML'
                })
                .catch(err => {console.log(err)})
            }
        })
    }
    if (towho === mailing_modes[0]){
        let mail = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/all')
        mail.get().then(result => {
            let arr = result.val()
            arr = arr.split(',')
            for(let i = 0; i<arr.length; i++){
                bot.sendMessage(arr[i], text, {
                    parse_mode:'HTML'
                })
                .catch(err => {console.log(err)})
            }
        })
    }
    if (towho.includes('period')){
        let tmp = towho.split('period')
        tmp = tmp[1]
        let mail = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/period/' + tmp)
        mail.get().then(result => {
            let arr = result.val()
            arr = arr.split(',')
            for(let i = 0; i<arr.length; i++){
                bot.sendMessage(arr[i], text, {
                    parse_mode:'HTML'
                })
                .catch(err => {console.log(err)})
            }
        })
    }
    if (towho.includes('mailprog_')){
        towho = towho.split('_')
        let category = towho[1]
        let program = towho[2]
        let mail = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + category + '/' + program + '/value')
        mail.get().then(result => {
            let arr = result.val()
            arr = arr.split(',')
            for(let i = 0; i<arr.length; i++){
                bot.sendMessage(arr[i], text, {
                    parse_mode:'HTML'
                })
                .catch(err => {console.log(err)})
            }
        })
    }
}

 //console.log(new Date(1630346400000) + '   |   ' + new Date(1624205621683))
function StartCheckingOrder(chat){
    let order_data = fb.database().ref(order_name[chat] + '/abonement/abonement_status')
    order_data.on('value', (result) => 
    {
        abonement_status[chat] = result.val()
        console.log('ORDER STATUS: ' + result.val() + ', name: "' + order_name[chat] + '"')
        user_mailingdata[current_chat] = []
        if (abonement_status[chat] === abonement_statuses_text[3]){
            programdiscount[chat] = 0
            bot.sendMessage(chat, '–ù–∞–º –∂–∞–ª—å, –Ω–æ –º—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –í–∞—à –∑–∞–∫–∞–∑. –ï—Å–ª–∏ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ' + help_phone[chat], {
                reply_markup:{
                    keyboard:[
                        [{
                            text: 'üîÉ –ù–∞ –≥–ª–∞–≤–Ω—É—é',
                        }]
                    ],
                    resize_keyboard: true
                }
            })

            return
        }
        
        if (abonement_status[chat] === abonement_statuses_text[2]){
            //–º—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–∫–∞–∑. –ù–∞ –∫–ª–∞–≤–µ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å "–∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω". –¢–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–ª –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–≥–æ—Ç–æ–≤–æ", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ —Ä–∞–∑. 
            //–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ, –º—ã –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑—ã–≤–∞—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç —Å —á–µ–∫–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏, —á—Ç–æ–±—ã –µ—Å–ª–∏ –≤ —á–∞—Ç–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ–º–µ–Ω—è—é—Ç —Å—Ç–∞—Ç—É—Å, –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–∞–ª –æ–ø–µ–≤–µ—â–µ–Ω–∏–π. 
            programdiscount[chat] = 0
            user_mailingdata[current_chat] = []
            let ppl_ingroup = fb.database().ref(programme_pas[chat] + '/people_in_group');
            ppl_ingroup.get().then((snapshot) => {
                if (snapshot.exists() && snapshot.val() !== 'unlimited'){
                    let tmp_ar = snapshot.val()
                    tmp_ar = tmp_ar.split('/')
                    tmp_ar = (parseInt(tmp_ar[0]) + 1).toString() + '/' + tmp_ar[1]
                    console.log('–î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–û–ì–û –£–ß–ê–°–¢–ù–ò–ö–ê –ü–†–û–ì–†–ê–ú–ú–´. –¢–ï–ü–ï–†–¨: tmp_ar')
                    let updates = {}
                    updates[programme_pas[chat] + '/people_in_group'] = tmp_ar
                    fb.database().ref().update(updates)
                }
                else {
                    console.log('–≠–¢–û –ù–ï –ì–†–£–ü–ü–û–í–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê')
                }
            })

            const temp_text = `‚úÖ –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>` + start_training_text + `. </b>
–£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!`
            userstatus[chat] = 'registered'
            bot.sendSticker(chat, sticker_success)
            .then(() => {
                bot.sendMessage(chat, temp_text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: start_training_text,
                                callback_data: accepttraining_text[1]
                            },{
                                text: refusetraining_text[0],
                                callback_data: refusetraining_text[1]
                            }]
                        ],
                    }
                })
            })
            
            return
        }
    }
)
}

function StartTraining(chatId, message_id){
    let userdata = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/clients/' + chatId)
    userdata.get().then((result) => 
    {
        let is_refused = false
        let is_denied = false

        let date = new Date()
        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
        let timeOfffset = 6 //Astana GMT +6
        let time_now = new Date(utcTime + (3600000 * timeOfffset))
        let end_time = new Date(result.val().abonement.end_date)
        
        if (result.val().abonement.abonement_status !== abonement_statuses_text[2] && is_refused === false){
            is_denied = true
            bot.sendMessage(chatId, '–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ' + result.val().abonement.abonement_status + '. –° —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üôÅ', {
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: refusetraining_text[0],
                            callback_data: refusetraining_text[1]
                        }]
                    ]
                }
            })
        }

        console.log(time_now + ' \\ ' + end_time)
        if (time_now > end_time && is_refused === false){
            console.log('TRUE!')
            is_refused = true

            let minutes = end_time.getMinutes()
            if (minutes < 10) minutes = '0' + minutes
            let hours = end_time.getHours()
            if (hours < 10) hours = '0' + hours
            let visible_date_end = /* new Intl.DateTimeFormat('ru-RU', options).format(end_time) + ' ' +  */hours + ':' + minutes + ', ' + end_time.getDate() + '.' + (end_time.getMonth() + 1) + '.' + end_time.getFullYear()

            bot.sendMessage(chatId, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–µ–∫. –û–Ω –±—ã–ª –≥–æ–¥–µ–Ω –¥–æ: ' + visible_date_end + '. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π', {
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: refusetraining_text[0],
                            callback_data: refusetraining_text[1]
                        }]
                    ]
                }
            })
        }

        if (result.val().abonement.visits !== 'unlimited' && result.val().abonement.visits < 1 && is_refused === false){
            is_refused = true
            bot.sendMessage(chatId, '–í—ã —É–∂–µ –ø–æ—Å–µ—Ç–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —á–∏—Å–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π', {
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: refusetraining_text[0],
                            callback_data: refusetraining_text[1]
                        }]
                    ]
                }
            })
        }
        console.log('first, time = ' + result.val().abonement.time + ', time_now: ' +  + time_now.getTime())
        if (result.val().abonement.time !== 'unlimited' && is_refused === false){
            console.log('second')
            let restriction_time_max/*  = time_now */
            let restriction_time_min/*  = time_now */
            if (result.val().abonement.time === 'evening'){
                //restriction_time_min = restriction_time_min.setHours(evening_time[chatId][0][0], evening_time[chatId][0][1])
                //restriction_time_max = restriction_time_max.setHours(evening_time[chatId][1][0], evening_time[chatId][1][1])
                restriction_time_min = new Date(time_now.getFullYear(), time_now.getMonth(), time_now.getDate(), evening_time[chatId][0][0], evening_time[chatId][0][1])
                restriction_time_max = new Date(time_now.getFullYear(), time_now.getMonth(), time_now.getDate(), evening_time[chatId][1][0], evening_time[chatId][1][1])
                console.log('third, time = evening, restriction_time_max: ' + restriction_time_max + ', restriction_time_min: ' + restriction_time_min + ', time_now: ' + time_now.getTime())
                console.log(time_now.getTime() < restriction_time_min )
                if (time_now.getTime() < restriction_time_min || time_now.getTime() > restriction_time_max){
                    console.log('fourth evening, time_now: ' + time_now)
                    //is_refused = true
                    is_denied = true
                    bot.sendMessage(chatId, 'üôä –£–ø—Å, –≤—ã –ø—Ä–∏—à–ª–∏ –Ω–µ –≤–æ–≤—Ä–µ–º—è... –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å ' + evening_time[chatId][0][0] + ':' + evening_time[chatId][0][1] + ' –ø–æ ' +  evening_time[chatId][1][0] + ':' + evening_time[chatId][1][1], {
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: refusetraining_text[0],
                                    callback_data: refusetraining_text[1]
                                }]
                            ]
                        }
                    })
                }
            }
            if (result.val().abonement.time === 'morning'){
                restriction_time_min = new Date(time_now.getFullYear(), time_now.getMonth(), time_now.getDate(), morning_time[chatId][0][0], morning_time[chatId][0][1])
                restriction_time_max = new Date(time_now.getFullYear(), time_now.getMonth(), time_now.getDate(), morning_time[chatId][1][0], morning_time[chatId][1][1])
                console.log('third, time = morning, restriction_time_max: ' + restriction_time_max + ', restriction_time_min: ' + restriction_time_min)
                if (time_now < restriction_time_min || time_now > restriction_time_max){
                    console.log('fourth morning, time_now: ' + time_now)
                    //is_refused = true
                    is_denied = true
                    bot.sendMessage(chatId, 'üôä –£–ø—Å, –≤—ã –ø—Ä–∏—à–ª–∏ –Ω–µ –≤–æ–≤—Ä–µ–º—è... –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å ' + morning_time[chatId][0][0] + ':' + morning_time[chatId][0][1] + ' –ø–æ ' +  morning_time[chatId][1][0] + ':' + morning_time[chatId][1][1], {
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: refusetraining_text[0],
                                    callback_data: refusetraining_text[1]
                                }]
                            ]
                        }
                    })
                }
            }
        }
        
        if (is_refused === false && is_denied === false){
            let updates = {}
            console.log(time_now.getTime() - userlastTraining[chatId])
            if ((time_now.getTime() - userlastTraining[chatId]) < 10000000){
                bot.sendMessage(chatId, '–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –í—ã —É–∂–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å! –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR. –í–ø–µ—Ä–µ–¥ –∫ –ø–æ–±–µ–¥–∞–º ü•á', {
                    parse_mode: 'HTML'
                })
                .then(() => {
                    fb.database().ref().update(updates)
                    IdentifyUser(chatId, false)
                })
            }
            else {
                userlastTraining[chatId] = time_now.getTime()
                if (result.val().abonement.visits !== 'unlimited'){          
                    updates['Fitness/'+club_name_fb[chatId]+'/clients/'+ chatId + '/abonement/visits'] = result.val().abonement.visits - 1
                    //updates['Basement/clients/CLIENTID/EGO_CHECK'] = order_update
                    updates['Fitness/'+club_name_fb[chatId]+'/clients/'+ chatId + '/coins'] = result.val().coins + cashback[chatId]
                }
                updates['Fitness/'+club_name_fb[chatId]+'/clients/'+ chatId + '/times_came'] = result.val().times_came + 1
                
                if (result.val().abonement.visits === 'unlimited'){
                    let final_skidka = Math.round((cashback[chatId]/4))
                    console.log('–æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞: ' + final_skidka)
                    updates['Fitness/'+club_name_fb[chatId]+'/clients/'+ chatId + '/coins'] = result.val().coins +final_skidka
                }
                
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chatId, message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                bot.sendSticker(chatId, sticker_trainstarted[Math.floor(Math.random() * sticker_trainstarted.length)])
                .then(() => {
                    anotherpoint_multiple[chatId] = 2
                    if (time_now.getFullYear() <= end_time.getFullYear() && time_now.getMonth() === end_time.getMonth() && time_now.getDate() <= end_time.getDate()){
                        if ((end_time.getDate() - time_now.getDate()) <= 3){
                            bot.sendMessage(chatId, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ë–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ: –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç–µ —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω–µ. –£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!', {
                                parse_mode: 'HTML'
                            })
                            .then(() => {
                                fb.database().ref().update(updates)
                                programme_pas[chatId] = result.val().programme_pas
                                console.log('p_p: ' + programme_pas[chatId])
                                bot.sendMessage(chatId, '‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –ª–∏–±–æ —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ:', {
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard:[
                                            [{
                                                text: backtomain_text,
                                                callback_data: backtomain_text
                                            }]
                                            [{
                                                text: continuemyabonement_text[0],
                                                callback_data: continuemyabonement_text[1]
                                            },
                                            {
                                                text: '–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É üèãÔ∏è‚Äç‚ôÇÔ∏è',
                                                callback_data: keyboards.main_menu_buttons[1][1]
                                            }]
                                        ]
                                    }
                                })
                                //IdentifyUser(chatId, false)
                            })
                        }
    
                        else {
                            bot.sendMessage(chatId, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ë–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ: –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç–µ —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω–µ. –£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!', {
                                parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: keyboards.main_menu_keyboard
                                }
                            })
                            .then(() => {
                                fb.database().ref().update(updates)
                                IdentifyUser(chatId, false)
                            })
                        }
                    }
                    else {
                        bot.sendMessage(chatId, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ë–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ: –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç–µ —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω–µ. –£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!', {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: keyboards.main_menu_keyboard
                            }
                        })
                        .then(() => {
                            fb.database().ref().update(updates)
                            IdentifyUser(chatId, false)
                        })
                    }
                })
            }
            
        }

        if (is_refused === true){
            if (result.val().abonement.abonement_status === abonement_statuses_text[2]){
                let group_data = fb.database().ref(result.val().programme_pas + '/people_in_group')
                group_data.get().then((res) => {
                    let updates = {}
                    if(res.exists() && res.val() !== 'unlimited'){

                        let temp_arr = res.val()
                        console.log('temp1: ' + temp_arr)
                        temp_arr = temp_arr.split('/')
                        temp_arr = (parseInt(temp_arr[0]) - 1).toString() + '/' + temp_arr[1]
                        updates[result.val().programme_pas + '/people_in_group'] = temp_arr
                        updates['Fitness/'+club_name_fb[chatId]+'/clients/'+ chatId + '/abonement/abonement_status'] = abonement_statuses_text[4]
                        fb.database().ref().update(updates)
                        console.log('–ê–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞, temp2: ' + temp_arr)
                   
                    }
                    else {
                        updates['Fitness/'+club_name_fb[chatId]+'/clients/'+ chatId + '/abonement/abonement_status'] = abonement_statuses_text[4]
                        fb.database().ref().update(updates)
                        console.log('–≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')
                    }

                    guserdata[chatId] = []
                    guserdata[chatId][0] = result.val().userrow
                    guserdata[chatId][1] = abonement_statuses_text[4]
                    GoogleStopUser(chatId, guserdata[chatId])
                })
            }
            
        }
        
    })
}

function CheckUser(userid, username, chatId, message_id){
    
    console.log('checking user: ' + userid + ' ' + username)
    let userdata = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/clients/' + userid)
    userdata.get().then((result) => 
    {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. ID: ' + userid + ' ' + result.val().id)
        //user_adress[chatId] = result.val().adress
        //user_email[chatId] = result.val().email
        user_name[chatId] = result.val().name
        user_username[chatId] = result.val().username
        user_phone[chatId] = result.val().phone
        user_id[chatId] = result.val().id
        //alltime_purchases_amount[chatId] = result.val().alltime_purchases_amount[chatId]
        user_coins[chatId] = result.val().coins

        userstatus[chatId] = 'registered'

        bot.sendMessage(chatId, almostthere_text, {
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtoprogramme_text[0],
                        callback_data: backtoprogramme_text[1]
                    }],
                    [{
                        text: '–ò–º—è: ' + user_name[chatId],
                        callback_data: changename_text
                    },
                    {
                        text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                        callback_data: changephone_text
                    }],
                    [{
                        text: dataiscorrect_text,
                        callback_data: dataiscorrect_text
                    }]
                ]
            }
        }).then(res => {
            add_info_msg[chatId] = message_id + 2
            messages_todelete[chatId][2] = res.message_id
            console.log('savedmessage = ' + add_info_msg[chatId] + ', ' + messages_todelete[chat.id][2])
        }).catch(err => {console.log(err)})

        //StartAnalitycs()

    }).catch(error => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. ' + error)
        userstatus[chatId] = 'unregistered'
        /*fb.database().ref('Basement/clients/').set({
            userid : {
                adress: 'unknown'
            }
            username: name,
            email: email,
            profile_picture : imageUrl
          });*/
        user_name[chatId] = username
          bot.sendMessage(chatId, almostthere_text, {
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtoprogramme_text[0],
                        callback_data: backtoprogramme_text[1]
                    }],
                    [{
                        text: '–ò–º—è: ' + user_name[chatId],
                        callback_data: changename_text
                    },
                    {
                        text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' /* + user_phone[chatId] */,
                        callback_data: changephone_text
                    }]
                ]
            }
        }).then(res => {
            add_info_msg[chatId] = message_id + 2 
            messages_todelete[chatId][2] = res.message_id
            console.log('savedmessage = ' + add_info_msg[chatId] + ', ' + message_id)
        }).catch(err => {console.log(err)})

        //StartAnalitycs()
    })
}

function StartAnalitycs(){
    
    //—É–∑–Ω–∞–µ–º –ª—é–±–∏–º—É—é –µ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let i = 0; i < basket[current_chat].length; i++){
        if (basket[current_chat][i][3] === 0){
            //—Ç—É—Ç –∏–¥—É—Ç –∑–∞–≤—Ç—Ä–∞–∫–∏, –∞ –∑–Ω–∞—á–∏—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–æ—Å–Ω–æ–≤–Ω–æ–µ"
            food_categories[current_chat][5][1] = food_categories[current_chat][5][1] + basket[current_chat][i][1]
            console.log('–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–æ—Å–Ω–æ–≤–Ω–æ–µ" –æ—á–∫–∏. –û—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–ø–µ—Ä—å: ' + food_categories[current_chat][5][1])
        }
        if (basket[current_chat][i][3] === 1){
            //—Ç—É—Ç –∏–¥—É—Ç –¥–µ—Å–µ—Ä—Ç—ã, –∑–Ω–∞—á–∏—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ "–¥–µ—Å–µ—Ä—Ç—ã"
            food_categories[current_chat][3][1] = food_categories[current_chat][3][1] + basket[current_chat][i][1]
            console.log('–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¥–µ—Å–µ—Ä—Ç—ã" –æ—á–∫–∏. –î–µ—Å–µ—Ä—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å: ' + food_categories[current_chat][3][1])
        }
        if (i === basket[current_chat].length - 1){
            //–≤—Å–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —Ç–µ–ø–µ—Ä—å —É–∑–Ω–∞–µ–º –∫–∞–∫—É—é –µ–¥—É –ª—é–±–∏–º
            console.log('–ë–∞–ª–ª—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏. –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –ª—é–±–∏–º—É—é –µ–¥—É')
            let favourite_food_number = []
            favourite_food_number[current_chat] = 0
            for (let i = 0; i < food_categories[current_chat].length; i++){
                if (i <= food_categories[current_chat].length - 1){
                    console.log('–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é #' + i + ' –∏ #' + (i+1))
                    /* if (food_categories[current_chat][i][1] >= food_categories[current_chat][i+1][1]){
                        favourite_food[current_chat]= food_categories[current_chat][i][0]
                        console.log(i +' 1 –ö–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i][0] + ' –±–æ–ª—å—à–µ, —á–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i+1][0])
                    }
                    else if (food_categories[current_chat][i][1] < food_categories[current_chat][i+1][1]){
                        favourite_food[current_chat]= food_categories[current_chat][i+1][0]
                        console.log(i + ' 2 –ö–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i+1][0] + ' –±–æ–ª—å—à–µ, —á–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i][0])
                    }*/
                    if (food_categories[current_chat][i][1] >= favourite_food_number[current_chat]){
                        favourite_program[current_chat]= food_categories[current_chat][i][2]
                        favourite_food_number[current_chat] = food_categories[current_chat][i][1]
                        console.log(i +' 1 –ö–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i][0] + ' –±–æ–ª—å—à–µ')
                    }
                    if (i === food_categories[current_chat].length - 1){
                        console.log('WINNER: ' + favourite_program[current_chat])
                    } 

                }
            }
        }
    }

    //—É–∑–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (average_price[current_chat] === 0){
        console.log('1 finalprice is ' + finalprice[current_chat])
        average_price[current_chat] = finalprice[current_chat]
    }
    if (average_price[current_chat] !== 0){
        console.log('2 finalprice is ' + finalprice[current_chat])
        average_price[current_chat] = (average_price[current_chat] + finalprice[current_chat]) / 2
        console.log('2 average price is ' + average_price[current_chat])
    }

    //—É–∑–Ω–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –∑–∞ —Ä–∞–∑ –±–ª—é–¥
    if (average_purchases[current_chat] === 0){
        for (let i = 0; i < basket[current_chat].length; i++){
            average_purchases[current_chat] += basket[current_chat][i][1]
            if (i === basket[current_chat] - 1){
                console.log('1 purchases amount = ' + average_purchases[current_chat])
            }
        }
    }
    if (average_purchases[current_chat] !== 0){
        let temp_purchases = 0
        for (let i = 0; i < basket[current_chat].length; i++){
            temp_purchases += basket[current_chat][i][1]
            if (i === basket[current_chat] - 1){
                console.log('2 old purchases amount = ' + average_purchases[current_chat])
                console.log('2 new purchases amount = ' + temp_purchases)
                average_purchases[current_chat] = (average_purchases[current_chat] + temp_purchases) / 2
                console.log('2 final purchases amount = ' + average_purchases[current_chat])
            }
        }
    }
}

function AddMailingData(chatId, is_new){
    if (is_new === true){
        let all = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/all/')
        all.get().then((result) => {
            if (result.exists()){
                /* let arr = result.val().split(',')
                for(let i = 0; i< arr.length; i++){
                    if (i === arr.length - 1 && chatId.toString() !== arr[i]){
                        let updates = {}
                        updates['Fitness/' + club_name_fb[chatId] + '/mailing/all/'] = result.val() + ',' + chatId.toString()
                        console.log(i + ' | user ' + chatId + ' added to mailing category: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/all/')
                        fb.database().ref().update(updates)
                    }
                } */
                let arr = result.val()
                if (!arr.includes(chatId + ',')){
                    let updates = {}
                    updates['Fitness/' + club_name_fb[chatId] + '/mailing/all/'] = result.val() + ',' + chatId.toString()
                    console.log(' | user ' + chatId + ' added to mailing category: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/all/')
                    fb.database().ref().update(updates)
                }
            }

            else {
                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/mailing/all/'] = chatId.toString()
                console.log(' | user ' + chatId + ' added to mailing category: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/all/')
                fb.database().ref().update(updates)
            }
            
        })
        let category = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + userCategory[chatId] + '/' + userProgram[chatId] + '/value')
        category.get().then((result) => {
            if (result.exists()){
                /* let arr = result.val().split(',')
                for(let i = 0; i< arr.length; i++){
                    if (i === arr.length - 1 && chatId.toString() !== arr[i]){
                        let updates = {}
                        updates['Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + userCategory[chatId] + '/' + userProgram[chatId] + '/value'] = result.val() + ',' + chatId.toString()
                        console.log(i + ' | user ' + chatId + ' added to mailing category: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + userCategory[chatId] + '/' + userProgram[chatId] + '/value')
                        fb.database().ref().update(updates)
                    }
                } */
                let arr = result.val()
                if (!arr.includes(chatId + ',')){
                    let updates = {}
                    updates['Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + userCategory[chatId] + '/' + userProgram[chatId] + '/value'] = result.val() + ',' + chatId.toString()
                    console.log(' | user ' + chatId + ' added to mailing category: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + userCategory[chatId] + '/' + userProgram[chatId] + '/value')
                    fb.database().ref().update(updates)
                }
            }

            else {
                let updates = {}
                
                updates['Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + userCategory[chatId] + '/' + userProgram[chatId] + '/value'] = chatId.toString()
                updates['Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + userCategory[chatId] + '/' + userProgram[chatId] + '/name'] = myprogram_type[chatId][6]
                console.log(' | user ' + chatId + ' added to mailing category: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + userCategory[chatId] + '/' + userProgram[chatId] + '/value')
                fb.database().ref().update(updates)
            }
            
        })
        if (myprogram_type[chatId][2] !== 'unlimited'){
            let time = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/time/' + myprogram_type[chatId][2])
            time.get().then((result) => {
                if (result.exists()){
                    /* let arr = result.val().split(',')
                    for(let i = 0; i< arr.length; i++){
                        if (i === arr.length - 1 && chatId.toString() !== arr[i]){
                            let updates = {}
                            updates['Fitness/' + club_name_fb[chatId] + '/mailing/time/' + myprogram_type[chatId][2]] = result.val() + ',' + chatId.toString()
                            console.log(i + ' | user ' + chatId + ' added to mailing time: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/time/' + myprogram_type[chatId][2])
                            fb.database().ref().update(updates)
                        }
                    } */
                    let arr = result.val()
                    if (!arr.includes(chatId + ',')){
                        let updates = {}
                        updates['Fitness/' + club_name_fb[chatId] + '/mailing/time/' + myprogram_type[chatId][2]] = result.val() + ',' + chatId.toString()
                        console.log(' | user ' + chatId + ' added to mailing time: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/time/' + myprogram_type[chatId][2])
                        fb.database().ref().update(updates)
                    }
                }
                else {
                    let updates = {}
                    updates['Fitness/' + club_name_fb[chatId] + '/mailing/time/' + myprogram_type[chatId][2]] = chatId.toString()
                    console.log(' | user ' + chatId + ' added to mailing time: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/time/' + myprogram_type[chatId][2])
                    fb.database().ref().update(updates)
                }
            })
        }
        let period = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/period/' + myprogram_type[chatId][0])
        period.get().then((result) => {
            if (result.exists()){
                /* let arr = result.val().split(',')
                for(let i = 0; i< arr.length; i++){
                    if (i === arr.length - 1 && chatId.toString() !== arr[i]){
                        let updates = {}
                        updates['Fitness/' + club_name_fb[chatId] + '/mailing/period/' + myprogram_type[chatId][0]] = result.val() + ',' + chatId.toString()
                        console.log(i + ' | user ' + chatId + ' added to mailing time: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/period/' + myprogram_type[chatId][0])
                        fb.database().ref().update(updates)
                    }
                } */
                let arr = result.val()
                if (!arr.includes(chatId + ',')){
                    let updates = {}
                    updates['Fitness/' + club_name_fb[chatId] + '/mailing/period/' + myprogram_type[chatId][0]] = result.val() + ',' + chatId.toString()
                    console.log(' | user ' + chatId + ' added to mailing time: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/period/' + myprogram_type[chatId][0])
                    fb.database().ref().update(updates)
                }
            }
            else {
                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/mailing/period/' + myprogram_type[chatId][0]] = chatId.toString()
                console.log(' | user ' + chatId + ' added to mailing time: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/period/' + myprogram_type[chatId][0])
                fb.database().ref().update(updates)
            }
        })

    }
}

function DeleteMailingData(chatId){
    console.log('removing from previous mailing... ' + user_mailingdata[chatId][0] + ', ' + user_mailingdata[chatId][1] + ', ' + user_mailingdata[chatId][2] + ', ' + user_mailingdata[chatId][3])
    let category = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + user_mailingdata[chatId][0] + '/' + user_mailingdata[chatId][1])
    category.get().then((result) => {
        if (result.exists()) {
            let arr = result.val()
            if (arr.includes(',' + chatId.toString())){
                arr = arr.replace(',' + chatId.toString(), '')
                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + user_mailingdata[chatId][0] + '/' + user_mailingdata[chatId][1]] = arr.toString()
                console.log(' | user ' + chatId + ' removed to mailing category: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + user_mailingdata[chatId][0] + '/' + user_mailingdata[chatId][1])
                fb.database().ref().update(updates)
            }
        }
    })
    if (user_mailingdata[chatId][2] !== 'unlimited'){
        let time = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/time/' + user_mailingdata[chatId][2])
        time.get().then((result) => {
            if (result.exists()){
                let arr = result.val()
                if (arr.includes(',' + chatId.toString())){
                    arr = arr.replace(',' + chatId.toString(), '')
                    let updates = {}
                    updates['Fitness/' + club_name_fb[chatId] + '/mailing/time/' + user_mailingdata[chatId][2]] = arr.toString()
                    console.log(' | user ' + chatId + ' removed to mailing category: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/time/' + user_mailingdata[chatId][2])
                    fb.database().ref().update(updates)
                }
            }
            
        })
    }
    let period = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/period/' + user_mailingdata[chatId][3])
    period.get().then((result) => {
        if (result.exists()){
            let arr = result.val()
            if (arr.includes(',' + chatId.toString())){
                arr = arr.replace(',' + chatId.toString(), '')
                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/mailing/period/' + user_mailingdata[chatId][3]] = arr.toString()
                console.log(' | user ' + chatId + ' removed to mailing category: ' + 'Fitness/' + club_name_fb[chatId] + '/mailing/period/' + user_mailingdata[chatId][3])
                fb.database().ref().update(updates)
            }
        }
        
    })
}

async function GoogleAddUser(chatId, guserdata){

    let doc = new GoogleSpreadsheet()
    let sheet, fileId, rows
    if (guserdata[12] === undefined){
        console.log('undefined...')
        await doc.useServiceAccountAuth(creds)
    
        // await doc[chatId].useServiceAccountAuth(creds)
        await doc.createNewSpreadsheetDocument({ title: '–ë–î –ö–ª–∏–µ–Ω—Ç–æ–≤ ' + club_name_fb[chatId]})
        .then(async function() {
            doc.loadInfo()
            sheet = doc.sheetsByIndex[0] 
            //sheet.title = '–ö–ª–∏–µ–Ω—Ç—ã'
            rows = await sheet.getRows()
            fileId = doc.spreadsheetId;
            console.log('https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId)
            drive = google.drive({ version: "v3", auth: auth })
            await drive.permissions.create({
                resource: {
                  type: "anyone",
                  role: "reader",
                },
                fileId: fileId,
                fields: "id",
            })

            await sheet.loadCells('A1:Z1000'); // loads a range of cells
            console.log(sheet.gridProperties);
            console.log(sheet.lastColumnLetter) // total cells, loaded, how many non-empty

            //–°–æ–∑–¥–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ç–¥

            let border_theme = {
                style: 'SOLID',
                'colorStyle': {
                    'rgbColor': {
                        'red': 180,
                        'green': 180,
                        'blue': 180,
                    }
                }
            }
            let cellsdark1 = sheet.getCellByA1('A' + (1 + guserdata[11]).toString())
            cellsdark1.backgroundColor = {
                red: 0,
                green: 0.8,
                blue: 0,
            }
            cellsdark1.textFormat = {
                bold: true
            }
            cellsdark1.save()
            let cellsdark2 = sheet.getCellByA1('B' + (1 + guserdata[11]).toString())
            cellsdark2.backgroundColor = {
                red: 0,
                green: 0.8,
                blue: 0,
            }
            cellsdark2.textFormat = {
                bold: true
            }
            cellsdark2.save()
            for (let i=0; i < 11; i++){
                let cell1 = sheet.getCellByA1('A' + (i+1 + guserdata[11]).toString())
                cell1.value = gusernames[i]
                cell1.horizontalAlignment = 'LEFT'
                cell1.borders = {
                    'top': border_theme,
                    'left': border_theme,
                    'right': border_theme,
                    'bottom': border_theme
                }

                let cell2 = sheet.getCellByA1('B' + (i+1 + guserdata[11]).toString())
                cell2.value = guserdata[i]
                cell2.horizontalAlignment = 'RIGHT'
                cell2.borders = {
                    'top': border_theme,
                    'left': border_theme,
                    'right': border_theme,
                    'bottom': border_theme
                }
                if (i === 10){
                    await sheet.saveUpdatedCells(); // save all updates in one call
                }
            }
        })
        
    }

    if (guserdata[12] !== undefined){
        console.log('NOT undefined... ' + guserdata[12])
        doc = new GoogleSpreadsheet(guserdata[12])
        await doc.useServiceAccountAuth(creds)
        .then(() => {
            doc.loadInfo().then(async function() {
                sheet = doc.sheetsByIndex[0] 
                rows = await sheet.getRows()
                console.log('https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId)
                //–¢–£–¢ –ù–ê–ß–ò–ù–ê–¢–¨ –ó–ê–ü–û–õ–ù–Ø–¢–¨ –ö–õ–ï–¢–ö–ò

                await sheet.loadCells('A1:Z1000'); // loads a range of cells
                console.log(sheet.gridProperties);
                console.log(sheet.lastColumnLetter) // total cells, loaded, how many non-empty
                let border_theme = {
                    style: 'SOLID',
                    'colorStyle': {
                        'rgbColor': {
                            'red': 180,
                            'green': 180,
                            'blue': 180,
                        }
                    }
                }
                let cellsdark1 = sheet.getCellByA1('A' + (1 + guserdata[11]).toString())
                cellsdark1.backgroundColor = {
                    red: 0,
                    green: 0.8,
                    blue: 0,
                }
                cellsdark1.textFormat = {
                    bold: true
                }
                cellsdark1.save()
                let cellsdark2 = sheet.getCellByA1('B' + (1 + guserdata[11]).toString())
                cellsdark2.backgroundColor = {
                    red: 0,
                    green: 0.8,
                    blue: 0,
                }
                cellsdark2.textFormat = {
                    bold: true
                }
                cellsdark2.save()
                for (let i=0; i < 11; i++){
                    let cell1 = sheet.getCellByA1('A' + (i+1 + guserdata[11]).toString())
                    cell1.value = gusernames[i]
                    cell1.horizontalAlignment = 'LEFT'
                    cell1.borders = {
                        'top': border_theme,
                        'left': border_theme,
                        'right': border_theme,
                        'bottom': border_theme
                    }

                    let cell2 = sheet.getCellByA1('B' + (i+1 + guserdata[11]).toString())
                    cell2.value = guserdata[i]
                    cell2.horizontalAlignment = 'RIGHT'
                    cell2.borders = {
                        'top': border_theme,
                        'left': border_theme,
                        'right': border_theme,
                        'bottom': border_theme
                    }
                    if (i === 10){
                        await sheet.saveUpdatedCells(); // save all updates in one call
                    }
                }
            })
            
            
        })
        
    }
} 

async function GoogleFreezeUser(chatId, guserdata){

    let doc = new GoogleSpreadsheet()
    let sheet, rows

    let sh_info = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/analytics/');
    sh_info.get().then(async function(snapshot){
        if (guserdata[0] !== undefined){
            console.log('NOT undefined... ' + guserdata[0])
            doc = new GoogleSpreadsheet(snapshot.val().sh_online)
            await doc.useServiceAccountAuth(creds)
            .then(() => {
                doc.loadInfo().then(async function() {
                    sheet = doc.sheetsByIndex[0] 
                    rows = await sheet.getRows()
                    console.log('https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId)
                    //–¢–£–¢ –ù–ê–ß–ò–ù–ê–¢–¨ –ó–ê–ü–û–õ–ù–Ø–¢–¨ –ö–õ–ï–¢–ö–ò
    
                    await sheet.loadCells('A1:Z1000'); // loads a range of cells
                    let cellsdark1 = sheet.getCellByA1('A' + guserdata[0])
                    cellsdark1.backgroundColor = {
                        red: 0,
                        green: 0.5,
                        blue: 1,
                    }
                    let cellsdark2 = sheet.getCellByA1('B' + guserdata[0])
                    cellsdark2.backgroundColor = {
                        red: 0,
                        green: 0.5,
                        blue: 1,
                    }
                    let cell_status = sheet.getCellByA1('B' + (guserdata[0] + 3).toString())
                    cell_status.value = guserdata[1]

                    let cell_freezedate = sheet.getCellByA1('B' + (guserdata[0] + 10).toString())
                    cell_freezedate.value = guserdata[2]

                    await sheet.saveUpdatedCells();
                })
                
                
            })
            
        }
    })
} 

async function GoogleUnFreezeUser(chatId, guserdata){

    let doc = new GoogleSpreadsheet()
    let sheet, rows

    let sh_info = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/analytics/');
    sh_info.get().then(async function(snapshot) {
        if (guserdata[0] !== undefined){
            console.log('NOT undefined... ' + guserdata[0])
            doc = new GoogleSpreadsheet(snapshot.val().sh_online)
            await doc.useServiceAccountAuth(creds)
            .then(() => {
                doc.loadInfo().then(async function() {
                    sheet = doc.sheetsByIndex[0] 
                    rows = await sheet.getRows()
                    console.log('https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId)
                    //–¢–£–¢ –ù–ê–ß–ò–ù–ê–¢–¨ –ó–ê–ü–û–õ–ù–Ø–¢–¨ –ö–õ–ï–¢–ö–ò
    
                    await sheet.loadCells('A1:Z1000'); // loads a range of cells
                    let cellsdark1 = sheet.getCellByA1('A' + guserdata[0])
                    cellsdark1.backgroundColor = {
                        red: 0,
                        green: 0.8,
                        blue: 0,
                    }
                    let cellsdark2 = sheet.getCellByA1('B' + guserdata[0])
                    cellsdark2.backgroundColor = {
                        red: 0,
                        green: 0.8,
                        blue: 0,
                    }
                    let cell_status = sheet.getCellByA1('B' + (guserdata[0] + 3).toString())
                    cell_status.value = guserdata[1]

                    let cell_freezedate = sheet.getCellByA1('B' + (guserdata[0] + 10).toString())
                    cell_freezedate.value = guserdata[2]

                    let cell_freezeleft = sheet.getCellByA1('B' + (guserdata[0] + 9).toString())
                    cell_freezeleft.value = guserdata[3]

                    let cell_newdate = sheet.getCellByA1('B' + (guserdata[0] + 5).toString())
                    cell_newdate.value = guserdata[4]

                    await sheet.saveUpdatedCells();
                })
                
                
            })
            
        }
    })
} 

async function GoogleStopUser(chatId, guserdata){

    let doc = new GoogleSpreadsheet()
    let sheet, rows

    let sh_info = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/analytics/');
    sh_info.get().then(async function(snapshot) {
        if (guserdata[0] !== undefined){
            console.log('NOT undefined... ' + guserdata[0])
            doc = new GoogleSpreadsheet(snapshot.val().sh_online)
            await doc.useServiceAccountAuth(creds)
            .then(() => {
                doc.loadInfo().then(async function() {
                    sheet = doc.sheetsByIndex[0] 
                    rows = await sheet.getRows()
                    console.log('https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId)
                    //–¢–£–¢ –ù–ê–ß–ò–ù–ê–¢–¨ –ó–ê–ü–û–õ–ù–Ø–¢–¨ –ö–õ–ï–¢–ö–ò
    
                    await sheet.loadCells('A1:Z1000'); // loads a range of cells
                    let cellsdark1 = sheet.getCellByA1('A' + (guserdata[0] + 1).toString())
                    cellsdark1.backgroundColor = {
                        red: 0.8,
                        green: 0,
                        blue: 0,
                    }
                    let cellsdark2 = sheet.getCellByA1('B' + (guserdata[0] + 1).toString())
                    cellsdark2.backgroundColor = {
                        red: 0.8,
                        green: 0,
                        blue: 0,
                    }
                    let cell_status = sheet.getCellByA1('B' + (guserdata[0] + 4).toString())
                    cell_status.value = guserdata[1]

                    await sheet.saveUpdatedCells();
                })
                
                
            })
            
        }
    })
} 

async function GoogleChangePhone(chatId, guserdata){
    console.log('making changes 5')
    let doc = new GoogleSpreadsheet()
    let sheet, rows

    let sh_info = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/analytics/');
    sh_info.get().then(async function(snapshot) {
        console.log('making changes 6')
        if (guserdata[0] !== undefined){
            console.log('NOT undefined... ' + guserdata[0])
            doc = new GoogleSpreadsheet(snapshot.val().sh_online)
            await doc.useServiceAccountAuth(creds)
            .then(() => {
                doc.loadInfo().then(async function() {
                    sheet = doc.sheetsByIndex[0] 
                    rows = await sheet.getRows()
                    console.log('https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId)
                    //–¢–£–¢ –ù–ê–ß–ò–ù–ê–¢–¨ –ó–ê–ü–û–õ–ù–Ø–¢–¨ –ö–õ–ï–¢–ö–ò
    
                    await sheet.loadCells('A1:Z1000'); // loads a range of cells

                    let cell_status = sheet.getCellByA1('B' + (guserdata[0] + 2).toString())
                    cell_status.value = guserdata[1]

                    await sheet.saveUpdatedCells();
                })
                
                
            })
            
        }
    })
} 

async function GoogleCreateReport(chatId, name){

    let date = new Date()
    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
    let timeOfffset = 6 //Astana GMT +6
    let Astana_date_accept = new Date(utcTime + (3600000 * timeOfffset))
    let visible_date_accept = (Astana_date_accept.getMonth() + 1) + '.' + Astana_date_accept.getFullYear()

    let doc = new GoogleSpreadsheet()
    let sheet, fileId, rows
    await doc.useServiceAccountAuth(creds)
    
    // await doc[chatId].useServiceAccountAuth(creds)
    await doc.createNewSpreadsheetDocument(
        { 
            title: '–û—Ç—á–µ—Ç –∑–∞ '+ visible_date_accept,
            'spreadsheetTheme': {
                'primaryFontFamily': 'Arial',
                'themeColors': [
                    {
                        'colorType' : 'TEXT',
                        'color': {
                            "rgbColor": {
                                'red': 0,
                                'green':0,
                                'blue':0,
                                'alpha': 1
                              },
                        }
                    },
                    {
                        'colorType' : 'BACKGROUND',
                        'color': {
                            "rgbColor": {
                                'red': 1,
                                'green':1,
                                'blue':1,
                                'alpha': 1
                              },
                        }
                    },
                    {
                        'colorType' : 'LINK',
                        'color': {
                            "rgbColor": {
                                'red': 0.7,
                                'green':0.3,
                                'blue':0.8,
                                'alpha': 1
                              },
                        }
                    },
                    {
                        'colorType' : 'ACCENT1',
                        'color': {
                            "rgbColor": {
                                'red': 0.42,
                                'green':0.66,
                                'blue':0.31,
                                'alpha': 1
                              },
                        }
                    },
                    {
                        'colorType' : 'ACCENT2',
                        'color': {
                            "rgbColor": {
                                'red': 0.3,
                                'green':0.53,
                                'blue':0.9,
                                'alpha': 1
                              },
                        }
                    },
                    {
                        'colorType' : 'ACCENT3',
                        'color': {
                            "rgbColor": {
                                'red': 1,
                                'green':0,
                                'blue':0,
                                'alpha': 1
                              },
                        }
                    },
                    {
                        'colorType' : 'ACCENT4',
                        'color': {
                            "rgbColor": {
                                'red': 0.66,
                                'green':0.8,
                                'blue':0.7,
                                'alpha': 1
                              },
                        }
                    },
                    {
                        'colorType' : 'ACCENT5',
                        'color': {
                            "rgbColor": {
                                'red': 0.98,
                                'green':0.74,
                                'blue':0.16,
                                'alpha': 1
                              },
                        }
                    },
                    {
                        'colorType' : 'ACCENT6',
                        'color': {
                            "rgbColor": {
                                'red': 0.73,
                                'green':0.83,
                                'blue':1,
                                'alpha': 1
                              },
                        }
                    }
                ]
            }
        })
    .then(async function() {
        await doc.loadInfo().then(async function() {
            sheet = doc.sheetsByIndex[0] 
            //sheet.title = '–ö–ª–∏–µ–Ω—Ç—ã'
            await sheet.loadCells('A1:Z1000') // loads a range of cells
            .then(async function() {
                let a1 = sheet.getCellByA1('A1')
                a1.value = 0
                await sheet.saveUpdatedCells()
                .then(async function() {
                    rows = await sheet.getRows()
                    fileId = doc.spreadsheetId;
                    console.log('https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId)
                    drive = google.drive({ version: "v3", auth: auth })
                    await drive.permissions.create({
                        resource: {
                          type: "anyone",
                          role: "reader",
                        },
                        fileId: fileId,
                        fields: "id",
                    })
                    
                    let copiedoc = new GoogleSpreadsheet('1S1H28SL3Xy1b735jbOpRpNpZUCb5JQrk6oiWJCDIiUM')
                    await copiedoc.useServiceAccountAuth(creds)
                    .then(async function() {
                        await copiedoc.loadInfo().then(async function() {
                            let copiedsheet = copiedoc.sheetsByIndex[0]
                            await copiedsheet.copyToSpreadsheet(fileId).then(async function() {
                                console.log('COPIED')
                                await sheet.delete()
                                sheet = doc.sheetsByIndex[0] 
                                //sheet.title = '–û—Ç—á–µ—Ç'

                                let tablelength = []
                                await sheet.loadCells('A1:Z1000').then(async function() {
                                    let cell_whocreated = sheet.getCell(0,1)
                                    cell_whocreated.value = '–æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω ' + visible_date_accept + '. –°–æ–∑–¥–∞–ª ' + name + ' (' + chatId + ')'
                                    await sheet.saveUpdatedCells()
                                })
                                
                                let updates = {}
                                await doc.addSheet({title: '–ò—Å—Ö–æ–¥–Ω–∏–∫–∏ (–Ω–µ –º–µ–Ω—è—Ç—å)'})
                                .then(async function() {
                                    let resources_sheet = doc.sheetsByIndex[1] 
                                    await resources_sheet.loadCells('A1:Z1000').then(async function() {
                                        /*let a1 = resources_sheet.getCellByA1('A1')
                                        a1.value = 0
                                        await resources_sheet.saveUpdatedCells() */
                                        
                                        let cell_title1 = resources_sheet.getCell(12,0)
                                        cell_title1.value = '–ê–±. –¥–æ—Ö–æ–¥—ã'
                                        let cell_topicname1 = resources_sheet.getCell(12,1)
                                        cell_topicname1.value = '–≠—Ç–æ—Ç –º–µ—Å—è—Ü'
                                        let cell_topicname2 = resources_sheet.getCell(12,2)
                                        cell_topicname2.value = '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü'

                                         let cell_title2 = resources_sheet.getCell(12,4)
                                        cell_title2.value = '–ê–±. –ø—Ä–æ–¥–∞–∂–∏'
                                        let cell_topicname11 = resources_sheet.getCell(12,5)
                                        cell_topicname11.value = '–≠—Ç–æ—Ç –º–µ—Å—è—Ü'
                                        let cell_topicname22 = resources_sheet.getCell(12,6)
                                        cell_topicname22.value = '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü'

                                        let cell_title3 = resources_sheet.getCell(12,8)
                                        cell_title3.value = '–¢–æ–≤. –¥–æ—Ö–æ–¥—ã'
                                        let cell_topicname111 = resources_sheet.getCell(12,9)
                                        cell_topicname111.value = '–≠—Ç–æ—Ç –º–µ—Å—è—Ü'
                                        let cell_topicname222 = resources_sheet.getCell(12,10)
                                        cell_topicname222.value = '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü'

                                        let cell_title4 = resources_sheet.getCell(12,12)
                                        cell_title4.value = '–¢–æ–≤. –ø—Ä–æ–¥–∞–∂–∏'
                                        let cell_topicname1111 = resources_sheet.getCell(12,13)
                                        cell_topicname1111.value = '–≠—Ç–æ—Ç –º–µ—Å—è—Ü'
                                        let cell_topicname2222 = resources_sheet.getCell(12,14)
                                        cell_topicname2222.value = '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü'

                                        let counttosave = 0
                                        
                                        let abonements_1 = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/current_data/income/abonements/')
                                        abonements_1.get().then(async ab_res_now => {
                                            let programs = Object.keys(ab_res_now.val())
                                            let mainsheet = doc.sheetsByIndex[0]
                                            await mainsheet.loadCells('A1:Z1000').then(async function() {
                                                let abonements_income_cell =  mainsheet.getCellByA1('D21')
                                                abonements_income_cell.value = ab_res_now.val().abonements_income
                        
                                                let abonements_sold_cell = mainsheet.getCellByA1('D53')
                                                abonements_sold_cell.value = ab_res_now.val().abonements_sold
                                                let counter = 12
                                                tablelength[0] = programs.length
                                                for (let i = 0; i < programs.length; i++){
                                                    let abonements_2 = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/current_data/income/abonements/' + programs[i])
                                                    abonements_2.get().then(async ab_res_now_2 => {
                                                        if (ab_res_now_2.val().name !== undefined){
                                                            let cell_name = resources_sheet.getCellByA1('A' + (counter+2))
                                                            cell_name.value = ab_res_now_2.val().name
                        
                                                            let cell_val = resources_sheet.getCellByA1('B' + (counter+2))
                                                            cell_val.value = ab_res_now_2.val().income
                                                            cell_val.valueType = 'CURRENCY'

                                                            let cell_sold_name = resources_sheet.getCellByA1('E' + (counter+2))
                                                            cell_sold_name.value = ab_res_now_2.val().name
                        
                                                            let cell_sold = resources_sheet.getCellByA1('F' + (counter+2))
                                                            cell_sold.value = ab_res_now_2.val().sold
                                                            counter++
                                                            
                                                        }

                                                        if (i === programs.length - 1){
                                                            await mainsheet.saveUpdatedCells()
                                                            await resources_sheet.saveUpdatedCells()
                                                            .then(()=>{
                                                                counttosave++
                                                                if (counttosave === 4){
                                                                    fb.database().ref().update(updates)
                                                                    console.log('SAVED!')
                                                                }
                                                            })
                                                            
                                                            
                                                        }
                                                    })
                                                }
                                            })
                    
                                            
                                        }).catch(err => {
                                            console.log('1 ' + err)
                                        })
                    
                                        let abonements_22 = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/reports/17_07_21/data/income/abonements/')
                                        abonements_22.get().then(async ab_res_now => {
                                            let programs = Object.keys(ab_res_now.val())
                                            let mainsheet = doc.sheetsByIndex[0]
                    
                                            await mainsheet.loadCells('A1:Z1000').then(async function() {
                                                let abonements_income_cell =  mainsheet.getCellByA1('I21')
                                                abonements_income_cell.value = ab_res_now.val().abonements_income
                        
                                                let abonements_sold_cell = mainsheet.getCellByA1('I53')
                                                abonements_sold_cell.value = ab_res_now.val().abonements_sold
                        
                                                let counter = 12
                                                for (let i = 0; i < programs.length; i++){
                                                    let abonements_2 = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/reports/17_07_21/data/income/abonements/' + programs[i])
                                                    abonements_2.get().then(async ab_res_now_2 => {
                                                        if (ab_res_now_2.val().name !== undefined){
                        
                                                            let cell_val = resources_sheet.getCellByA1('C' + (counter+2))
                                                            cell_val.value = ab_res_now_2.val().income
                        
                                                            let cell_sold = resources_sheet.getCellByA1('G' + (counter+2))
                                                            cell_sold.value = ab_res_now_2.val().sold
                                                            counter++
                        
                                                            
                                                        }

                                                        if (i === programs.length - 1){
                                                            await mainsheet.saveUpdatedCells()
                                                            await resources_sheet.saveUpdatedCells()
                                                            .then(()=>{
                                                                counttosave++
                                                                if (counttosave === 4){
                                                                    fb.database().ref().update(updates)
                                                                    console.log('SAVED!')
                                                                }
                                                            })
                                                        }
                                                    })
                                                }
                                            })
                    
                                            
                                        }).catch(err => {
                                            console.log('1 ' + err)
                                        })
                    
                                        let items_1 = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/current_data/income/items/')
                                        items_1.get().then(async ab_res_now => {
                                            let programs = Object.keys(ab_res_now.val())
                                            let mainsheet = doc.sheetsByIndex[0]
                                            await mainsheet.loadCells('A1:Z1000').then(async function() {
                                                let items_income_cell =  mainsheet.getCellByA1('D22')
                                                items_income_cell.value = ab_res_now.val().items_income
                                                tablelength[1] = programs.length
                                                let items_sold_cell = mainsheet.getCellByA1('D54')
                                                items_sold_cell.value = ab_res_now.val().items_sold
                                                let counter = 12
                                                for (let i = 0; i < programs.length; i++){
                                                    let items_2 = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/current_data/income/items/' + programs[i])
                                                    items_2.get().then(async it_res_now_2 => {
                                                        if (it_res_now_2.val().name !== undefined){
                                                            let cell_name = resources_sheet.getCellByA1('I' + (counter+2))
                                                            cell_name.value = it_res_now_2.val().name
                        
                                                            let cell_val = resources_sheet.getCellByA1('J' + (counter+2))
                                                            cell_val.value = it_res_now_2.val().income
                        
                                                            let cell_sold_name = resources_sheet.getCellByA1('M' + (counter+2))
                                                            cell_sold_name.value = it_res_now_2.val().name
                        
                                                            let cell_sold = resources_sheet.getCellByA1('N' + (counter+2))
                                                            cell_sold.value = it_res_now_2.val().sold
                                                            counter++
                        
                                                            
                                                        }

                                                        if (i === programs.length - 1){
                                                            await mainsheet.saveUpdatedCells()
                                                            await resources_sheet.saveUpdatedCells()
                                                            .then(()=>{
                                                                counttosave++
                                                                if (counttosave === 4){
                                                                    fb.database().ref().update(updates)
                                                                    console.log('SAVED!')
                                                                }
                                                            })
                                                        }
                                                    })
                                                }
                                            })
                                            
                                        }).catch(err => {
                                            console.log('1 ' + err)
                                        })
                    
                                        let items_22 = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/reports/17_07_21/data/income/items/')
                                        items_22.get().then(async ab_res_now => {
                                            let programs = Object.keys(ab_res_now.val())
                                            let mainsheet = doc.sheetsByIndex[0]
                                            await mainsheet.loadCells('A1:Z1000').then(async function() {
                                                let items_income_cell =  mainsheet.getCellByA1('I22')
                                                items_income_cell.value = ab_res_now.val().items_income
                        
                                                let items_sold_cell = mainsheet.getCellByA1('I54')
                                                items_sold_cell.value = ab_res_now.val().items_sold
                        
                                                let counter = 12
                                                for (let i = 0; i < programs.length; i++){
                                                    let items_2 = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/reports/17_07_21/data/income/items/' + programs[i])
                                                    items_2.get().then(async item_res_now_2 => {
                                                        if (item_res_now_2.val().name !== undefined){
                        
                                                            let cell_val = resources_sheet.getCellByA1('K' + (counter+2))
                                                            cell_val.value = item_res_now_2.val().income
                        
                                                            let cell_sold = resources_sheet.getCellByA1('O' + (counter+2))
                                                            cell_sold.value = item_res_now_2.val().sold
                                                            counter++
                        
                                                            
                                                        }

                                                        if (i === programs.length - 1){
                                                            await mainsheet.saveUpdatedCells()
                                                            await resources_sheet.saveUpdatedCells()
                                                            .then(()=>{
                                                                counttosave++
                                                                if (counttosave === 4){
                                                                    fb.database().ref().update(updates)
                                                                    console.log('SAVED!')
                                                                }
                                                            })
                                                        }
                                                    })
                                                }
                                            })
                                            
                                        }).catch(err => {
                                            console.log('1 ' + err)
                                        })
                    
                                        let statss = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/current_data/audience/stats/')
                                        statss.get().then(async ans => {
                    
                                            let all =  resources_sheet.getCellByA1('A1')
                                            all.value = '–í—Å–µ–≥–æ'
                    
                                            let active =  resources_sheet.getCellByA1('B1')
                                            active.value = '–ê–∫—Ç–∏–≤–Ω—ã–µ'
                    
                                            let freezed =  resources_sheet.getCellByA1('C1')
                                            freezed.value = '–í –∑–∞–º–æ—Ä–æ–∑–∫–µ'
                    
                                            let inactive =  resources_sheet.getCellByA1('D1')
                                            inactive.value = '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ'
                    
                                            let all_1 =  resources_sheet.getCellByA1('A2')
                                            all_1.value = ans.val().net_users
                    
                                            let active_1 =  resources_sheet.getCellByA1('B2')
                                            active_1.value = ans.val().active
                    
                                            let freezed_1 =  resources_sheet.getCellByA1('C2')
                                            freezed_1.value = ans.val().freeze
                    
                                            let inactive_1 =  resources_sheet.getCellByA1('D2')
                                            inactive_1.value = ans.val().inactive
                    
                                            await resources_sheet.saveUpdatedCells()
                                        }).catch(err => {
                                            console.log('1 ' + err)
                                        })
                    
                                        let conversions = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/current_data/audience/conversions/')
                                        conversions.get().then(async ans => {
                                            let all =  resources_sheet.getCellByA1('A4')
                                            all.value = '–í—Å–µ–≥–æ'
                    
                                            let active =  resources_sheet.getCellByA1('B4')
                                            active.value = '–ö–æ–Ω–≤–µ—Ä—Å–∏–∏'

                                            let activee =  resources_sheet.getCellByA1('A5')
                                            activee.value = ans.val().onetime

                                            let activeee =  resources_sheet.getCellByA1('B5')
                                            activeee.value = ans.val().converted
                    
                                            await resources_sheet.saveUpdatedCells().catch(err => {
                                                console.log('2 ' + err)
                                            })
                                        }).catch(err => {
                                            console.log('1 ' + err)
                                        })
                    
                                        let feedback = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/current_data/audience/conversions/feedback')
                                        feedback.get().then(async ans => {
                    
                                            let all =  resources_sheet.getCellByA1('A7')
                                            all.value = 'ü§©'
                    
                                            let active =  resources_sheet.getCellByA1('B7')
                                            active.value = 'üòê'
                    
                                            let freezed =  resources_sheet.getCellByA1('C7')
                                            freezed.value = 'üò°'
                    
                                            let all_1 =  resources_sheet.getCellByA1('A8')
                                            all_1.value = ans.val().bad
                    
                                            let active_1 =  resources_sheet.getCellByA1('B8')
                                            active_1.value = ans.val().good
                    
                                            let freezed_1 =  resources_sheet.getCellByA1('C8')
                                            freezed_1.value = ans.val().middle
                    
                                            await resources_sheet.saveUpdatedCells()
                                        }).catch(err => {
                                            console.log('1 ' + err)
                                        })
                    
                                        let net_value = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/analytics/alltime_data/')
                                        net_value.get().then(async ans => {
                                            let mainsheet = doc.sheetsByIndex[0]
                    
                                            await mainsheet.loadCells('A1:Z1000').then(async function() {
                                                let all =  mainsheet.getCellByA1('G14')
                                                all.value = ans.val().net_sold
                        
                                                let active =  mainsheet.getCellByA1('H14')
                                                active.value = ans.val().net_income
                        
                                                let freezed =  mainsheet.getCellByA1('I14')
                                                freezed.value = ans.val().net_conversions + ' —á–µ–ª–æ–≤–µ–∫(-–∞)'
                        
                                                await mainsheet.saveUpdatedCells().catch(err => {
                                                    console.log('3 ' + err)
                                                })
                                            }).catch(err => {
                                                console.log('2 ' + err)
                                            })
                    
                                            
                                        }).catch(err => {
                                            console.log('1 ' + err)
                                        })

                                        let tablesize = [800, 220]
                                        let chart_request = {
                                            'spreadsheetId': doc.spreadsheetId,
                                            'resource': {
                                                "requests": [
                                                    {
                                                    "addChart": {
                                                        "chart": {
                                                          "spec": {
                                                            "title": "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã",
                                                            "titleTextPosition": {
                                                                "horizontalAlignment": 'LEFT'
                                                            },
                                                            "basicChart": {
                                                              "chartType": "COLUMN",
                                                              "legendPosition": "TOP_LEGEND",
                                                              "domains": [ //–ù–ê–ó–í–ê–ù–ò–Ø
                                                                {
                                                                  "domain": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12, //13?
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 0,
                                                                          "endColumnIndex": 1
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "series": [ //–ó–ù–ê–ß–ï–ù–ò–Ø
                                                                {
                                                                  "series": { //–ü–ï–†–í–û–ï –ó–ù–ê–ß–ï–ù–ò–ï, –ü–ï–†–í–´–ô –¶–í–ï–¢ –ö–í–ê–î–†–ê–¢–ò–ö–ê
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12,
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 1,
                                                                          "endColumnIndex": 2
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  /* "colorStyle": {
                                                                    "themeColor": "ACCENT1"
                                                                  } */
                                                                  'color': {
                                                                    'red': 0.42,
                                                                        'green':0.66,
                                                                        'blue':0.31,
                                                                        'alpha': 1
                                                                }
                                                                },
                                                                {
                                                                  "series": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12,
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 2,
                                                                          "endColumnIndex": 3
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  'color': {
                                                                    'red': 0.42,
                                                                        'green':0.66,
                                                                        'blue':0.31,
                                                                        'alpha': 1
                                                                }
                                                                },
                                                              ],
                                                              "headerCount": 1
                                                            }
                                                          },
                                                          "position": {
                                                            "overlayPosition": {
                                                                "anchorCell": {
                                                                    "sheetId": sheet.sheetId,
                                                                    "rowIndex": 24,
                                                                    "columnIndex": 1
                                                                },
                                                                "widthPixels": tablesize[0],
                                                                "heightPixels": tablesize[1]
                                                            }
                                                          }
                                                        }
                                                      },
                                                    }
                                                  ]
                                            },
                                            'auth': auth
                                        }
    
                                        let chart_request_2 = {
                                            'spreadsheetId': doc.spreadsheetId,
                                            'resource': {
                                                "requests": [
                                                    {
                                                      "addChart": {
                                                        "chart": {
                                                          "spec": {
                                                            "title": "–¢–æ–≤–∞—Ä—ã",
                                                            "titleTextPosition": {
                                                                "horizontalAlignment": 'LEFT'
                                                            },
                                                            "basicChart": {
                                                              "chartType": "COLUMN",
                                                              "legendPosition": "TOP_LEGEND",
                                                              "domains": [ //–ù–ê–ó–í–ê–ù–ò–Ø
                                                                {
                                                                  "domain": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12, //13?
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 8,
                                                                          "endColumnIndex": 9
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "series": [ //–ó–ù–ê–ß–ï–ù–ò–Ø
                                                                {
                                                                  "series": { //–ü–ï–†–í–û–ï –ó–ù–ê–ß–ï–ù–ò–ï, –ü–ï–†–í–´–ô –¶–í–ï–¢ –ö–í–ê–î–†–ê–¢–ò–ö–ê
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12,
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 9,
                                                                          "endColumnIndex": 10
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  'color': {
                                                                    'red': 0.42,
                                                                        'green':0.66,
                                                                        'blue':0.31,
                                                                        'alpha': 1
                                                                }
                                                                },
                                                                {
                                                                  "series": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12,
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 10,
                                                                          "endColumnIndex": 11
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  'color': {
                                                                    'red': 0.42,
                                                                        'green':0.66,
                                                                        'blue':0.31,
                                                                        'alpha': 1
                                                                }
                                                                },
                                                              ],
                                                              "headerCount": 1
                                                            }
                                                          },
                                                          "position": {
                                                            "overlayPosition": {
                                                                "anchorCell": {
                                                                    "sheetId": sheet.sheetId,
                                                                    "rowIndex": 35,
                                                                    "columnIndex": 1
                                                                },
                                                                "widthPixels": tablesize[0],
                                                                "heightPixels": tablesize[1]
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                            },
                                            'auth': auth
                                        }
    
                                        let chart_request_3 = {
                                            'spreadsheetId': doc.spreadsheetId,
                                            'resource': {
                                                "requests": [
                                                    {
                                                      "addChart": {
                                                        "chart": {
                                                          "spec": {
                                                            "title": "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã",
                                                            "titleTextPosition": {
                                                                "horizontalAlignment": 'LEFT'
                                                            },
                                                            "basicChart": {
                                                              "chartType": "COLUMN",
                                                              "legendPosition": "TOP_LEGEND",
                                                              "domains": [ //–ù–ê–ó–í–ê–ù–ò–Ø
                                                                {
                                                                  "domain": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12, //13?
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 4,
                                                                          "endColumnIndex": 5
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "series": [ //–ó–ù–ê–ß–ï–ù–ò–Ø
                                                                {
                                                                  "series": { //–ü–ï–†–í–û–ï –ó–ù–ê–ß–ï–ù–ò–ï, –ü–ï–†–í–´–ô –¶–í–ï–¢ –ö–í–ê–î–†–ê–¢–ò–ö–ê
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12,
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 5,
                                                                          "endColumnIndex": 6
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  "colorStyle": {
                                                                    "themeColor": "ACCENT2"
                                                                  }
                                                                },
                                                                {
                                                                  "series": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12,
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 6,
                                                                          "endColumnIndex": 7
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  "colorStyle": {
                                                                    "themeColor": "ACCENT6"
                                                                  }
                                                                },
                                                              ],
                                                              "headerCount": 1
                                                            }
                                                          },
                                                          "position": {
                                                            "overlayPosition": {
                                                                "anchorCell": {
                                                                    "sheetId": sheet.sheetId,
                                                                    "rowIndex": 56,
                                                                    "columnIndex": 1
                                                                },
                                                                "widthPixels": tablesize[0],
                                                                "heightPixels": tablesize[1]
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                            },
                                            'auth': auth
                                        }
    
                                        let chart_request_4 = {
                                            'spreadsheetId': doc.spreadsheetId,
                                            'resource': {
                                                "requests": [
                                                    {
                                                      "addChart": {
                                                        "chart": {
                                                          "spec": {
                                                            "title": "–¢–æ–≤–∞—Ä—ã",
                                                            "titleTextPosition": {
                                                                "horizontalAlignment": 'LEFT'
                                                            },
                                                            "basicChart": {
                                                              "chartType": "COLUMN",
                                                              "legendPosition": "TOP_LEGEND",
                                                              "domains": [ //–ù–ê–ó–í–ê–ù–ò–Ø
                                                                {
                                                                  "domain": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12, //13?
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 12,
                                                                          "endColumnIndex": 13
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "series": [ //–ó–ù–ê–ß–ï–ù–ò–Ø
                                                                {
                                                                  "series": { //–ü–ï–†–í–û–ï –ó–ù–ê–ß–ï–ù–ò–ï, –ü–ï–†–í–´–ô –¶–í–ï–¢ –ö–í–ê–î–†–ê–¢–ò–ö–ê
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12,
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 13,
                                                                          "endColumnIndex": 14
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  "colorStyle": {
                                                                    "themeColor": "ACCENT2"
                                                                  }
                                                                  
                                                                },
                                                                {
                                                                  "series": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 12,
                                                                          "endRowIndex": tablelength[0] + 1,
                                                                          "startColumnIndex": 14,
                                                                          "endColumnIndex": 15
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  "colorStyle": {
                                                                    "themeColor": "ACCENT6"
                                                                  }
                                                                },
                                                              ],
                                                              "headerCount": 1
                                                            }
                                                          },
                                                          "position": {
                                                            "overlayPosition": {
                                                                "anchorCell": {
                                                                    "sheetId": sheet.sheetId,
                                                                    "rowIndex": 68,
                                                                    "columnIndex": 1
                                                                },
                                                                "offsetYPixels": -20,
                                                                "widthPixels": tablesize[0],
                                                                "heightPixels": tablesize[1]
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                            },
                                            'auth': auth
                                        }
    
                                        let chart_request_5 = {
                                            'spreadsheetId': doc.spreadsheetId,
                                            'resource': {
                                                "requests": [
                                                    {
                                                      "addChart": {
                                                        "chart": {
                                                          "spec": {
                                                            /* "title": "–¢–æ–≤–∞—Ä—ã",
                                                            "titleTextPosition": {
                                                                "horizontalAlignment": 'LEFT'
                                                            }, */
                                                            "basicChart": {
                                                              "chartType": "COLUMN",
                                                              "legendPosition": "TOP_LEGEND",
                                                              /* "domains": [ //–ù–ê–ó–í–ê–ù–ò–Ø
                                                                {
                                                                  "domain": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 3, //13?
                                                                          "endRowIndex": 4,
                                                                          "startColumnIndex": 0,
                                                                          "endColumnIndex": 2
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              ], */
                                                              "series": [ //–ó–ù–ê–ß–ï–ù–ò–Ø
                                                                {
                                                                  "series": { //–ü–ï–†–í–û–ï –ó–ù–ê–ß–ï–ù–ò–ï, –ü–ï–†–í–´–ô –¶–í–ï–¢ –ö–í–ê–î–†–ê–¢–ò–ö–ê
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 3,
                                                                          "endRowIndex": 5,
                                                                          "startColumnIndex": 0,
                                                                          "endColumnIndex": 1
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  "colorStyle": {
                                                                    "themeColor": "ACCENT6"
                                                                  }
                                                                },
                                                                {
                                                                  "series": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 3,
                                                                          "endRowIndex": 5,
                                                                          "startColumnIndex": 1,
                                                                          "endColumnIndex": 2
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "LEFT_AXIS",
                                                                  "colorStyle": {
                                                                    "themeColor": "ACCENT2"
                                                                  }
                                                                },
                                                              ],
                                                              "headerCount": 1,
                                                              //"stackedType": 'PERCENT_STACKED',
                                                              /* "totalDataLabel": {
                                                                "type": 'DATA',
                                                                "textFormat": {
                                                                    'bold' : true
                                                                },
                                                                //"placement" : 'INSIDE_END',
                                                              } */
                                                            }
                                                          },
                                                          "position": {
                                                            "overlayPosition": {
                                                                "anchorCell": {
                                                                    "sheetId": sheet.sheetId,
                                                                    "rowIndex": 97,
                                                                    "columnIndex": 1
                                                                },
                                                                "offsetYPixels": -30,
                                                                "widthPixels": 200,
                                                                "heightPixels": 250
                                                            }
                                                          },
                                                          
                                                        }
                                                      }
                                                    }
                                                  ]
                                            },
                                            'auth': auth
                                        }
    
                                        let chart_request_6 = {
                                            'spreadsheetId': doc.spreadsheetId,
                                            'resource': {
                                                "requests": [
                                                    {
                                                      "addChart": {
                                                        "chart": {
                                                          "spec": {
                                                            "title": "–û—Ç–∑—ã–≤—ã –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                                                            "titleTextPosition": {
                                                                "horizontalAlignment": 'LEFT'
                                                            },
                                                            "basicChart": {
                                                              "chartType": "BAR",
                                                              "legendPosition": "LEFT_LEGEND",
                                                              /* "domains": [ //–ù–ê–ó–í–ê–ù–ò–Ø
                                                                {
                                                                  "domain": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 3, //13?
                                                                          "endRowIndex": 4,
                                                                          "startColumnIndex": 0,
                                                                          "endColumnIndex": 2
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              ], */
                                                              "series": [ //–ó–ù–ê–ß–ï–ù–ò–Ø
                                                                {
                                                                  "series": { //–ü–ï–†–í–û–ï –ó–ù–ê–ß–ï–ù–ò–ï, –ü–ï–†–í–´–ô –¶–í–ï–¢ –ö–í–ê–î–†–ê–¢–ò–ö–ê
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 6,
                                                                          "endRowIndex": 8,
                                                                          "startColumnIndex": 0,
                                                                          "endColumnIndex": 1
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "BOTTOM_AXIS",
                                                                  "colorStyle": {
                                                                    "themeColor": "ACCENT1"
                                                                  }
                                                                },
                                                                {
                                                                  "series": {
                                                                    "sourceRange": {
                                                                      "sources": [
                                                                        {
                                                                          "sheetId": resources_sheet.sheetId,
                                                                          "startRowIndex": 6,
                                                                          "endRowIndex": 8,
                                                                          "startColumnIndex": 1,
                                                                          "endColumnIndex": 2
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  "targetAxis": "BOTTOM_AXIS",
                                                                  "colorStyle": {
                                                                    "themeColor": "ACCENT5"
                                                                  }
                                                                },
                                                                {
                                                                    "series": {
                                                                      "sourceRange": {
                                                                        "sources": [
                                                                          {
                                                                            "sheetId": resources_sheet.sheetId,
                                                                            "startRowIndex": 6,
                                                                            "endRowIndex": 8,
                                                                            "startColumnIndex": 2,
                                                                            "endColumnIndex": 3
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "targetAxis": "BOTTOM_AXIS",
                                                                    "colorStyle": {
                                                                        "themeColor": "ACCENT3"
                                                                      }
                                                                  },
                                                              ],
                                                              "headerCount": 1,
                                                              /* "totalDataLabel": {
                                                                "type": 'DATA',
                                                                "textFormat": {
                                                                    'bold' : true
                                                                },
                                                                //"placement" : 'INSIDE_END',
                                                              } */
                                                            }
                                                          },
                                                          "position": {
                                                            "overlayPosition": {
                                                                "anchorCell": {
                                                                    "sheetId": sheet.sheetId,
                                                                    "rowIndex": 97,
                                                                    "columnIndex": 4
                                                                },
                                                                "offsetXPixels": -80,
                                                                "offsetYPixels": -30,
                                                                "widthPixels": 575,
                                                                "heightPixels": 250
                                                            }
                                                          },
                                                        }
                                                      }
                                                    }
                                                  ]
                                            },
                                            'auth': auth
                                        }
    
                                        let chart_request_pie1 = {
                                            'spreadsheetId': doc.spreadsheetId,
                                            'resource': {
                                                "requests": [
                                                    {
                                                      "addChart": {
                                                        "chart": {
                                                          "spec": {
                                                            "backgroundColorStyle": {
                                                                'rgbColor': {
                                                                    'red': 0.95,
                                                                    'green': 0.95,
                                                                    'blue': 0.95,
                                                                }
                                                            },
                                                            "pieChart": {
                                                              "domain": {
                                                                "sourceRange": {
                                                                  "sources": [
                                                                    {
                                                                      "sheetId": resources_sheet.sheetId,
                                                                      "startRowIndex": 0,
                                                                      "endRowIndex": 1,
                                                                      "startColumnIndex": 1,
                                                                      "endColumnIndex": 4
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              "series": {
                                                                "sourceRange": {
                                                                  "sources": [
                                                                    {
                                                                      "sheetId": resources_sheet.sheetId,
                                                                      "startRowIndex": 1,
                                                                      "endRowIndex": 2,
                                                                      "startColumnIndex": 1,
                                                                      "endColumnIndex": 4
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                            }
                                                          },
                                                          "position": {
                                                            "overlayPosition": {
                                                                "anchorCell": {
                                                                    "sheetId": sheet.sheetId,
                                                                    "rowIndex": 83,
                                                                    "columnIndex": 5
                                                                },
                                                                "offsetXPixels": 5,
                                                                "offsetYPixels": -20,
                                                                "widthPixels": 400,
                                                                "heightPixels": 220
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                            },
                                            'auth': auth
                                        }
                                        
                                        const responce = (await gsheets.spreadsheets.batchUpdate(chart_request)).data
                                        const responce2 = (await gsheets.spreadsheets.batchUpdate(chart_request_2)).data
                                        const responce3 = (await gsheets.spreadsheets.batchUpdate(chart_request_3)).data
                                        const responce4 = (await gsheets.spreadsheets.batchUpdate(chart_request_4)).data
                                        const responce5 = (await gsheets.spreadsheets.batchUpdate(chart_request_5)).data
                                        const responce6 = (await gsheets.spreadsheets.batchUpdate(chart_request_6)).data
                                        await gsheets.spreadsheets.batchUpdate(chart_request_pie1).then(() => {
                                            Astana_date_accept
                                            updates['Fitness/'+club_name_fb[chatId]+'/analytics/last_report_date'] = Astana_date_accept.getTime()
                                            
                                            var newdata = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/analytics/current_data')
                                            newdata.get().then((sn_1) => {
                                                let newreport = sn_1.val()
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/reports/'+ Astana_date_accept.getTime() + '/data'] = newreport
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/reports/'+ Astana_date_accept.getTime() + '/link'] = 'https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId
                                                console.log('https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId)
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/reports/'+ Astana_date_accept.getTime() + '/name'] = '–û—Ç—á–µ—Ç ' + visible_date_accept
    
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/current_data/audience/conversions/converted'] = 0
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/current_data/audience/conversions/onetime'] = 0
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/current_data/audience/conversions/feedback/good'] = 0
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/current_data/audience/conversions/feedback/middle'] = 0
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/current_data/audience/conversions/feedback/bad'] = 0
                                            
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/current_data/income/net_income'] = 0
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/current_data/income/net_sold'] = 0
    
                                                let free_abonements = {
                                                    abonements_income: 0,
                                                    abonements_sold: 0
                                                }
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/current_data/income/abonements'] = free_abonements
    
                                                let free_items = {
                                                    items_income: 0,
                                                    items_sold: 0
                                                }
                                                updates['Fitness/'+club_name_fb[chatId]+'/analytics/current_data/income/items'] = free_items
                                                
    
                                                bot.editMessageText(`<b>–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b> 
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ—Ç—á–µ—Ç–æ–º. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∞–º –Ω—É–∂–Ω–æ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ</b>. –í—ã –º–æ–∂–µ—Ç–µ <b>—Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª</b>, –Ω–∞–∂–∞–≤ –§–∞–π–ª -> –°–∫–∞—á–∞—Ç—å -> Microsoft Excel, –ª–∏–±–æ <b>—Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é</b>, –Ω–∞–∂–∞–≤ –§–∞–π–ª -> –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é`, {
                                                    parse_mode: 'HTML',
                                                    chat_id: chatId,
                                                    message_id: messages_todelete[chatId][1],
                                                    reply_markup: {
                                                        inline_keyboard: [
                                                            [{
                                                                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                                                                callback_data: adminreports[1]
                                                            }],
                                                            [{
                                                                text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç',
                                                                url: 'https://docs.google.com/spreadsheets/d/' + doc.spreadsheetId
                                                            }]
                                                        ]
                                                    }
                                                })
    
                                            })
                                        })    

                                    })
                                                                        // console.log(JSON.stringify(responce, null, 2)) 
                                })
    
                               /*  let copiedsheet2 = copiedoc.sheetsByIndex[1]
                                await copiedsheet2.copyToSpreadsheet(fileId).then(async function() {
                                    console.log('COPIED2')
                                    
                                })*/
                                }) 
                        })
                    })

                })
            })
        })
        
    })
}

bot.on('polling_error', console.log);

bot.on('poll_answer', poll_answer => {
    answered_feedback[poll_answer.user.id] = poll_answer.option_ids
    console.log('^^ ' + isAnswered_feedback[poll_answer.user.id])
    if (isAnswered_feedback[poll_answer.user.id] === 0){
        console.log(answered_feedback[poll_answer.user.id])
        let updates_emo = {}
        let fb_info = fb.database().ref('Fitness/' + club_name_fb[poll_answer.user.id] + '/analytics/current_data/audience/conversions/feedback/') = 
        fb_info.get().then((snapshot) => {
            
            if (answered_feedback[poll_answer.user.id][0] === 0){
                bot.sendSticker(poll_answer.user.id, sticker_goodtraining).then(() => {
                    updates_emo['Fitness/' + club_name_fb[poll_answer.user.id] + '/analytics/current_data/audience/conversions/feedback/good'] = snapshot.val().good + 1
                    bot.sendMessage(poll_answer.user.id, goodfeedback_text + '–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç üôÇ', {
                        parse_mode: 'HTML',
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: suggestgoodskidka_text[poll_answer.user.id][0],
                                    callback_data: suggestgoodskidka_text[poll_answer.user.id][1]
                                }],
                                [{
                                    text: continuemyabonement_text[0],
                                    callback_data: continuemyabonement_text[1]
                                }]
                            ]
                        }
                    })
                })
            }
            if (answered_feedback[poll_answer.user.id][0] === 1){
                updates_emo['Fitness/' + club_name_fb[poll_answer.user.id] + '/analytics/current_data/audience/conversions/feedback/middle'] = snapshot.val().middle + 1
                bot.sendSticker(poll_answer.user.id, sticker_badtraining).then(() => {
                    bot.sendMessage(poll_answer.user.id, normfeedback_text + '–£–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å–ª–∏ –≤—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–µ –Ω–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç, —Ç–æ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ, —á—Ç–æ–±—ã –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞ –≤—Å–µ üíØ ', {
                        parse_mode: 'HTML',
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: suggestmiddleskidka_text[poll_answer.user.id][0],
                                    callback_data: suggestmiddleskidka_text[poll_answer.user.id][1]
                                }],
                                [{
                                    text: continuemyabonement_text[0],
                                    callback_data: continuemyabonement_text[1]
                                }]
                            ]
                        }
                    })
                })
            }        
            if (answered_feedback[poll_answer.user.id][0] === 2){
                bot.sendSticker(poll_answer.user.id, sticker_badtraining).then(() => {
                    updates_emo['Fitness/' + club_name_fb[poll_answer.user.id] + '/analytics/current_data/audience/conversions/feedback/bad'] = snapshot.val().bad + 1
                    programdiscount[poll_answer.user.id] = discountvalues[poll_answer.user.id][2]
                    bot.sendMessage(poll_answer.user.id, badfeedback_text + '–ê —á—Ç–æ, –µ—Å–ª–∏ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –í–∞–º <b>—Å–∫–∏–¥–∫—É –≤ ' + discountvalues[poll_answer.user.id][2] + '%.</b> –î–∞–π—Ç–µ –Ω–∞–º —à–∞–Ω—Å –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º—ã —Å—Ç–æ–∏–º —Ç–æ–≥–æ', {
                        parse_mode: 'HTML',
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: continuemyabonement_text[0],
                                    callback_data: continuemyabonement_text[1]
                                }]
                            ]
                        }
                    })
                })
            }
            fb.database().ref().update(updates_emo)
            isAnswered_feedback[poll_answer.user.id] = 1
        })

    }
})

bot.on('pre_checkout_query', pre_checkout_query => {
    bot.answerPreCheckoutQuery( pre_checkout_query.id, true, {
        error_message: '–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ'
    })

})

bot.on('location', (msg) => {

    if (userCity[msg.chat.id] !== '' && userPoint[msg.chat.id] === ''){
        
        userlocation[msg.chat.id][0] = msg.location.latitude
        userlocation[msg.chat.id][1] = msg.location.longitude
        let point1 = []
        point1[msg.chat.id] = new GeoPoint(userlocation[msg.chat.id][0], userlocation[msg.chat.id][1], false)    
        let locations_arr = []
        locations_arr[msg.chat.id] = []

        let points_data = fb.database().ref('Basement/cities/' + userCity[msg.chat.id] + '/points/')
        points_data.get().then((snapshot) => {
            let array_len = [] 
            array_len[msg.chat.id] = Object.keys(snapshot.val())
            for (let i = 0; i < array_len[msg.chat.id].length; i++){
                let info = fb.database().ref('Basement/cities/' + userCity[msg.chat.id] + '/points/' + array_len[msg.chat.id][i] + '/is_waiter')
                info.get().then((snapshot2) => {
                    if (snapshot2.val() === true){
                        let info1 = fb.database().ref('Basement/cities/' + userCity[msg.chat.id] + '/points/' + array_len[msg.chat.id][i] + '/other_info/')
                        info1.get().then((snapshot1) => {
                            let newelement = [array_len[msg.chat.id][i], snapshot1.val().adress_text, snapshot1.val().latitude, snapshot1.val().longitude]
                            locations_arr[msg.chat.id].push(newelement)
                        })
                    }

                    if (snapshot2.val() === false){
                        if (i === array_len[msg.chat.id].length){

                        }
                    }
                })
            }
        })
    }
    /* if (userCity[current_chat] === 0){
        for (let i = 0; i < NurSultan_adresses.length; i++) {
            let point2 = new GeoPoint(NurSultan_geo1[i], NurSultan_geo2[i], false)
            let distance = point1.distanceTo(point2, true)//output in kilometers
            //console.log('–¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –∞–¥—Ä–µ—Å–∞: ' + NurSultan_adresses[i] + ' = ' + distance)
            if (distance < min_distance[current_chat]){
                min_distance[current_chat] = distance
                nearest_place[current_chat] = i
            }
            if (i === NurSultan_adresses.length - 1) {
                userPoint[current_chat] = nearest_place[current_chat]
                bot.sendLocation(msg.chat.id, NurSultan_geo1[nearest_place[current_chat]], NurSultan_geo2[nearest_place[current_chat]]).then(() => {
                    bot.sendMessage(msg.chat.id, '–ë–ª–∏–∂–∞–π—à–∞—è –∫ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Ç–æ—á–∫–∞ Coffee BOOM –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ' + NurSultan_adresses[nearest_place[current_chat]], {
                        reply_markup:{
                            inline_keyboard:
                            [
                                [{
                                    text: youchosepoint_text,
                                    callback_data: youchosepoint_text
                                },
                                {
                                        text: anotherpoint_text,
                                        callback_data: anotherpoint_text
                                }]
                            ]
                        }
                    })
                })
            }
        }
    }
    else if (userCity[current_chat] === 1){
        for (let i = 0; i < Almaty_adresses.length; i++) {
            let point2 = new GeoPoint(Almaty_geo1[i], Almaty_geo2[i], false)
            let distance = point1.distanceTo(point2, true)//output in kilometers
            if (distance < min_distance[current_chat]){
                min_distance[current_chat] = distance
                nearest_place[current_chat] = i
            }
            if (i === Almaty_adresses.length - 1) {
                userPoint[current_chat] = nearest_place[current_chat]
                bot.sendLocation(msg.chat.id, Almaty_geo1[nearest_place[current_chat]], Almaty_geo2[nearest_place[current_chat]]).then(() => {
                    bot.sendMessage(msg.chat.id, '–ë–ª–∏–∂–∞–π—à–∞—è –∫ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Ç–æ—á–∫–∞ Coffee BOOM –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ' + Almaty_adresses[nearest_place[current_chat]], {
                        reply_markup:{
                            inline_keyboard:
                                [
                                    [{
                                        text: youchosepoint_text,
                                        callback_data: youchosepoint_text
                                    },
                                        {
                                            text: anotherpoint_text,
                                            callback_data: anotherpoint_text
                                        }]
                                ]
                        }
                    })
                })
            }
        }
    } */
   // console.log('chat id: ' + msg.chat.id + /*'. Message_id: ' + msg.message + */'. Message_id2: ' + msg.message_id)
   /* for (let i = 0; i < 4; i++){
        if (msg.message_id - i > 0){
            if (i!== 0){
                bot.deleteMessage(msg.chat.id, msg.message_id - i)
            }
        }
   } */
})

bot.on('message', (msg) =>
{
    const chatId = msg.chat.id

    console.log(msg)

    current_chat = chatId

    if (userstatus[chatId] === 'unknown' || userstatus[chatId] === undefined && msg.text.includes('/start') === false){
        if (msg.chat.type === 'group' || msg.chat.type === 'supergroup'){
            bot.getChat(chatId).then(result => {
                if (result.description !== undefined && result.description !== null){
                    console.log('group: ' + result.description)
                    let del_userdata = []
                    del_userdata[msg.from.id] = result.description.split('/')
                    if (del_userdata[msg.from.id].length === 3 && del_userdata[msg.from.id][2] === (chatId).toString()){
                        club_name_fb[msg.from.id] = del_userdata[msg.from.id][0]
                        IdentifyUser(msg.from.id, false)
                    }
                }
            })
        }
        else {
            if (club_name_fb[chatId] === undefined || club_name_fb[chatId] === null){
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                IdentifyUser(chatId, false)
                keyboards.GymsKeyboard(gym_keyboard[chatId], userGyms[chatId], fb, bot, chatId, mother_link, choosegym_text)
            }
        }
        console.log('dont know users status, lets check it')
    }

    if (msg.text === 'üîÉ –ù–∞ –≥–ª–∞–≤–Ω—É—é'){
        for (let i=0; i<100; i++){
            bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                //console.log(err)
            })
        }
        bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)]).then(() => {
            if (userstatus[chatId] !== 'registered'){
                IdentifyUser(chatId, false)
            }
            
            anotherpoint_multiple[chatId] = 2
            //keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], categories_count[chatId], fb, bot, chatId, msg, anotherpoint_text, choosecategory_text, hellomessage_text, location_text, phone_text)
        })
    }

    if (msg.text === coins_text){
        /* bot.editMessageText(msg.text, {
            chat_id: chatId,
            message_id: msg.message_id - 1
        }).then(() => {
            bot.deleteMessage(chatId, msg.message_id).then(() => {
                bot.sendMessage(chatId, '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chatId] + ' —Ç–µ–Ω–≥–µ. –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–ª—é–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.')
            })
        }) */

        bot.deleteMessage(chatId, msg.message_id).then(() => {
            bot.sendMessage(chatId, '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chatId] + ' —Ç–µ–Ω–≥–µ. –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–ª—é–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.')
        })
    }

    if (msg.text === anotherpoint_text){
        finalprice[chatId] = 0
        finaltime_deelay = 0
        finalbasket[chatId] = 0
        console.log('2414124')
        if (userProgram[chatId] !== null || userProgrammesList[chatId] !== []){
            bot.deleteMessage(chatId, msg.message_id)
            bot.sendMessage(chatId, youwanttochangepoint_text, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: anotherpoint_text,
                            callback_data: anotherpoint_text
                        },{
                            text: query_deletethismessage,
                            callback_data: query_deletethismessage
                        }]
                    ],
                },
                remove_keyboard: true
            })
        }
        else {

        }
    }

    if (msg.text === start_training_text){
        bot.deleteMessage(chatId, msg.message_id)
        .then(()=> {
            const temp_tex = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –í—ã <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å–≤–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.</b>'
            bot.sendMessage(chatId, temp_tex, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: accepttraining_text[0],
                            callback_data: accepttraining_text[1],
                        },{
                            text: refusetraining_text[0],
                            callback_data: refusetraining_text[1]
                        }]
                    ],
                }
            })
        })
    }

    if (msg.text === gotomain_text){
        for (let i=0; i<100; i++){
            bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                //console.log(err)
            })
        }
        bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)], {
            reply_markup:{
                keyboard:registered_keyboard[0],
                resize_keyboard: true
            }
        })
        .then(() => {
            anotherpoint_multiple[chatId] = 2
            bot.sendMessage(chatId, hellomessage_text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboards.main_menu_keyboard
                }
            })
        })
    }

    if (msg.text === myabonement_status){

        //bot.deleteMessage(chatId, msg.message_id-1)
        bot.deleteMessage(chatId, msg.message_id).then(() => {
            bot.sendMessage(chatId, '–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: ' + abonement_status[chatId])
        })
        
    }

    if (msg.text === paybasket_text){
        console.log('!!!' + (finalprice[chatId] - 1000))
        if (finalprice[chatId] - 1000 < delivery_min_price){
            bot.sendMessage(chatId, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ' + delivery_min_price + '. –ó–∞–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ üòá')
        }
        else {
            finaltime_deelay = 0
            bot.deleteMessage(chatId, msg.message_id - 1)
            bot.deleteMessage(chatId, msg.message_id).then(() => {
                let editmsg = `–í–∞—à –∑–∞–∫–∞–∑: `
                let finalsum = 0
                for (let i = 0; i < basket[chatId].length; i++){
                                finalsum += (basket[chatId][i][2] * basket[chatId][i][1])
                                if (i === basket[chatId].length - 1){
                                    editmsg += finalsum + '—Ç–≥. +' + delivery_price + '—Ç–≥. (–¥–æ—Å—Ç–∞–≤–∫–∞)'
                                    console.log(finalsum + ' ' + i)
                                    finalprice[chatId] = finalsum + delivery_price
                                    for (let i = 0; i < basket[chatId].length; i++){
                                        console.log('1–ë–ª—é–¥–æ: ' + basket[chatId][i][0] + '. –¶–µ–Ω–∞: ' + basket[chatId][i][2] + ' —Ö ' + basket[chatId][i][1] + ' = ' + (basket[chatId][i][1] * basket[chatId][i][2]))
                                        editmsg += `
` + (i+1) + `. ` + basket[chatId][i][0] + `. –¶–µ–Ω–∞: ` + basket[chatId][i][2] + `—Ç–≥. —Ö ` + basket[chatId][i][1] + ` = ` + (basket[chatId][i][1] * basket[chatId][i][2]) + `—Ç–≥.`
                                        if (i === basket[chatId].length - 1){
                                            finalbasket[chatId] = editmsg
                                            bot.sendMessage(chatId,  editmsg).then(() => {
                                                CheckUser(chatId, msg.chat.first_name, chatId, msg.message_id)
                                            })
                
                                        }
                                    }
                                }
                }
            })
        }
        
    }

    if (msg.text === location_text){
        bot.sendLocation(chatId, point_location[chatId][0], point_location[chatId][1]).then(() => {
            bot.sendMessage(chatId, 'üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ' + point_adress[chatId])
        })
        
    }
    if (msg.text === phone_text){
        bot.sendContact(chatId, help_phone[chatId], club_name_fb[chatId])
    }

    if (isChangingPrefs[chatId] !== 0 && isChangingPrefs[chatId] !== undefined){
        bot.deleteMessage(chatId, msg.message_id)
        if (isChangingPrefs[chatId] === 1){
            isChangingPrefs[chatId] = 0
            card_data[chatId][1] = msg.text
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/other_info/card'] = card_data[chatId][1]
            fb.database().ref().update(updates)
        }
        if (isChangingPrefs[chatId] === 2){
            isChangingPrefs[chatId] = 0
            card_data[chatId][2] = msg.text
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/other_info/fio'] = card_data[chatId][2]
            fb.database().ref().update(updates)
        }
        if (isChangingPrefs[chatId] === 3){
            isChangingPrefs[chatId] = 0
            card_data[chatId][0] = msg.text
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/other_info/kaspi_phone'] = card_data[chatId][0]
            fb.database().ref().update(updates)
        }
        bot.editMessageText('–£–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.', {
            parse_mode: 'HTML',
            chat_id: chatId,
            message_id: messages_todelete[chatId][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_cards[3][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_cards[0][0] + ': ' + card_data[chatId][1],
                        callback_data: keyboard_admin_cards[0][1]
                    }],
                    [{
                        text: keyboard_admin_cards[1][0] + ': ' + card_data[chatId][2],
                        callback_data: keyboard_admin_cards[1][1]
                    },
                    {
                        text: keyboard_admin_cards[2][0] + ': ' + card_data[chatId][0],
                        callback_data: keyboard_admin_cards[2][1]
                    }]
                ]
            }
        })
    }

    if (isChangingPhone[chatId] !== 0 && isChangingPhone[chatId] !== undefined){
        bot.deleteMessage(chatId, msg.message_id)
        if (isChangingPhone[chatId] === 1){
            isChangingPhone[chatId] = 0
            help_phone[chatId] = msg.text
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/other_info/contact_phone'] = help_phone[chatId][1]
            fb.database().ref().update(updates)
        }
        if (isChangingPhone[chatId] === 2){
            isChangingPhone[chatId] = 0
            support_username[chatId] = msg.text
            if (support_username[chatId].includes('@')){
                support_username[chatId] = support_username[chatId].replace('@', '')
            }
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/other_info/support_username'] = support_username[chatId]
            fb.database().ref().update(updates)
        }
        bot.editMessageText('–£–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –í–∞–º–∏', {
            parse_mode: 'HTML',
            chat_id: chatId,
            message_id: messages_todelete[chatId][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_phone[2][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_phone[0][0] + ': ' + help_phone[chatId],
                        callback_data: keyboard_admin_phone[0][1]
                    }],
                    [{
                        text: keyboard_admin_phone[1][0] + ': ' + support_username[chatId],
                        callback_data: keyboard_admin_phone[1][1]
                    }]
                ]
            }
        })
    }

    if (isChangingTime[chatId] !== 0 && isChangingTime[chatId] !== undefined){
        bot.deleteMessage(chatId, msg.message_id)
        let fnl_txt = '–£ –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä. –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å 8:00-17:00). –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è:'
        if (isChangingTime[chatId] === 1){
            isChangingTime[chatId] = 0
            if (msg.text.includes('-') && msg.text.includes(':')){
                morning_time[chatId] = msg.text
                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/other_info/morning_time'] = msg.text
                fb.database().ref().update(updates)
            }
            else {
                fnl_txt = '<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.</b> –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–µ –º–µ–Ω—è—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥—Ä–µ–∂–∫–∏'
            }
            
        }
        if (isChangingTime[chatId] === 2){
            isChangingTime[chatId] = 0
            if (msg.text.includes('-') && msg.text.includes(':')){
                evening_time[chatId] = msg.text
                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/other_info/evening_time'] = msg.text
                fb.database().ref().update(updates)
            }
            else {
                fnl_txt = '<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.</b> –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–µ –º–µ–Ω—è—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥—Ä–µ–∂–∫–∏'
            }
            
        }
        bot.editMessageText(fnl_txt, {
            parse_mode: 'HTML',
            chat_id: chatId,
            message_id: messages_todelete[chatId][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_phone[2][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_times[0][0] + ' ' + morning_time[chatId],
                        callback_data: keyboard_admin_times[0][1]
                    }],
                    [{
                        text: keyboard_admin_times[1][0] + ' ' + evening_time[chatId],
                        callback_data: keyboard_admin_times[1][1]
                    }]
                ]
            }
        })
    }

    if (isChangingLocation[chatId] !== 0 && isChangingLocation[chatId] !== undefined){
        bot.deleteMessage(chatId, msg.message_id)
        let fnl_txt = '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–ª—É–±–∞.'
        if (isChangingLocation[chatId] === 1){
            isChangingLocation[chatId] = 0
            point_adress[chatId] = msg.text
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/other_info/adress_text'] = msg.text
            fb.database().ref().update(updates)
            
        }
        if (isChangingLocation[chatId] === 2){
            if (msg.location !== undefined){
                isChangingLocation[chatId] = 0

                point_location[chatId][0] = msg.location.latitude
                point_location[chatId][1] = msg.location.longitude

                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/other_info/latitude'] = msg.location.latitude
                updates['Fitness/' + club_name_fb[chatId] + '/other_info/longitude'] = msg.location.longitude
                fb.database().ref().update(updates)
            }
            else {
                fnl_txt = '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã.'
            }

        }
        bot.editMessageText(fnl_txt, {
            parse_mode: 'HTML',
            chat_id: chatId,
            message_id: messages_todelete[chatId][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_phone[2][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_location[0][0] + point_adress[chatId],
                        callback_data: keyboard_admin_location[0][1]
                    }],
                    [{
                        text: keyboard_admin_location[1][0]  + point_location[chatId][0],
                        callback_data: keyboard_admin_location[1][1]
                    }]
                ]
            }
        })
    }

    if (isChangingCashback[chatId] !== 0 && isChangingCashback[chatId] !== undefined){
        bot.deleteMessage(chatId, msg.message_id)
        let fnl_txt = '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å <b>–°–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>. –ó–∞ –∫–∞–∂–¥—É—é –ø–æ—Å–µ—â–µ–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç <b>–∫—ç—à–±—ç–∫</b>, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥—É—Ç –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å <b>–≤ –í–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ</b>. –≠—Ç–æ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, –∞ —Ç–∞–∫–∂–µ <i>–º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.</i>'
        if (isChangingCashback[chatId] === 1){
            isChangingCashback[chatId] = 0
            cashback[chatId] = parseInt(msg.text) 
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/loyal_system/cashback'] = cashback[chatId]
            fb.database().ref().update(updates)
        }

        if (isChangingCashback[chatId] === 2){
            isChangingCashback[chatId] = 0
            min_price[chatId] = parseInt(msg.text) 
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/loyal_system/min_price'] = min_price[chatId]
            fb.database().ref().update(updates)
        }

        if (isChangingCashback[chatId] === 3){
            isChangingCashback[chatId] = 0
            min_cashback[chatId] = parseInt(msg.text) / 100
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/loyal_system/min_cashback'] = min_cashback[chatId]
            fb.database().ref().update(updates)
        }

        if (isChangingCashback[chatId] === 4){
            isChangingCashback[chatId] = 0
            max_cashback[chatId] = parseInt(msg.text) / 100
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/loyal_system/max_cashback'] = max_cashback[chatId]
            fb.database().ref().update(updates)
        }

        bot.editMessageText(fnl_txt, {
            parse_mode: 'HTML',
            chat_id: chatId,
            message_id: messages_todelete[chatId][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_phone[2][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_loyal[0][0] + cashback[chatId] + ' —Ç–≥.',
                        callback_data: keyboard_admin_loyal[0][1]
                    }],
                    [{
                        text: keyboard_admin_loyal[1][0] + min_price[chatId] + ' —Ç–≥.',
                        callback_data: keyboard_admin_loyal[1][1]
                    }],
                    [{
                        text: keyboard_admin_loyal[3][0] + (min_cashback[chatId]*100) + '%',
                        callback_data: keyboard_admin_loyal[3][1]
                    },
                    {
                        text: keyboard_admin_loyal[4][0] + (max_cashback[chatId]*100) + '%',
                        callback_data: keyboard_admin_loyal[4][1]
                    }]
                ]
            }
        })
    }

    if (isChangingVoron[chatId] !== 0 && isChangingVoron[chatId] !== undefined){
        bot.deleteMessage(chatId, msg.message_id)
        let fnl_txt = '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å <b>—Å–∏—Å—Ç–µ–º—É —Å–∫–∏–¥–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.</b> –ï—Å–ª–∏ –∫ –í–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–∫—É–ø–∞–µ—Ç –æ–¥–Ω—É –∏–∑ –ø—Ä–æ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º (–Ω–∞ 1 –¥–µ–Ω—å), —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –µ–≥–æ, –≤—Å–µ –ª–∏ –µ–º—É –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞, <b>–±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞</b>. –≠—Ç–æ —É–≤–µ–ª–∏—á–∏—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏–∑ –ø—Ä–æ–±–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã.'
        if (isChangingVoron[chatId] === 1){
            isChangingVoron[chatId] = 0
            discountvalues[chatId][0] = parseInt(msg.text) 
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/discounts/goodvalue'] = discountvalues[chatId][0]
            fb.database().ref().update(updates)
        }
        if (isChangingVoron[chatId] === 2){
            isChangingVoron[chatId] = 0
            discountvalues[chatId][1] = parseInt(msg.text) 
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/discounts/middlevalue'] = discountvalues[chatId][1]
            fb.database().ref().update(updates)
        }
        if (isChangingVoron[chatId] === 3){
            isChangingVoron[chatId] = 0
            discountvalues[chatId][2] = parseInt(msg.text) 
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/discounts/badvalue'] = discountvalues[chatId][2]
            fb.database().ref().update(updates)
        }
        if (isChangingVoron[chatId] === 4){
            isChangingVoron[chatId] = 0
            discountvalues[chatId][3] = parseInt(msg.text) 
            let updates = {}
            updates['Fitness/' + club_name_fb[chatId] + '/discounts/maxvalue'] = discountvalues[chatId][3]
            fb.database().ref().update(updates)
        }

        bot.editMessageText(fnl_txt, {
            parse_mode: 'HTML',
            chat_id: chatId,
            message_id: messages_todelete[chatId][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_phone[2][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_voron[0][0] + discountvalues[chatId][0] + '%',
                        callback_data: keyboard_admin_voron[0][1]
                    },
                    {
                        text: keyboard_admin_voron[1][0] + discountvalues[chatId][1] + '%',
                        callback_data: keyboard_admin_voron[1][1]
                    },
                    {
                        text: keyboard_admin_voron[3][0] + discountvalues[chatId][2] + '%',
                        callback_data: keyboard_admin_voron[3][1]
                    }],
                    [{
                        text: keyboard_admin_voron[4][0] + discountvalues[chatId][3] + ' —Ç–≥.',
                        callback_data: keyboard_admin_voron[4][1]
                    }]
                ]
            }
        })
    }

    if (isMailingMessage[chatId] !== 0 && isMailingMessage[chatId] !== undefined){
        bot.deleteMessage(chatId, msg.message_id)
        //—É—Ç—Ä–æ
        if (isMailingMessage[chatId] === 1){
            isMailingMessage[chatId] = 0
            mailing_text[chatId] = `üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>` + club_name_fb[chatId] + `:</b>
` + msg.text
            mailing_mode[chatId] = mailing_modes[4] + 'morning'
            let info = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/time/morning/')
            info.get().then((result) => {
                if (result.exists()){
                    let num = result.val().split(',')

                    bot.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º <b>–∫–ª–∏–µ–Ω—Ç–∞–º —É—Ç—Ä–µ–Ω–Ω–∏—Ö –≥—Ä—É–ø–ø</b>? –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç <b>' + num.length + ' —á–µ–ª–æ–≤–µ–∫ </b>.', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–û—Ç–º–µ–Ω–∏—Ç—å',
                                    callback_data: mailing_buttons[1][1]
                                }],
                                [{
                                    text: '–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                    callback_data: sendmessage_cb
                                }]
                            ]
                        }
                    })
                }

                else {
                    bot.editMessageText('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                                    callback_data: mailing_buttons[1][1]
                                }]
                            ]
                        }
                    })
                }
            })
        }
        //–≤–µ—á–µ—Ä
        if (isMailingMessage[chatId] === 2){
            isMailingMessage[chatId] = 0
            mailing_text[chatId] = `üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>` + club_name_fb[chatId] + `:</b>
` + msg.text
            mailing_mode[chatId] = mailing_modes[4] + 'evening'
            let info = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/time/evening/')
            info.get().then((result) => {
                if (result.exists()){
                    let num = result.val().split(',')

                    bot.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º <b>–∫–ª–∏–µ–Ω—Ç–∞–º –≤–µ—á–µ—Ä–Ω–∏—Ö –≥—Ä—É–ø–ø</b>? –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç <b>' + num.length + ' —á–µ–ª–æ–≤–µ–∫ </b>.', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–û—Ç–º–µ–Ω–∏—Ç—å',
                                    callback_data: mailing_buttons[1][1]
                                }],
                                [{
                                    text: '–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                    callback_data: sendmessage_cb
                                }]
                            ]
                        }
                    })
                }
                else {
                    bot.editMessageText('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                                    callback_data: mailing_buttons[1][1]
                                }]
                            ]
                        }
                    })
                }
                
            })
        }
        //–≤—Å–µ–º
        if (isMailingMessage[chatId] === 3){
            isMailingMessage[chatId] = 0
            mailing_text[chatId] =`üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>` + club_name_fb[chatId] + `:</b>
` + msg.text
            mailing_mode[chatId] = mailing_modes[0]
            let info = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/all/')
            info.get().then((result) => {
                if (result.exists()){
                    let num = result.val().split(',')

                    bot.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º <b>–∫–ª–∏–µ–Ω—Ç–∞–º</b>? –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç <b>' + num.length + ' —á–µ–ª–æ–≤–µ–∫ </b>.', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–û—Ç–º–µ–Ω–∏—Ç—å',
                                    callback_data: mailing_time[2][1]
                                }],
                                [{
                                    text: '–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                    callback_data: sendmessage_cb
                                }]
                            ]
                        }
                    })
                }
                else {
                    bot.editMessageText('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                                    callback_data: mailing_time[2][1]
                                }]
                            ]
                        }
                    })
                }
                
            })
        }
        //–ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        if (isMailingMessage[chatId] === 4){
            isMailingMessage[chatId] = 0
            mailing_text[chatId] = `üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>` + club_name_fb[chatId] + `:</b>
` + msg.text
            let info = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/period/' + mailing_mode[chatId])
            info.get().then((result) => {
                if (result.exists()){
                    let num = result.val().split(',')
                    mailing_mode[chatId] = 'period' + mailing_mode[chatId]
                    bot.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º <b>–∫–ª–∏–µ–Ω—Ç–∞–º</b>? –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç <b>' + num.length + ' —á–µ–ª–æ–≤–µ–∫ </b>.', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–û—Ç–º–µ–Ω–∏—Ç—å',
                                    callback_data: mailing_buttons[2][1]
                                }],
                                [{
                                    text: '–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                    callback_data: sendmessage_cb
                                }]
                            ]
                        }
                    })
                }
                else {
                    bot.editMessageText('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                                    callback_data: mailing_buttons[2][1]
                                }]
                            ]
                        }
                    })
                }
                
            })
        }
        //–ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        if (isMailingMessage[chatId] === 5){
            isMailingMessage[chatId] = 0
            mailing_text[chatId] = `üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>` + club_name_fb[chatId] + `:</b>
` + msg.text
            let inf = mailing_mode[chatId].split('_')
            let category = inf[1]
            let program = inf[2]
            let info = fb.database().ref('Fitness/' + club_name_fb[chatId] + '/mailing/categories/' + category + '/' + program + '/value')
            info.get().then((result) => {
                console.log(result.val())
                if (result.exists()){
                    let num = result.val().split(',')
                    bot.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º <b>–∫–ª–∏–µ–Ω—Ç–∞–º –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>? –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç <b>' + num.length + ' —á–µ–ª–æ–≤–µ–∫ </b>.', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–û—Ç–º–µ–Ω–∏—Ç—å',
                                    callback_data: mailing_time[2][1]
                                }],
                                [{
                                    text: '–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                    callback_data: sendmessage_cb
                                }]
                            ]
                        }
                    })
                }
                else {
                    bot.editMessageText('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', {
                        parse_mode: 'HTML',
                        chat_id: chatId,
                        message_id: messages_todelete[chatId][1],
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                                    callback_data: mailing_time[2][1]
                                }]
                            ]
                        }
                    })
                }
                
            })
        }
    }

    if (isMakingChanges[chatId] !== 0  && userstatus[chatId] !== undefined){
        if (isMakingChanges[chatId] === 1){
            isMakingChanges[chatId] = 0
            user_name[chatId] = msg.text
        }

        if (isMakingChanges[chatId] === 2){
            isMakingChanges[chatId] = 0
            user_phone[chatId] = msg.text
        }

        if (isMakingChanges[chatId] === 3){
            isMakingChanges[chatId] = 0
            user_adress[chatId] = msg.text
        }

        if (isMakingChanges[chatId] === 4){
            isMakingChanges[chatId] = 0
            user_email[chatId] = msg.text
            user_coins[chatId] = user_coins[chatId] + (added_coins[chatId] * percent_foremail)
            user_coins[chatId] = Math.round(user_coins[chatId])
            //—Ç—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –Ω–æ —É–∂–µ —Ä–µ–≥–∏—Å—Ç–µ—Ä–µ–¥

            let updates = {};
            updates['Basement/clients/' + msg.chatId + '/email'] = user_email[chatId]
            updates['Basement/clients/' + msg.chatId + '/coins'] = user_coins[chatId]
            fb.database().ref().update(updates).then(() => {
                //—Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                        console.log(err)
                    })
                }
                bot.sendMessage(chatId, '–£—Ä–∞! Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í–∞–º –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ ' + (added_coins[chatId] * percent_foremail) + ' —Ç–µ–Ω–≥–µ. –í–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chatId] + ' —Ç–µ–Ω–≥–µ').then(() => {
                    IdentifyUser(chatId, false)
                    anotherpoint_multiple[chatId] = 2
                    keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], fb, bot, chatId, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chatId], userPoint[chatId], user_mode[chatId])
                })
            })
        }

        if (isMakingChanges[chatId] === 5){
            isMakingChanges[chatId] = 0
            let orderinfo = fb.database().ref(order_name[chatId]);
            orderinfo.get().then((snapshot) => 
            {
                console.log('saving poll...')
                let updates = {}
                let bill_update = {
                    adress: snapshot.val().adress,
                    client_name: snapshot.val().client_name,
                    date_ordered: snapshot.val().date_ordered,
                    client_id: snapshot.val().client_id,
                    order_info: snapshot.val().order_info,
                    phone: snapshot.val().phone,
                    price: snapshot.val().price,
                    order_status: snapshot.val().order_status,
                    deliver_name: snapshot.val().deliver_name,
                    accept_date: snapshot.val().accept_date,
                    deliver_id: snapshot.val().deliver_id,
                    message_id: snapshot.val().message_id,
                    delivered_date: snapshot.val().delivered_date,
                    feedback: feedback_options[answered_feedback[chatId]],
                    feedback_message: msg.text,
                    bill_text: snapshot.val().bill_text,
                    user_personsamount: snapshot.val().user_personsamount,
                    user_payingmethod: snapshot.val().user_payingmethod,
                    user_deliverdate: snapshot.val().user_deliverdate,
                    user_sdachainfo: snapshot.val().user_sdachainfo,
                    user_howtocome: snapshot.val().user_howtocome
                }
                updates[order_name[chatId]] = bill_update
                updates['Basement/clients/' + chatId + '/coins'] = user_coins[chatId]
                fb.database().ref().update(updates).then(() => {
                    for (let i=0; i<100; i++){
                        bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                            console.log(err)
                        })
                    }
                    bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)]).then(() => {
                        IdentifyUser(chatId)
                        anotherpoint_multiple[chatId] = 2
                        keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], fb, bot, chatId, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chatId], userPoint[chatId], user_mode[chatId])
                    })

                    let temp_bill = snapshot.val().bill_text + `
<b>üí¨ –û—Ç–∑—ã–≤ –æ –¥–æ—Å—Ç–∞–≤–∫–µ:</b>                    
‚îú –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: ` + feedback_options[answered_feedback[chatId]] + `
‚îî –°–æ–æ–±—â–µ–Ω–∏–µ: ` + msg.text
                    bot.editMessageText(temp_bill, {
                        parse_mode: 'HTML',
                        chat_id: operators_chat[chatId],
                        message_id: snapshot.val().message_id
                    })
                }).catch(error => {
                    console.log(error)
                })
            }) 
        }

        if (/* user_adress[chatId] !== '' &&  */user_phone[chatId] !== '' && user_name[chatId] !== '' && isMakingChanges[chatId] !== 4 && isMakingChanges[chatId] !== 5){
            //order_status = order_statuses_text[0]
            console.log('LOL ' + msg.message_id + ', ' + (msg.message_id - 1))
            bot.deleteMessage(chatId, msg.message_id).then(() => {
                console.log('LOL2 ' + msg.message_id + ', ' + (msg.message_id - 1))
            })

            bot.editMessageText(almostthere2_text, {
                chat_id: chatId,
                message_id: add_info_msg[chatId],
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: backtoprogramme_text[0],
                            callback_data: backtoprogramme_text[1]
                        }],
                        [{
                            text: '–ò–º—è: ' + user_name[chatId],
                            callback_data: changename_text
                        },
                        {
                            text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                            callback_data: changephone_text
                        }],
                        [{
                            text: dataiscorrect_text,
                            callback_data: dataiscorrect_text
                        }]
                    ]
                }
            }
            ).catch(err => {
                console.log(err)
            })
            .then(res => {
                messages_todelete[chatId][2] = res.message_id
            })
            
        }
        if (user_phone[chatId] === '' || user_name[chatId] === '' && isMakingChanges[chatId] !== 4 && isMakingChanges[chatId] !== 5)
        {
            console.log('LOL3 ' + msg.message_id + ', ' + (msg.message_id - 1) + ', save_msgid: ' + add_info_msg[chatId])
            bot.deleteMessage(chatId, msg.message_id)
            
            bot.editMessageText(almostthere_text, {
                chat_id: chatId,
                message_id: add_info_msg[chatId],
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: backtoprogramme_text[0],
                            callback_data: backtoprogramme_text[1]
                        }],
                        [{
                            text: '–ò–º—è: ' + user_name[chatId],
                            callback_data: changename_text
                        },
                        {
                            text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                            callback_data: changephone_text
                        }]
                    ]
                }
            }
            ).catch(err => {
                console.log(err)
            })
            .then(res => {
                messages_todelete[chatId][2] = res.message_id
            })
            
            
        }
    }

    if (isMakingChanges_2[chatId] !== 0 && userstatus[chatId] !== undefined){
        if (isMakingChanges_2[chatId] === 1){
            isMakingChanges_2[chatId] = 0
            bot.deleteMessage(chatId, msg.message_id)
            if ((msg.text).includes('.') || (msg.text).includes('@') || (msg.text).includes(',')){
                bot.editMessageText('–ò–∑–≤–∏–Ω–∏, –Ω–æ –∫–∞–∫ –Ω–∞–º —É–∑–Ω–∞—Ç—å —Ç–µ–±—è, –µ—Å–ª–∏ —Ç—ã –Ω–µ –≤–≤–æ–¥–∏—à—å —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –§–ò–û? –¢–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç üòí', {
                    parse_mode: 'HTML',
                    chat_id: chatId,
                    message_id: messages_todelete[chatId][4],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backadduserdata_text[0],
                                callback_data: backadduserdata_text[1]
                            }],
                            [{
                                text: '–§–ò–û: ' + user_name[chatId],
                                callback_data: adduserinfo_text[0]
                            },
                            {
                                text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                                callback_data: adduserinfo_text[1]
                            }],
                            [{
                                text: 'Email: ' + user_email[chatId],
                                callback_data: adduserinfo_text[2]
                            }]
                        ]
                    }
                })
            }
            else {
                user_name[chatId] = msg.text
    
                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/clients/' + chatId + '/name'] = user_name[chatId] 
                updates['Motherbase/clients/' + chatId + '/name'] = user_name[chatId] 
                fb.database().ref().update(updates)
                
                bot.editMessageText(messages_texts[chatId][3], {
                    parse_mode: 'HTML',
                    chat_id: chatId,
                    message_id: messages_todelete[chatId][4],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backadduserdata_text[0],
                                callback_data: backadduserdata_text[1]
                            }],
                            [{
                                text: '–§–ò–û: ' + user_name[chatId],
                                callback_data: adduserinfo_text[0]
                            },
                            {
                                text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                                callback_data: adduserinfo_text[1]
                            }],
                            [{
                                text: 'Email: ' + user_email[chatId],
                                callback_data: adduserinfo_text[2]
                            }]
                        ]
                    }
                })
            }
            
        }
        if (isMakingChanges_2[chatId] === 2){
            console.log('making changes 1')
            bot.deleteMessage(chatId, msg.message_id)
            if (msg.contact !== undefined){
                console.log('making changes 2')
                isMakingChanges_2[chatId] = 0
                if (user_phone[chatId] === undefined || user_phone[chatId] === 'unknown' || user_phone[chatId] === ''){
                    guserdata[chatId] = []
                    console.log('making changes 3')
                    let sh_info = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/clients/' + chatId);
                    sh_info.get().then(async function(snap) {
                        console.log('making changes 4')
                        guserdata[chatId][0] = snap.val().userrow
                        guserdata[chatId][1] = (msg.contact.phone_number).toString()
                        GoogleChangePhone(chatId, guserdata[chatId])
                    })
                    
                }
                user_phone[chatId] = msg.contact.phone_number
    
                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/clients/' + chatId + '/phone'] = user_phone[chatId] 
                updates['Motherbase/clients/' + chatId + '/phone'] = user_phone[chatId] 
                fb.database().ref().update(updates)
                bot.deleteMessage(chatId, messages_todelete[chatId][4])
                .then(() => {
                    bot.sendMessage(chatId, messages_texts[chatId][3], {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backadduserdata_text[0],
                                    callback_data: backadduserdata_text[1]
                                }],
                                [{
                                    text: '–§–ò–û: ' + user_name[chatId],
                                    callback_data: adduserinfo_text[0]
                                },
                                {
                                    text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                                    callback_data: adduserinfo_text[1]
                                }],
                                [{
                                    text: 'Email: ' + user_email[chatId],
                                    callback_data: adduserinfo_text[2]
                                }]
                            ]
                        }
                    })
                    .then(res => {
                        messages_todelete[chatId][4] = res.message_id
                    })
                    
                })
                
            }
            
        }

        if (isMakingChanges_2[chatId] === 3){
            isMakingChanges_2[chatId] = 0
            bot.deleteMessage(chatId, msg.message_id)
            if ((msg.text).includes('@') === false){
                bot.editMessageText('–ò–∑–≤–∏–Ω–∏, –Ω–æ –∫–∞–∫ –Ω–∞–º —É–∑–Ω–∞—Ç—å —Ç–µ–±—è, –µ—Å–ª–∏ —Ç—ã –Ω–µ –≤–≤–æ–¥–∏—à—å —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? –¢–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç üòí', {
                    parse_mode: 'HTML',
                    chat_id: chatId,
                    message_id: messages_todelete[chatId][4],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backadduserdata_text[0],
                                callback_data: backadduserdata_text[1]
                            }],
                            [{
                                text: '–§–ò–û: ' + user_name[chatId],
                                callback_data: adduserinfo_text[0]
                            },
                            {
                                text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                                callback_data: adduserinfo_text[1]
                            }],
                            [{
                                text: 'Email: ' + user_email[chatId],
                                callback_data: adduserinfo_text[2]
                            }]
                        ]
                    }
                })
            }   
            else {
                user_email[chatId] = msg.text

                let updates = {}
                updates['Fitness/' + club_name_fb[chatId] + '/clients/' + chatId + '/email'] = user_email[chatId] 
                updates['Motherbase/clients/' + chatId + '/email'] = user_email[chatId] 
                fb.database().ref().update(updates)
                bot.editMessageText(messages_texts[chatId][3], {
                    parse_mode: 'HTML',
                    chat_id: chatId,
                    message_id: messages_todelete[chatId][4],
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: backadduserdata_text[0],
                                callback_data: backadduserdata_text[1]
                            }],
                            [{
                                text: '–§–ò–û: ' + user_name[chatId],
                                callback_data: adduserinfo_text[0]
                            },
                            {
                                text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                                callback_data: adduserinfo_text[1]
                            }],
                            [{
                                text: 'Email: ' + user_email[chatId],
                                callback_data: adduserinfo_text[2]
                            }]
                        ]
                    }
                })
            } 
            
        }
    }

    if (msg.text === backtoadduserinfo_text[0]){
        isMakingChanges_2[chatId] = 0
        bot.deleteMessage(chatId, messages_todelete[chatId][4])
        bot.sendMessage(chatId, messages_texts[chatId][3], {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: backadduserdata_text[0],
                        callback_data: backadduserdata_text[1]
                    }],
                    [{
                        text: '–§–ò–û: ' + user_name[chatId],
                        callback_data: adduserinfo_text[0]
                    },
                    {
                        text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                        callback_data: adduserinfo_text[1]
                    }],
                    [{
                        text: 'Email: ' + user_email[chatId],
                        callback_data: adduserinfo_text[2]
                    }]
                ]
            }
        })
        .then(res => {
            messages_todelete[chatId][4] = res.message_id
        })
    }

    if (msg.text === order_status_button){
        bot.deleteMessage(msg.chatId, msg.message_id).then(() => {
            console.log('Order name: "' + order_name[chatId] + '"')
            let userdata = fb.database().ref(order_name[chatId])
            userdata.get().then((result) => {
                abonement_status[chatId] = result.val().order_status
                console.log('order_status: ' + result.val().order_status)
                console.log('order link: Basement/bills/' + order_name[chatId])
                bot.sendMessage(msg.chatId, '–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: ' + abonement_status[chatId])
            }) 
        })
    }

    if (msg.text === 'erheoirhjeoihri'){
        bot.deleteMessage(chatId, msg.message_id - 1)
        bot.deleteMessage(chatId, msg.message_id).then(() => {

            user_coins[chatId] = user_coins[chatId] + (finalprice[chatId] * cashback)
            user_coins[chatId] = Math.round(user_coins[chatId])
            added_coins[chatId] = (finalprice[chatId] * cashback)
            added_coins[chatId] = Math.round(added_coins[chatId])
            console.log('coins = ' + user_coins[chatId] + '. –ë—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ' + added_coins[chatId] + '. Cashback: ' + cashback + '. Finalprice: ' + finalprice[chatId])

/*             order_status[chatId] = 'unknown'
            order_name[chatId] = ''
            finalbasket[chatId] = ''
            finalprice[chatId] = 0
            basket[chatId] = [] */

            let poll_text = '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–∫–∏: '
            bot.sendMessage(chatId, poll_text).then(() => {
                bot.sendPoll(chatId, '–ö–∞–∫ –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å?', feedback_options, {
                    is_anonymous: false
                })
            })

            /* if (user_email[chatId] === 'unknown'){
                
                let tmp_text = `–í–∞–º –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>` + added_coins[chatId] + `</b> —Ç–µ–Ω–≥–µ. –í–∞—à —Å—á–µ—Ç: ` + user_coins[chatId] + ` —Ç–µ–Ω–≥–µ. –ò–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã. 
                
–ö—Å—Ç–∞—Ç–∏, –µ—Å–ª–∏ –í—ã –ø—Ä–∏–≤—è–∂–µ—Ç–µ –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É —Å–≤–æ–π email, —Ç–æ –ø–æ–ª—É—á–∏—Ç–µ –µ—â–µ <b>` + (added_coins[chatId] * percent_foremail) + `</b> —Ç–µ–Ω–≥–µ. 

–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –º—ã –Ω–µ –±—É–¥–µ–º —Å–ª–∞—Ç—å –í–∞–º —Å–ø–∞–º üòè `
                bot.sendMessage(chatId, tmp_text, {
                    parse_mode: 'HTML',
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: add_email,
                                callback_data: add_email
                            }],
                            [{
                                text: dont_add_email,
                                callback_data: dont_add_email
                            }]
                        ]
                    }
                })
            }

            else if (user_email[chatId] !== 'unknown'){
                let updates = {};
                updates['Basement/clients/' + msg.chatId + '/coins'] = user_coins[chatId]
                fb.database().ref().update(updates).then(() => {
                    //—Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    for (let i=0; i<100; i++){
                        bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                            console.log(err)
                        })
                    }
                    bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chatId] + '. ' + emailalreadyadded_text).then(() => {
                        Reset(chatId)
                        anotherpoint_multiple[chatId] = 2
                        keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], categories_count[chatId], fb, bot, chatId, msg, anotherpoint_text, choosecategory_text, hellomessage_text, location_text, phone_text)
                    })
                })
            } */
        })
    }

    if (msg.text === dont_add_email){
        isMakingChanges[chatId] = 0
        //—Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏, –Ω–æ —Ç—ã —Ä–µ–≥–∏—Å—Ç–µ—Ä–µ–¥

        let updates = {};
        updates['Basement/clients/' + msg.chatId + '/coins'] = user_coins[chatId]
        fb.database().ref().update(updates).then(() => {
            //—Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            for (let i=0; i<100; i++){
                bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                    console.log(err)
                })
            }
            bot.sendMessage(chatId, didntaddemail_text).then(() => {
                IdentifyUser(chatId)
                anotherpoint_multiple[chatId] = 2
                keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], fb, bot, chatId, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chatId], userPoint[chatId], user_mode[chatId])
            })
        })

    }

})

bot.on('callback_query', query => {
    const { chat, message_id, text } = query.message
    current_chat = chat.id

    console.log(query.data)
    console.log(query)
    console.log(userstatus[query.from.id] + ', ' + isAdmin[query.from.id])
    if (userstatus[query.from.id] === 'unknown' || userstatus[query.from.id] === undefined /* && isAdmin[query.from.id] === false */){
        if (chat.type === 'group' || chat.type === 'supergroup'){
            bot.getChat(chat.id).then(result => {
                if (result.description !== undefined && result.description !== null){
                    console.log('group: ' + result.description)
                    let del_userdata = []
                    del_userdata[chat.id] = result.description.split('/')
                    if (del_userdata[chat.id].length === 3 && del_userdata[chat.id][2] === (chat.id).toString()){
                        club_name_fb[query.from.id] = del_userdata[chat.id][0]
                        IdentifyUser(query.from.id, false)
                    }
                }
            })
        }
        else {
            for (let i = 0; i < userGyms[chat.id].length; i++){
                if (query.data === userGyms[chat.id][i]){
                    //userstatus[chat.id] = 'unknown'
                    club_name_fb[chat.id] = userGyms[chat.id][i]
                    console.log('@#$@%')
                    
                    for (let i=0; i<100; i++){
                        bot.deleteMessage(chat.id, message_id - i).catch(err => {
                            //console.log(err)
                        })
                    }
                    bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                    .then(() => {
                        anotherpoint_multiple[chat.id] = 2
                        bot.sendMessage(chat.id, hellomessage_text, {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: keyboards.main_menu_keyboard
                            }
                        })
                        .then(() => {
                            IdentifyUser(chat.id, false)
                        })
                    })
                    
                }

                else {
                    if (club_name_fb[chat.id] === undefined || club_name_fb[chat.id] === null){
                        for (let i=0; i<100; i++){
                            bot.deleteMessage(chat.id, message_id - i + 1).catch(err => {
                                //console.log(err)
                            })
                        }
                        IdentifyUser(chat.id, false)
                        keyboards.GymsKeyboard(gym_keyboard[chat.id], userGyms[chat.id], fb, bot, chat.id, mother_link, choosegym_text)
                    }
                }
            }

            /* if (club_name_fb[chat.id] === undefined || club_name_fb[chat.id] === null){
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chat.id, message_id - i + 1).catch(err => {
                        //console.log(err)
                    })
                }
                IdentifyUser(chat.id, false)
                keyboards.GymsKeyboard(gym_keyboard[chat.id], userGyms[chat.id], fb, bot, chat.id, mother_link, choosegym_text)
            } */
        }
        console.log('dont know users status, lets check it')
        
    }

    if (chat.type === 'private'  /* && chat.id !== admin_id[chat.id] */){ 
    
        if (query.data === keyboards.main_menu_buttons[1][1]){
            //bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
            bot.editMessageText(text, {
                chat_id: chat.id,
                message_id: message_id
            }).catch(err => {console.log('here: ' + err)})
            keyboards.ProgramCategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], fb, bot, chat.id, backtomain_text, choosecategory_text, club_name_fb[chat.id])
        }

        if (query.data === continuemyabonement_text[1]){
            
            let stringyy = programme_pas[chat.id]
            console.log(programme_pas[chat.id])
            stringyy = stringyy.split('/')

            userCategory[chat.id] = stringyy[4]
            userProgram[chat.id] = stringyy[6]

            console.log('cl ' + stringyy + ', cat: ' + userCategory[chat.id] + ', prog: ' + userProgram[chat.id])

            let program_photo_link = []
            program_photo_link[chat.id] = ''
            let program_description = []
            program_description[chat.id] = ''
            let program_peopleamount = []
            program_peopleamount[chat.id] = ''
            let program_trener_link = []
            program_trener_link[chat.id] = ''
            let program_trener_name = []
            program_trener_name[chat.id] = ''
            let program_name = []
            program_name[chat.id] = ''

/*             if (stringyy[8] === 'onetime'){
                //–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
            }

            else {

            } */
            
            bot.deleteMessage(chat.id, message_id).then(() => {
                let prg_info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/')
                prg_info.get().then((snapshot) =>
                {
                    program_photo_link[chat.id] = snapshot.val().photo_link

                    program_description[chat.id] = snapshot.val().description
                    program_name[chat.id] = snapshot.val().name
                    program_trener_link[chat.id] = snapshot.val().trener_link
                    program_trener_name[chat.id] = snapshot.val().trener_name

                    program_peopleamount[chat.id] = snapshot.val().people_in_group

                    let pamount_values = []
                    pamount_values[chat.id] = []

                    if (program_peopleamount[chat.id] !== 'unlimited') {
                        pamount_values[chat.id] = program_peopleamount[chat.id].split('/')
                        pamount_values[chat.id][0] = parseInt(pamount_values[chat.id][0])
                        pamount_values[chat.id][1] = parseInt(pamount_values[chat.id][1])
                    }

                    let types_info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/types/')
                    types_info.get().then((snapshot) => {
                        let types_amount = []
                        types_amount[chat.id] = Object.keys(snapshot.val())
                        types_keyboard[chat.id] = [[],[], []]
                        types_keyboard[chat.id][0][0] = 
                        {
                            text: anotherprogram_text,
                            callback_data: anotherprogram_text
                        }
                        console.log(Object.keys(snapshot.val()))
                        for (let i = 0; i < types_amount[chat.id].length; i++){
                            let info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/types/' + types_amount[chat.id][i])
                            info.get().then((result) => {
                                temp_program_types[chat.id][i] = [result.val().period, result.val().price, result.val().time, result.val().type_name, result.val().visits, result.val().is_freeze, program_name[chat.id]] 
                                console.log(temp_program_types[chat.id][i])
                                if (pamount_values[chat.id][0] < pamount_values[chat.id][1] || program_peopleamount[chat.id] === 'unlimited') {
                                    types_keyboard[chat.id][1][i] = 
                                    {
                                        text: result.val().type_name,
                                        callback_data: choosetype_callback + result.val().type_name
                                    }
                                }
                                

                                if (i === types_amount[chat.id].length - 1){
                                    temp_progtypes_text[chat.id] = `<b>` + program_name[chat.id] + `</b>
` + program_description[chat.id]
                                    if (program_trener_link[chat.id] !== 'unknown' && program_trener_name[chat.id] !== 'unknown') {
                                        temp_progtypes_text[chat.id] += `
                                            
<b>–¢—Ä–µ–Ω–µ—Ä: </b><a href="`+ program_trener_link[chat.id] +`">`+ program_trener_name[chat.id] + `</a>` 
                                    }
                                    if (program_trener_link[chat.id] === 'unknown' && program_trener_name[chat.id] !== 'unknown') {
                                        temp_progtypes_text[chat.id] += `
                                            
<b>–¢—Ä–µ–Ω–µ—Ä: </b>`+ program_trener_name[chat.id] 
                                    }

                                    if (program_peopleamount[chat.id] !== 'unlimited'){
                                        temp_progtypes_text[chat.id] += `
                                    
<b>–ó–∞–ø–∏—Å–∞–ª–∏—Å—å:</b> ` + program_peopleamount[chat.id]
                                    }

                                    

                                    if (pamount_values[chat.id][0] < pamount_values[chat.id][1] ||  program_peopleamount[chat.id] === 'unlimited') {
                                        temp_progtypes_text[chat.id] += `
                                    
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã: `
                                    }

                                    if (pamount_values[chat.id][0] >= pamount_values[chat.id][1]) {
                                        favourite_program[chat.id] = myprogram_type[chat.id][6]
                                        /* if (waitlist[chat.id] === ''){
                                            waitlist[chat.id] = myprogram_type[chat.id][6]
                                            let wait_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/mailing/waitlist/programmes/' + myprogram_type[chat.id][6])
                                            wait_data.get().then((result) => {
                                                let local_waitlist = result.val()
                                                let lists_array = local_waitlist.split(',')
                                                for(let i = 0; i<lists_array; i++){
                                                    if (lists_array[i] === chat.id){
                                                        break
                                                    }
                                                    if (i === lists_array - 1 && lists_array[i] !== chat.id){
                                                        if (local_waitlist = '0'){
                                                            local_waitlist = (chat.id).toString()
                                                        }
                                                        if (local_waitlist !== '0'){
                                                            local_waitlist += ',' + chat.id
                                                        }
    
                                                        let updates = {}
                                                        updates['Fitness/'+club_name_fb[chat.id]+'/mailing/waitlist/programmes/' + myprogram_type[chat.id][6]] = local_waitlist
                                                        fb.database().ref().update(updates)
                                                    }
                                                }
                                            })
                                        } */
                                        
                                        temp_progtypes_text[chat.id] += `
                                    
<i>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã</i> `
                                        types_keyboard[chat.id][1][0] = 
                                        {
                                            text: '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',
                                            url: 'https://t.me/' + support_username[chat.id]
                                        }
                                    }
                                    
                                    if (program_photo_link[chat.id] !== 'unknown'){
                                        bot.sendPhoto(chat.id, program_photo_link[chat.id], {
                                            parse_mode: 'HTML',
                                            caption: temp_progtypes_text[chat.id],
                                            reply_markup:{
                                                inline_keyboard:types_keyboard[chat.id]
                                            }
                                        })
                                        .then(res => {
                                            messages_todelete[chat.id][0] = res.message_id
                                            messages_texts[chat.id][0] = res.caption
                                        })
                                        .catch(err => {console.log(err)})
                                    }

                                    if (program_photo_link[chat.id] === 'unknown'){
                                        bot.sendMessage(chat.id, temp_progtypes_text[chat.id], {
                                            parse_mode: 'HTML',
                                            reply_markup:{
                                                inline_keyboard:types_keyboard[chat.id]
                                            }
                                        })
                                        .then(res => {
                                            messages_todelete[chat.id][0] = res.message_id
                                            messages_texts[chat.id][0] = res.caption
                                        })
                                        .catch(err => {console.log(err)})
                                    }
                                    
                                }
                            })
                        }
                    })

                }).catch((err) => {console.log(err)})
            })
        }

        if (query.data === refuseskidka_text[1]){
            for (let i=0; i<100; i++){
                bot.deleteMessage(chat.id, message_id - i).catch(err => {
                    //console.log(err)
                })
            }
            bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
            .then(() => {
                anotherpoint_multiple[chat.id] = 2
                bot.sendMessage(chat.id, hellomessage_text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: keyboards.main_menu_keyboard
                    }
                })
                .then(() => {
                    IdentifyUser(chat.id, true)
                })
            })
        }
        if (suggestgoodskidka_text[chat.id] !== undefined && suggestbadskidka_text[chat.id] !== undefined){
            if (query.data === suggestgoodskidka_text[chat.id][1]){
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chat.id, message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                .then(() => {
                    anotherpoint_multiple[chat.id] = 2
                    bot.sendMessage(chat.id, hellomessage_text, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: keyboards.main_menu_keyboard
                        }
                    })
                })
                deelay[chat.id](1800000).then(() => {
                    programdiscount[chat.id] = discountvalues[chat.id][0]
                    bot.sendMessage(chat.id, suggestgoodskidka_text[chat.id][2], {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: refuseskidka_text[0],
                                    callback_data: refuseskidka_text[1]
                                }],
                                [{
                                    text: continuemyabonement_text[0],
                                    callback_data: continuemyabonement_text[1]
                                }]
                            ]
                        }
                    })
                    
                })
            }
            if (query.data === suggestmiddleskidka_text[chat.id][1]){
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chat.id, message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                .then(() => {
                    anotherpoint_multiple[chat.id] = 2
                    bot.sendMessage(chat.id, hellomessage_text, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: keyboards.main_menu_keyboard
                        }
                    })
                })
                deelay[chat.id](2*3600000).then(() => {
                    programdiscount[chat.id] = discountvalues[chat.id][1]
                    bot.sendMessage(chat.id, suggestmiddleskidka_text[chat.id][2], {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: refuseskidka_text[0],
                                    callback_data: refuseskidka_text[1]
                                }],
                                [{
                                    text: continuemyabonement_text[0],
                                    callback_data: continuemyabonement_text[1]
                                }]
                            ]
                        }
                    })
                    
                })
            }
        }

        if (query.data === keyboards.main_menu_buttons[2][1]){
            bot.editMessageText(text, {
                chat_id: chat.id,
                message_id: message_id
            }).catch(err => {console.log('here: ' + err)})
            keyboards.TrenersKeyboard(trener_keyboard[chat.id], userTreners[chat.id], fb, bot, chat.id, backtomain_text, choosetrener_text, club_name_fb[chat.id])
        }
    
        if (query.data === query_deletethismessage){
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
            for (let i=0; i<100; i++){
                bot.deleteMessage(chat.id, message_id - i).catch(err => {
                    //console.log(err)
                })
            }
            bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
            .then(() => {
                anotherpoint_multiple[chat.id] = 2
                bot.sendMessage(chat.id, hellomessage_text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: keyboards.main_menu_keyboard
                    }
                })
            })
        }

        if (query.data === igotmyitem_text[1]){
            if (skidka[chat.id] !== 0) {
                let updates = {}
                updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+chat.id + '/coins'] = user_coins[chat.id] - skidka[chat.id]
                fb.database().ref().update(updates)
            }
            if (userstatus[chat.id] === 'registered'){
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chat.id, message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                .then(() => {
                    anotherpoint_multiple[chat.id] = 2
                    bot.sendMessage(chat.id, hellomessage_text, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: keyboards.main_menu_keyboard
                        }
                    })
                })
            }
        }

        if (query.data === unfreezeabonement1_text[1]){
            bot.editMessageText(messages_texts[chat.id][2], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_id
            })
            .then(() => {
                let frz_text = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å —Å–≤–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç? –ú—ã –ø–æ—Å—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∏ –ø—Ä–æ–¥–ª–∏–º –¥–µ–π—Å—Ç–≤–∏–µ –≤–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞`
                bot.sendMessage(chat.id, frz_text, {
                    parse_mode: 'HTML',
                    reply_markup:{
                        inline_keyboard: [
                            [{
                                text: unfreezeabonement2_text[0],
                                callback_data: unfreezeabonement2_text[1]
                            }],
                            [{
                                text: backtomain_text,
                                callback_data: backtomain_text
                            }]
                        ]
                    }
                })
            })
        }

        if (query.data === unfreezeabonement2_text[1]){
            bot.deleteMessage(chat.id, message_id)
            .then(() => {
                let ppl_ingroup = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id);
                ppl_ingroup.get().then((snapshot) => {
                    let date = new Date()
                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                    let timeOfffset = 6 //Astana GMT +6
                    let time_now = new Date(utcTime + (3600000 * timeOfffset))
                    let time_freeze = new Date(snapshot.val().abonement.freeze_start)

                    let finaltime = time_now.getTime() - time_freeze.getTime()
                    finaltime = finaltime / (1000 * 3600 * 24)
                    finaltime =  Math.round(finaltime)
                    console.log('4236!!! ' + finaltime)
                    let updates = {}
                    let visible_date_accept

                    guserdata[chat.id] = []
                    let frz_text
                    if (finaltime === 0){
                        frz_text = '–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å. –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É –∑–∞–≤—Ç—Ä–∞ üôÇ'
                    
                        bot.sendMessage(chat.id, frz_text, {
                            parse_mode: 'HTML',
                            reply_markup:{
                                inline_keyboard: [
                                    [{
                                        text: backtomain_text,
                                        callback_data: backtomain_text
                                    }]
                                ]
                            }
                        })
                    
                    }

                    if (finaltime > 0){
                        if (finaltime < snapshot.val().abonement.freeze_amount){
                            let newend_date = new Date(snapshot.val().abonement.end_date)
                            newend_date.setDate(newend_date.getDate() + finaltime)
                            guserdata[chat.id][3] = snapshot.val().abonement.freeze_amount - finaltime
                            updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+ chat.id + '/abonement/freeze_amount'] = snapshot.val().abonement.freeze_amount - finaltime
                            updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+ chat.id + '/abonement/end_date'] = newend_date.getTime()
                            updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+ chat.id + '/abonement/freeze_start'] = '0'
                            let Astana_date_accept = new Date(newend_date.getTime())  
                            let minutes2 = Astana_date_accept.getMinutes()
                            if (minutes2 < 10) minutes2 = '0' + minutes2
                            let hours2 = Astana_date_accept.getHours()
                            if (hours2 < 10) hours2 = '0' + hours2
                            visible_date_accept = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_accept) + ' ' +  */hours2 + ':' + minutes2 + ', ' + Astana_date_accept.getDate() + '.' + (Astana_date_accept.getMonth() + 1) + '.' + Astana_date_accept.getFullYear()    
                            frz_text = `–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω üßä`
                        }
    
                        if (finaltime >= snapshot.val().abonement.freeze_amount){
                            let newend_date = new Date(snapshot.val().abonement.end_date)
                            newend_date.setDate(newend_date.getDate() + snapshot.val().abonement.freeze_amount)
                            updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+ chat.id + '/abonement/freeze_amount'] = 0
                            updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+ chat.id + '/abonement/end_date'] = newend_date.getTime()
                            updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+ chat.id + '/abonement/freeze_start'] = '0'
                            let Astana_date_accept = new Date(newend_date.getTime())  
                            let minutes2 = Astana_date_accept.getMinutes()
                            if (minutes2 < 10) minutes2 = '0' + minutes2
                            let hours2 = Astana_date_accept.getHours()
                            if (hours2 < 10) hours2 = '0' + hours2
                            visible_date_accept = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_accept) + ' ' +  */hours2 + ':' + minutes2 + ', ' + Astana_date_accept.getDate() + '.' + (Astana_date_accept.getMonth() + 1) + '.' + Astana_date_accept.getFullYear()
                            guserdata[chat.id][3] = 0
                        }
                        
                        updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+ chat.id + '/abonement/abonement_status'] = abonement_statuses_text[2]
    
                        
                        fb.database().ref().update(updates)
                        guserdata[chat.id][0] = snapshot.val().userrow +1
                        guserdata[chat.id][1] = abonement_statuses_text[2]
                        guserdata[chat.id][2] = '–ù–µ—Ç'
                        guserdata[chat.id][4] = visible_date_accept
    
                        GoogleUnFreezeUser(chat.id, guserdata[chat.id])
                        frz_text = `–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω üßä`
    
                        bot.sendMessage(chat.id, frz_text, {
                            parse_mode: 'HTML',
                            reply_markup:{
                                inline_keyboard: [
                                    [{
                                        text: backtomain_text,
                                        callback_data: backtomain_text
                                    }]
                                ]
                            }
                        })

                        let anal = fb.database().ref('Fitness/' + club_name_fb[chat.id] + '/analytics/current_data/audience/stats/')
                        anal.get().then((an) =>{
                            let mini_update = {}
                            mini_update['Fitness/' + club_name_fb[chat.id] + '/analytics/current_data/audience/stats/freeze'] = (an.val().freeze - 1)
                            mini_update['Fitness/' + club_name_fb[chat.id] + '/analytics/current_data/audience/stats/active'] = (an.val().active + 1)
                            fb.database().ref().update(mini_update)
                        })
                    }

                    
                })

                
                
            })
        }

        if (query.data === freezeabonement1_text[1]){
            bot.editMessageText(messages_texts[chat.id][2], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_id
            })
            .then(() => {
                let frz_text = `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å —Å–≤–æ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –ª—é–±–æ–π —Å—Ä–æ–∫ –¥–æ <b>` + user_freezeamount[chat.id] + ` –¥–Ω–µ–π. </b> –ß—Ç–æ–±—ã —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –∑–∞–π–¥–∏—Ç–µ –≤ <b>` + keyboards.main_menu_buttons[0][0] + `</b> –∏ –Ω–∞–∂–º–∏—Ç–µ <b>` + unfreezeabonement1_text[0] + `</b>, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. `
                bot.sendMessage(chat.id, frz_text, {
                    parse_mode: 'HTML',
                    reply_markup:{
                        inline_keyboard: [
                            [{
                                text: freezeabonement2_text[0],
                                callback_data: freezeabonement2_text[1]
                            }],
                            [{
                                text: backtomain_text,
                                callback_data: backtomain_text
                            }]
                        ]
                    }
                })
            })
            .catch(err => {console.log('h: ' + err)})
        }

        if (query.data === freezeabonement2_text[1]){
            bot.deleteMessage(chat.id, message_id)
            .then(() => {
                let ppl_ingroup = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id);
                ppl_ingroup.get().then((snapshot) => {
                    let date = new Date()
                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                    let timeOfffset = 6 //Astana GMT +6
                    let time_now = new Date(utcTime + (3600000 * timeOfffset))

                    let updates = {}
                    updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+ chat.id + '/abonement/abonement_status'] = abonement_statuses_text[1]
                    updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+ chat.id + '/abonement/freeze_start'] = time_now.getTime()

                    let Astana_date_accept = new Date(time_now.getTime())  
                    let minutes2 = Astana_date_accept.getMinutes()
                    if (minutes2 < 10) minutes2 = '0' + minutes2
                    let hours2 = Astana_date_accept.getHours()
                    if (hours2 < 10) hours2 = '0' + hours2
                    let visible_date_accept = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_accept) + ' ' +  */hours2 + ':' + minutes2 + ', ' + Astana_date_accept.getDate() + '.' + (Astana_date_accept.getMonth() + 1) + '.' + Astana_date_accept.getFullYear()

                    guserdata[chat.id] = []
                    guserdata[chat.id][0] = snapshot.val().userrow +1
                    guserdata[chat.id][1] = abonement_statuses_text[1]
                    guserdata[chat.id][2] = visible_date_accept

                    GoogleFreezeUser(chat.id, guserdata[chat.id])

                    fb.database().ref().update(updates)

                    let anal = fb.database().ref('Fitness/' + club_name_fb[chat.id] + '/analytics/current_data/audience/stats/')
                    anal.get().then((an) =>{
                        let mini_update = {}
                        mini_update['Fitness/' +  club_name_fb[chat.id] + '/analytics/current_data/audience/stats/freeze'] = (an.val().freeze + 1)
                        mini_update['Fitness/' +  club_name_fb[chat.id] + '/analytics/current_data/audience/stats/active'] = (an.val().active - 1)
                        fb.database().ref().update(mini_update)
                    })

                })

                let frz_text = `–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –±—ã–ª –∑–∞–º–æ—Ä–æ–∂–µ–Ω`
                bot.sendMessage(chat.id, frz_text, {
                    parse_mode: 'HTML',
                    reply_markup:{
                        inline_keyboard: [
                            [{
                                text: backtomain_text,
                                callback_data: backtomain_text
                            }]
                        ]
                    }
                })
            })
        }

        if (query.data === keyboards.main_menu_buttons[0][1]){
            if (userstatus[chat.id] !== 'registered'){
                bot.editMessageText(text, {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_id
                }).then(() => {
                    bot.sendMessage(chat.id, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. –°–∞–º–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å!', {
                        parse_mode: 'HTML',
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: backtomain_text,
                                    callback_data: backtomain_text
                                }],
                                [{
                                    text: keyboards.main_menu_buttons[1][0],
                                    callback_data: keyboards.main_menu_buttons[1][1]
                                }]
                            ]
                        }
                    })
                })
            }
            if (userstatus[chat.id] === 'registered'){
                
                bot.editMessageText(text, {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_id
                }).then(() => {
                    let abonem_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id)
                    abonem_data.get().then((result) => {
                        let date = new Date()
                        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                        let timeOfffset = 6 //Astana GMT +6
                        let time_now = new Date(utcTime + (3600000 * timeOfffset))
                        let Astana_date_end = new Date(result.val().abonement.end_date)  
                        let time_freeze = new Date(result.val().abonement.freeze_start)
                        
                        let minutes = Astana_date_end.getMinutes()
                        if (minutes < 10) minutes = '0' + minutes
                        let hours = Astana_date_end.getHours()
                        if (hours < 10) hours = '0' + hours
                        let visible_date_end = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_end) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date_end.getDate() + '.' + (Astana_date_end.getMonth() + 1) + '.' + Astana_date_end.getFullYear()        

                        let finaltime = time_now.getTime() - time_freeze.getTime()
                        finaltime = finaltime / (1000 * 3600 * 24)
                        finaltime =  Math.round(finaltime)

                        if (time_now > Astana_date_end && result.val().abonement.abonement_status === abonement_statuses_text[2] ) {
                            StartTraining(chat.id, message_id)
                        }

                        let kb = []

                        let temp_mes = `<b>–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç: </b>` + result.val().abonement.abonement_status + `

<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b> ` + result.val().abonement.name + `
<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </b>` + result.val().abonement.period + ` –º–µ—Å.
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: </b>` + result.val().abonement.price + ` —Ç–µ–Ω–≥–µ `

    temp_mes += `

üìÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –≥–æ–¥–µ–Ω –¥–æ: ` + visible_date_end

if (time_now.getFullYear() === Astana_date_end.getFullYear() && time_now.getMonth() === Astana_date_end.getMonth() && time_now.getDate() <= Astana_date_end.getDate()){
    if ((Astana_date_end.getDate() - time_now.getDate()) <= 3){
        temp_mes +=  ` (‚ùóÔ∏è –û—Å—Ç–∞–ª–æ—Å—å ` + (Astana_date_end.getDate() - time_now.getDate()) + ` –¥–Ω.)`
    }
}

kb.push([{
    text: continuemyabonement_text[0],
    callback_data: continuemyabonement_text[1]
},
{
    text: '–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É üèãÔ∏è‚Äç‚ôÇÔ∏è',
    callback_data: keyboards.main_menu_buttons[1][1]
}])

    if (result.val().abonement.visits !== 'unlimited'){
        temp_mes += `
üë£ –ü–æ—Å–µ—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: ` + result.val().abonement.visits
        if (result.val().abonement.visits <= 3){
            temp_mes += ` (‚ùóÔ∏è)`
        }
    }
    if (result.val().abonement.time !== 'unlimited'){
        if (result.val().abonement.time === 'evening'){
            temp_mes += `
üïî –í—Ä–µ–º—è: —Å ` + evening_time[chat.id][0][0] + ':' + evening_time[chat.id][0][1] + ' –¥–æ ' +  evening_time[chat.id][1][0] + ':' + evening_time[chat.id][1][1]
        }
        if (result.val().abonement.time === 'morning'){
            temp_mes += `
üïî –í—Ä–µ–º—è: —Å ` + morning_time[chat.id][0][0] + ':' + morning_time[chat.id][0][1] + ' –¥–æ ' +  morning_time[chat.id][1][0] + ':' + morning_time[chat.id][1][1]
        }
    }

                        if (result.val().abonement.freeze_amount !== false && result.val().abonement.abonement_status !== abonement_statuses_text[1]){
                            temp_mes += `
‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ` + result.val().abonement.freeze_amount

                            if (result.val().abonement.freeze_amount > 0 && result.val().abonement.abonement_status !== abonement_statuses_text[4] && result.val().abonement.abonement_status !== abonement_statuses_text[3] && result.val().abonement.abonement_status !== abonement_statuses_text[0]){
                                kb.push([{
                                    text: freezeabonement1_text[0],
                                    callback_data: freezeabonement1_text[1]
                                }])
                                user_freezeamount[chat.id] = result.val().abonement.freeze_amount
                            }
                        }

                        if (result.val().abonement.abonement_status === abonement_statuses_text[1]) {
                            
                            let freeze_date = new Date(result.val().abonement.freeze_start)
                            let minutes = freeze_date.getMinutes()
                            if (minutes < 10) minutes = '0' + minutes
                            let hours = freeze_date.getHours()
                            if (hours < 10) hours = '0' + hours

                            if ((result.val().abonement.freeze_amount - finaltime) < 0){
                                finaltime = 0
                            }
                            
                            temp_mes += `
‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ` + (result.val().abonement.freeze_amount - finaltime).toString() + `
–ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –∑–∞–º–æ—Ä–æ–∑–∫–µ —Å ` + hours + ':' + minutes + ', ' + freeze_date.getDate() + '.' + (freeze_date.getMonth()+1).toString() + '.' + freeze_date.getFullYear()
                            
                            kb.push([{
                                text: unfreezeabonement1_text[0],
                                callback_data: unfreezeabonement1_text[1]
                            }])
                        }

                        if (result.val().coins > 0){
                            temp_mes += `
üí∞ –ë–∞–ª–∞–Ω—Å: ` + result.val().coins + ` —Ç–µ–Ω–≥–µ`
                        }

                        user_email[chat.id] = result.val().email
                        user_phone[chat.id] = result.val().phone
                        user_name[chat.id] = result.val().name

                        let tmp_emj

                        if (user_email[chat.id] === 'unknown' || user_email[chat.id] === 'unknown' || user_phone[chat.id] === 'unknown'){
                            tmp_emj = '‚ùóÔ∏è '
                        }

                        if (user_email[chat.id] !== 'unknown' && user_email[chat.id] !== 'unknown' && user_phone[chat.id] !== 'unknown'){
                            tmp_emj = 'üë§ '
                        }

                        kb.push([{
                            text: tmp_emj + adduserdata_text[0],
                            callback_data: adduserdata_text[1]
                        }])

                        kb.push([{
                            text: backtomain_text,
                            callback_data: backtomain_text
                        }])

                        messages_texts[chat.id][2] = temp_mes 
                        programme_pas[chat.id] = result.val().programme_pas
                        bot.sendMessage(chat.id, temp_mes, {
                            parse_mode: 'HTML',
                            reply_markup:{
                                inline_keyboard: kb
                            }
                        })
                        .then(res => {
                            messages_todelete[chat.id][3] = res.message_id
                        })
                    })
                    
                })
            }
        }

        if (query.data === adduserdata_text[1]){
            bot.editMessageText(messages_texts[chat.id][2], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: messages_todelete[chat.id][3]
            }).catch(err => {console.log('here: ' + err)})
            bot.sendMessage(chat.id, '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –¥–µ—Ä–∂–∞–ª–∏ –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏–π –∏ —Å–æ–±—ã—Ç–∏–π üòè', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backadduserdata_text[0],
                            callback_data: backadduserdata_text[1]
                        }],
                        [{
                            text: '–§–ò–û: ' + user_name[chat.id],
                            callback_data: adduserinfo_text[0]
                        },
                        {
                            text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chat.id],
                            callback_data: adduserinfo_text[1]
                        }],
                        [{
                            text: 'Email: ' + user_email[chat.id],
                            callback_data: adduserinfo_text[2]
                        }]
                    ]
                }
            })
            .then(res => {
                messages_todelete[chat.id][4] = res.message_id
                messages_texts[chat.id][3] = res.text
            })
        }

        if (query.data === backadduserdata_text[1]){
            bot.deleteMessage(chat.id, messages_todelete[chat.id][4])
            .then(() => {
                messages_todelete[chat.id][4] = null
                bot.deleteMessage(chat.id, messages_todelete[chat.id][3])
                .then(() => {
                    messages_todelete[chat.id][3] = null
                    let abonem_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id)
                    abonem_data.get().then((result) => {
                        let date = new Date()
                        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                        let timeOfffset = 6 //Astana GMT +6
                        let time_now = new Date(utcTime + (3600000 * timeOfffset))
                        let Astana_date_end = new Date(result.val().abonement.end_date)  
                        let time_freeze = new Date(result.val().abonement.freeze_start)
                        
                        let minutes = Astana_date_end.getMinutes()
                        if (minutes < 10) minutes = '0' + minutes
                        let hours = Astana_date_end.getHours()
                        if (hours < 10) hours = '0' + hours
                        let visible_date_end = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_end) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date_end.getDate() + '.' + (Astana_date_end.getMonth() + 1) + '.' + Astana_date_end.getFullYear()        

                        let finaltime = time_now.getTime() - time_freeze.getTime()
                        finaltime = finaltime / (1000 * 3600 * 24)
                        finaltime =  Math.round(finaltime)

                        if (time_now > Astana_date_end && result.val().abonement.abonement_status === abonement_statuses_text[2] ) {
                            StartTraining(chat.id, message_id)
                        }

                        let kb = []

                        let temp_mes = `<b>–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç: </b>` + result.val().abonement.abonement_status + `

<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b> ` + result.val().abonement.name + `
<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </b>` + result.val().abonement.period + ` –º–µ—Å.
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: </b>` + result.val().abonement.price + ` —Ç–µ–Ω–≥–µ `

    temp_mes += `

üìÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –≥–æ–¥–µ–Ω –¥–æ: ` + visible_date_end

if (time_now.getFullYear() === Astana_date_end.getFullYear() && time_now.getMonth() === Astana_date_end.getMonth() && time_now.getDate() <= Astana_date_end.getDate()){
    if ((Astana_date_end.getDate() - time_now.getDate()) <= 3){
        temp_mes +=  ` (‚ùóÔ∏è –û—Å—Ç–∞–ª–æ—Å—å ` + (Astana_date_end.getDate() - time_now.getDate()) + ` –¥–Ω.)`
    }
}

kb.push([{
    text: continuemyabonement_text[0],
    callback_data: continuemyabonement_text[1]
},
{
    text: '–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É üèãÔ∏è‚Äç‚ôÇÔ∏è',
    callback_data: keyboards.main_menu_buttons[1][1]
}])

    if (result.val().abonement.visits !== 'unlimited'){
        temp_mes += `
üë£ –ü–æ—Å–µ—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: ` + result.val().abonement.visits
        if (result.val().abonement.visits <= 3){
            temp_mes += ` (‚ùóÔ∏è)`
        }
    }
    if (result.val().abonement.time !== 'unlimited'){
        if (result.val().abonement.time === 'evening'){
            temp_mes += `
üïî –í—Ä–µ–º—è: —Å ` + evening_time[chat.id][0][0] + ':' + evening_time[chat.id][0][1] + ' –¥–æ ' +  evening_time[chat.id][1][0] + ':' + evening_time[chat.id][1][1]
        }
        if (result.val().abonement.time === 'morning'){
            temp_mes += `
üïî –í—Ä–µ–º—è: —Å ` + morning_time[chat.id][0][0] + ':' + morning_time[chat.id][0][1] + ' –¥–æ ' +  morning_time[chat.id][1][0] + ':' + morning_time[chat.id][1][1]
        }
    }

                        if (result.val().abonement.freeze_amount !== false && result.val().abonement.abonement_status !== abonement_statuses_text[1]){
                            temp_mes += `
‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ` + result.val().abonement.freeze_amount

                            if (result.val().abonement.freeze_amount > 0 && result.val().abonement.abonement_status !== abonement_statuses_text[4] && result.val().abonement.abonement_status !== abonement_statuses_text[3] && result.val().abonement.abonement_status !== abonement_statuses_text[0]){
                                kb.push([{
                                    text: freezeabonement1_text[0],
                                    callback_data: freezeabonement1_text[1]
                                }])
                                user_freezeamount[chat.id] = result.val().abonement.freeze_amount
                            }
                        }

                        if (result.val().abonement.abonement_status === abonement_statuses_text[1]) {
                            
                            let freeze_date = new Date(result.val().abonement.freeze_start)
                            let minutes = freeze_date.getMinutes()
                            if (minutes < 10) minutes = '0' + minutes
                            let hours = freeze_date.getHours()
                            if (hours < 10) hours = '0' + hours

                            if ((result.val().abonement.freeze_amount - finaltime) < 0){
                                finaltime = 0
                            }
                            
                            temp_mes += `
‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ` + (result.val().abonement.freeze_amount - finaltime).toString() + `
–ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –∑–∞–º–æ—Ä–æ–∑–∫–µ —Å ` + hours + ':' + minutes + ', ' + freeze_date.getDate() + '.' + (freeze_date.getMonth()+1).toString() + '.' + freeze_date.getFullYear()
                            
                            kb.push([{
                                text: unfreezeabonement1_text[0],
                                callback_data: unfreezeabonement1_text[1]
                            }])
                        }

                        if (result.val().coins > 0){
                            temp_mes += `
üí∞ –ë–∞–ª–∞–Ω—Å: ` + result.val().coins + ` —Ç–µ–Ω–≥–µ`
                        }

                        user_email[chat.id] = result.val().email
                        user_phone[chat.id] = result.val().phone
                        user_name[chat.id] = result.val().name

                        let tmp_emj

                        if (user_email[chat.id] === 'unknown' || user_email[chat.id] === 'unknown' || user_phone[chat.id] === 'unknown'){
                            tmp_emj = '‚ùóÔ∏è '
                        }

                        if (user_email[chat.id] !== 'unknown' && user_email[chat.id] !== 'unknown' && user_phone[chat.id] !== 'unknown'){
                            tmp_emj = 'üë§ '
                        }

                        kb.push([{
                            text: tmp_emj + adduserdata_text[0],
                            callback_data: adduserdata_text[1]
                        }])

                        kb.push([{
                            text: backtomain_text,
                            callback_data: backtomain_text
                        }])

                        messages_texts[chat.id][2] = temp_mes 
                        programme_pas[chat.id] = result.val().programme_pas
                        bot.sendMessage(chat.id, temp_mes, {
                            parse_mode: 'HTML',
                            reply_markup:{
                                inline_keyboard: kb
                            }
                        })
                        .then(res => {
                            messages_todelete[chat.id][3] = res.message_id
                        })
                    })
                    
                })
            })
        }

        if (query.data === keyboards.main_menu_buttons[3][1]){
            bot.editMessageText(text, {
                chat_id: chat.id,
                message_id: message_id
            }).catch(err => {console.log('here: ' + err)})
            let ppl_ingroup = fb.database().ref('Fitness/'+club_name_fb[chat.id] + '/shop')
            ppl_ingroup.get().then((snapshot) => {
                if (snapshot.exists()){
                    keyboards.ShopCategoriesKeyboard(shop_keyboard[chat.id], userShopCategories[chat.id], fb, bot, chat.id, backtomain_text, chooseshopcategory_text, club_name_fb[chat.id])
                }
                else {
                    bot.sendMessage(chat.id, '–ú—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, –Ω–æ —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º—Å—è üòá', {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: backtomain_text,
                                    callback_data: backtomain_text
                                }]
                            ]
                        }
                    })
                }
            })
        }

        for (let i=0; i<userShopCategories[chat.id].length; i++){
            if (query.data === userShopCategories[chat.id][i]){
                userShopCategory[chat.id] = userShopCategories[chat.id][i]
                keyboards.ShopItemsKeyboard(shopitems_keyboard[chat.id], userItemsList[chat.id], userShopCategory[chat.id], fb, bot, chat, message_id, anothershopcategory_text, chooseitem_text, club_name_fb[chat.id])
            }
        }

        for (let i=0; i < 100; i++){
            //console.log(query.data + ', usershopcategory = ' + userShopCategory[chat.id])
            if (query.data === i.toString() && userShopCategory[chat.id] !== undefined && userShopCategory[chat.id] !== null /* && userItem[chat.id] === '' */) {
                console.log(query.data + ', usershopcategory = ' + userShopCategory[chat.id])
                userItem[chat.id] = i
                bot.deleteMessage(chat.id, message_id)
                let itemdata = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/shop/categories/' + userShopCategory[chat.id] + '/items/' + query.data)
                itemdata.get().then((result) => {
                    let temp_text = `<b>`+ result.val().name + `</b>
` + result.val().description + `

üí∞ –¶–µ–Ω–∞: ` + result.val().price + ` —Ç–µ–Ω–≥–µ`
                    userItemPrice[chat.id] = result.val().price
                    if (userstatus[chat.id] === 'registered'){
                        bot.sendPhoto(chat.id, result.val().photo, {
                            parse_mode: 'HTML',
                            caption: temp_text,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: backtoitemslist_text[0],
                                        callback_data: backtoitemslist_text[1]
                                    }],
                                    [{
                                        text: buyitem_text[0],
                                        callback_data: buyitem_text[1]
                                    }]
                                ]
                            }
                        })
                    }
                    if (userstatus[chat.id] !== 'registered'){
                        bot.sendPhoto(chat.id, result.val().photo, {
                            parse_mode: 'HTML',
                            caption: temp_text,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: backtoitemslist_text[0],
                                        callback_data: backtoitemslist_text[1]
                                    }]
                                ]
                            }
                        })
                    }
                })
            }
        }

        if (query.data === buyitem_text[1]){
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log(err)})
            let userdata = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id)
            userdata.get().then((result) => {
                user_coins[chat.id] = result.val().coins
                if(user_coins[chat.id] >= (userItemPrice[chat.id] * min_cashback[chat.id]) && userItemPrice[chat.id] >= min_price[chat.id]){
                    if (user_coins[chat.id] > (userItemPrice[chat.id] * max_cashback[chat.id])){
                        skidka[chat.id] = userItemPrice[chat.id] * max_cashback[chat.id]
                    }
                    else skidka[chat.id] = user_coins[chat.id]

                    bot.sendMessage(chat.id, '–£ –≤–∞—Å –µ—Å—Ç—å ' + user_coins[chat.id] + ' —Ç–µ–Ω–≥–µ, –∏—Ö –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å ' + skidka[chat.id] + ' —Ç–µ–Ω–≥–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –•–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º–∏?', {
                        parse_mode: 'HTML',
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: useskidka_text[0],
                                    callback_data: useskidka_text[1]
                                }],
                                [{
                                    text: dontuseskidka_text[0],
                                    callback_data: dontuseskidka_text[1]
                                }]
                            ]
                        }
                    })

                }
                else {
                    let itemdata = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/shop/categories/' + userShopCategory[chat.id] + '/items/' + userItem[chat.id])
            itemdata.get().then((result) => {
                let billtext = `

<b>‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É</b>
‚îú –ö–ª–∏–µ–Ω—Ç: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: ` + result.val().name + `
‚îú –¶–µ–Ω–∞: ` + result.val().price + ` —Ç–µ–Ω–≥–µ
‚îî –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å—ã `

                bot.sendMessage(chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω"' + billtext, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text:igotmyitem_text[0],
                                callback_data: query_deletethismessage
                            }]
                        ]
                    }
                })

                bot.sendMessage(operators_chat[chat.id], billtext, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω',
                                callback_data: 'bytm_' + userItem[chat.id] + '_' + result.val().name + '_' + result.val().price
                            }]
                        ]
                    }
                })
            })
                }
            })
        }

        if (query.data === dontuseskidka_text[1]){
            let itemdata = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/shop/categories/' + userShopCategory[chat.id] + '/items/' + userItem[chat.id])
            itemdata.get().then((result) => {
                let billtext = `

<b>‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É</b>
‚îú –ö–ª–∏–µ–Ω—Ç: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: ` + result.val().name + `
‚îú –¶–µ–Ω–∞: ` + result.val().price + ` —Ç–µ–Ω–≥–µ
‚îî –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å—ã `

                bot.sendMessage(chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω"' + billtext, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text:igotmyitem_text[0],
                                callback_data: query_deletethismessage
                            }]
                        ]
                    }
                })

                bot.sendMessage(operators_chat[chat.id], billtext, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω',
                                callback_data: 'bytm_' + userItem[chat.id] + '_' + result.val().name + '_' + result.val().price
                            }]
                        ]
                    }
                })
            })
        }

        if (query.data === useskidka_text[1]){
            let itemdata = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/shop/categories/' + userShopCategory[chat.id] + '/items/' + userItem[chat.id])
            itemdata.get().then((result) => {
                let billtext = `

<b>‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É</b>
‚îú –ö–ª–∏–µ–Ω—Ç: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: ` + result.val().name + `
‚îú –¶–µ–Ω–∞: ` + result.val().price + ` —Ç–µ–Ω–≥–µ
‚îî –ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å—ã: ` + skidka[chat.id] + ` —Ç–µ–Ω–≥–µ

üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ —Ç–æ–≤–∞—Ä: ` + (result.val().price - skidka[chat.id])

                bot.sendMessage(chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω"' + billtext, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: igotmyitem_text[0],
                                callback_data: igotmyitem_text[1]
                            }]
                        ]
                    }
                })

                bot.sendMessage(operators_chat[chat.id], billtext, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω',
                                callback_data: 'bytm_' + userItem[chat.id] + '_' + result.val().name + '_' + result.val().price
                            }]
                        ]
                    }
                })
            })
        }

        if (query.data === sendlocation){
            const msgtext = `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, –∏ –º—ã –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π <b>Coffee BOOM</b> ‚òïÔ∏è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–∫—Ä–µ–ø–∫–∏ (—Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <b>"–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è"</b>
üè™ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ`
            bot.sendVideo(chat.id, './pictures/tutorial.mp4').then(() => {
                bot.sendMessage(chat.id, msgtext, {parse_mode: 'HTML'})
            })
        }

        if (query.data === backtomain_text){
            if (userstatus[chat.id] !== 'registered'){
                IdentifyUser(chat.id, false)
            }
            for (let i=0; i<100; i++){
                bot.deleteMessage(chat.id, message_id - i).catch(err => {
                    //console.log(err)
                })
            }
            bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)]).then(() => {
                anotherpoint_multiple[chat.id] = 2
                bot.sendMessage(chat.id, hellomessage_text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: keyboards.main_menu_keyboard
                    }
                })
            })
            
        }

        for (let i = 0; i < userCategories[chat.id].length; i++){
            //console.log('categorycheck: ' + userCategories[chat.id][i])
            if (query.data === userCategories[chat.id][i] && userProgram[chat.id] === ''){
                userCategory[chat.id] = userCategories[chat.id][i]
                //user_mailingdata[chat.id][0] = userCategory[chat.id] 
                userProgram[chat.id] = 'unknown'
                console.log('PRESSED ON CATEGORY!!!')
                //bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
                keyboards.ProgramKeyboard(programmes_keyboard[chat.id], userProgrammesList[chat.id], userCategory[chat.id], fb, bot, chat, message_id, anothercategory_text, chooseprogramme_text, club_name_fb[chat.id])
            }
        }

        if (query.data === anothercategory_text){
            userCategory[chat.id] = ''
            userProgram[chat.id] = ''
            //user_mailingdata[chat.id][0] = ''
            bot.deleteMessage(chat.id, message_id)
            keyboards.ProgramCategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], fb, bot, chat.id, backtomain_text, choosecategory_text, club_name_fb[chat.id])
        }

        if (query.data === anothershopcategory_text){
            userShopCategory[chat.id] = ''
            bot.deleteMessage(chat.id, message_id)
            keyboards.ShopCategoriesKeyboard(shop_keyboard[chat.id], userShopCategories[chat.id], fb, bot, chat.id, backtomain_text, chooseshopcategory_text, club_name_fb[chat.id])
        }

        if (query.data === backtoitemslist_text[1]){
            userItem[chat.id] = ''
            userItemPrice[chat.id] = 0
            bot.deleteMessage(chat.id, message_id)
            keyboards.ShopItemsKeyboard(shopitems_keyboard[chat.id], userItemsList[chat.id], userShopCategory[chat.id], fb, bot, chat, message_id, anothershopcategory_text, chooseitem_text, club_name_fb[chat.id])
        }

        for (let i = 0; i < temp_program_types[chat.id].length; i++){
            if (query.data === choosetype_callback + temp_program_types[chat.id][i][3]){
                    myprogram_type[chat.id] = temp_program_types[chat.id][i]
                    //user_mailingdata[chat.id][2] = temp_program_types[chat.id][i][2] //time
                   // user_mailingdata[chat.id][3] = temp_program_types[chat.id][i][0] //time

                    bot.editMessageCaption(messages_texts[chat.id][0], {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: messages_todelete[chat.id][0]
                    })
                    .catch(err => {
                        console.log(err)
                        bot.editMessageText(messages_texts[chat.id][0], {
                            parse_mode: 'HTML',
                            chat_id: chat.id,
                            message_id: messages_todelete[chat.id][0]
                        })
                    })
                    /* for (let i = 0; i < messages_todelete[chat.id].length; i++){
                        console.log('why? ' + messages_todelete[chat.id].length)
                        bot.deleteMessage(chat.id, messages_todelete[chat.id][i])
                    } */
                    let texttosend = []
                    texttosend[chat.id] = `<b>–û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–∏–º–µ–Ω—Ç–∞: </b>
‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ` + temp_program_types[chat.id][i][0] + ` –º–µ—Å. 
`
                    if (temp_program_types[chat.id][i][4] !== 'unlimited'){
                        texttosend[chat.id] += `üë£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + temp_program_types[chat.id][i][4] + `
`
                    }
                    
                    if (temp_program_types[chat.id][i][2] === 'morning') {
                        texttosend[chat.id] += `üïì –ß–∞—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è: —Å ` + morning_time[chat.id][0][0] + ':' + morning_time[chat.id][0][1] + ' –ø–æ ' + morning_time[chat.id][1][0] + ':' + morning_time[chat.id][1][1] + `
`
                    }

                    if (temp_program_types[chat.id][i][2] === 'evening') {
                        texttosend[chat.id] += `üïì –ß–∞—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è: —Å ` + evening_time[chat.id][0][0] + ':' + evening_time[chat.id][0][1] + ' –ø–æ ' + evening_time[chat.id][1][0] + ':' + evening_time[chat.id][1][1] + `
`
                    }

                    let stringyy = programme_pas[chat.id]
                    stringyy = stringyy.split('/')

                    if (programdiscount[chat.id] !== 0 && stringyy[6] === userProgram[chat.id] && stringyy[8] === 'onetime'){
                        if ((parseInt(temp_program_types[chat.id][i][1]) * (programdiscount[chat.id] / 100)) <= discountvalues[chat.id][3]){
                            temp_program_types[chat.id][i][1] = temp_program_types[chat.id][i][1] - (parseInt(temp_program_types[chat.id][i][1]) * (programdiscount[chat.id] / 100))
                            texttosend[chat.id] += `üí∞ –¶–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ` + temp_program_types[chat.id][i][1] + ` —Ç–µ–Ω–≥–µ (—Å–∫–∏–¥–∫–∞ `+ programdiscount[chat.id] +`%)`
                        }

                        else {
                            temp_program_types[chat.id][i][1] = temp_program_types[chat.id][i][1] - discountvalues[chat.id][3]
                            texttosend[chat.id] += `üí∞ –¶–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ` + temp_program_types[chat.id][i][1] + ` —Ç–µ–Ω–≥–µ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏)`
                        }
                        
                    }

                    if (programdiscount[chat.id] === 0 || stringyy[6] !== userProgram[chat.id] || stringyy[8] !== 'onetime'){
                        texttosend[chat.id] += `üí∞ –¶–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ` + temp_program_types[chat.id][i][1] + ` —Ç–µ–Ω–≥–µ`
                    }

                    if (temp_program_types[chat.id][i][5] !== false){
                        texttosend[chat.id] += `

<i>‚ùÑÔ∏è –í –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤—Ö–æ–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫–∏ (`+ temp_program_types[chat.id][i][5] +` –¥–Ω.) </i>`
                    }

                    if (temp_program_types[chat.id][i][5] === false){
                        texttosend[chat.id] += `

<i>‚ùÑÔ∏è –í –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫–∏ </i>`
                    }
                    types_keyboard[chat.id][2][0] = 
                    {
                        text: fillabonement_text,
                        callback_data: fillabonement_text + temp_program_types[chat.id][i][3]
                    }
                    if (messages_todelete[chat.id][1] !== undefined){
                        bot.editMessageText(texttosend[chat.id], {
                            parse_mode: 'HTML',
                            chat_id: chat.id,
                            message_id: messages_todelete[chat.id][1],
                            reply_markup: {
                                inline_keyboard: types_keyboard[chat.id]
                            }
                        }).catch(err => {console.log('2 ' + err)})
                        .then(res => {messages_texts[chat.id][1] = res.text})
                    }

                    if (messages_todelete[chat.id][1] === undefined){
                        bot.sendMessage(chat.id, texttosend[chat.id], {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: types_keyboard[chat.id]
                            }
                        }) 
                        .then(res => {
                            messages_todelete[chat.id][1] = res.message_id
                            messages_texts[chat.id][1] = res.text
                        })
                        .catch(err => {console.log('1 ' + err)})
                    }
                    
                    
            }
        }

    
    for (let i = 0; i < userProgrammesList[chat.id].length; i++){
        if (query.data === userProgrammesList[chat.id][i]){
            //console.log('–ö–Ω–æ–ø–∫—É –Ω–∞—à–ª–∏')
            userProgram[chat.id] = userProgrammesList[chat.id][i]
         // user_mailingdata[chat.id][1] = userProgrammesList[chat.id][i]
            let program_photo_link = []
            program_photo_link[chat.id] = ''
            let program_description = []
            program_description[chat.id] = ''
            let program_peopleamount = []
            program_peopleamount[chat.id] = ''
            let program_trener_link = []
            program_trener_link[chat.id] = ''
            let program_trener_name = []
            program_trener_name[chat.id] = ''
            let program_name = []
            program_name[chat.id] = ''
            
            bot.deleteMessage(chat.id, message_id).then(() => {
                let prg_info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/')
                prg_info.get().then((snapshot) =>
                {
                    program_photo_link[chat.id] = snapshot.val().photo_link

                    program_description[chat.id] = snapshot.val().description
                    program_name[chat.id] = snapshot.val().name
                    program_trener_link[chat.id] = snapshot.val().trener_link
                    program_trener_name[chat.id] = snapshot.val().trener_name

                    program_peopleamount[chat.id] = snapshot.val().people_in_group

                    let pamount_values = []
                    pamount_values[chat.id] = []

                    if (program_peopleamount[chat.id] !== 'unlimited') {
                        pamount_values[chat.id] = program_peopleamount[chat.id].split('/')
                        pamount_values[chat.id][0] = parseInt(pamount_values[chat.id][0])
                        pamount_values[chat.id][1] = parseInt(pamount_values[chat.id][1])
                    }

                    let types_info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/types/')
                    types_info.get().then((snapshot) => {
                        let types_amount = []
                        types_amount[chat.id] = Object.keys(snapshot.val())
                        types_keyboard[chat.id] = [[],[], []]
                        types_keyboard[chat.id][0][0] = 
                        {
                            text: anotherprogram_text,
                            callback_data: anotherprogram_text
                        }
                        console.log(Object.keys(snapshot.val()))
                        for (let i = 0; i < types_amount[chat.id].length; i++){
                            let info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/types/' + types_amount[chat.id][i])
                            info.get().then((result) => {
                                temp_program_types[chat.id][i] = [result.val().period, result.val().price, result.val().time, result.val().type_name, result.val().visits, result.val().is_freeze, program_name[chat.id]] 
                                console.log(temp_program_types[chat.id][i])
                                if (pamount_values[chat.id][0] < pamount_values[chat.id][1] || program_peopleamount[chat.id] === 'unlimited') {
                                    types_keyboard[chat.id][1][i] = 
                                    {
                                        text: result.val().type_name,
                                        callback_data: choosetype_callback + result.val().type_name
                                    }
                                }
                                

                                if (i === types_amount[chat.id].length - 1){
                                    temp_progtypes_text[chat.id] = `<b>` + program_name[chat.id] + `</b>
` + program_description[chat.id]
                                    if (program_trener_link[chat.id] !== 'unknown' && program_trener_name[chat.id] !== 'unknown') {
                                        temp_progtypes_text[chat.id] += `
                                            
<b>–¢—Ä–µ–Ω–µ—Ä: </b><a href="`+ program_trener_link[chat.id] +`">`+ program_trener_name[chat.id] + `</a>` 
                                    }
                                    if (program_trener_link[chat.id] === 'unknown' && program_trener_name[chat.id] !== 'unknown') {
                                        temp_progtypes_text[chat.id] += `
                                            
<b>–¢—Ä–µ–Ω–µ—Ä: </b>`+ program_trener_name[chat.id] 
                                    }

                                    if (program_peopleamount[chat.id] !== 'unlimited'){
                                        temp_progtypes_text[chat.id] += `
                                    
<b>–ó–∞–ø–∏—Å–∞–ª–∏—Å—å:</b> ` + program_peopleamount[chat.id]
                                    }

                                    

                                    if (pamount_values[chat.id][0] < pamount_values[chat.id][1] ||  program_peopleamount[chat.id] === 'unlimited') {
                                        temp_progtypes_text[chat.id] += `
                                    
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã: `
                                    }

                                    if (pamount_values[chat.id][0] >= pamount_values[chat.id][1]) {
                                        favourite_program[chat.id] = myprogram_type[chat.id][6]
                                        /* if (waitlist[chat.id] === ''){
                                            waitlist[chat.id] = myprogram_type[chat.id][6]
                                            let wait_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/mailing/waitlist/programmes/' + myprogram_type[chat.id][6])
                                            wait_data.get().then((result) => {
                                                let local_waitlist = result.val()
                                                let lists_array = local_waitlist.split(',')
                                                for(let i = 0; i<lists_array; i++){
                                                    if (lists_array[i] === chat.id){
                                                        break
                                                    }
                                                    if (i === lists_array - 1 && lists_array[i] !== chat.id){
                                                        if (local_waitlist = '0'){
                                                            local_waitlist = (chat.id).toString()
                                                        }
                                                        if (local_waitlist !== '0'){
                                                            local_waitlist += ',' + chat.id
                                                        }
    
                                                        let updates = {}
                                                        updates['Fitness/'+club_name_fb[chat.id]+'/mailing/waitlist/programmes/' + myprogram_type[chat.id][6]] = local_waitlist
                                                        fb.database().ref().update(updates)
                                                    }
                                                }
                                            })
                                        } */
                                        
                                        temp_progtypes_text[chat.id] += `
                                    
<i>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã</i> `
                                        types_keyboard[chat.id][1][0] = 
                                        {
                                            text: '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',
                                            url: 'https://t.me/' + support_username[chat.id]
                                        }
                                    }
                                    
                                    if (program_photo_link[chat.id] !== 'unknown'){
                                        bot.sendPhoto(chat.id, program_photo_link[chat.id], {
                                            parse_mode: 'HTML',
                                            caption: temp_progtypes_text[chat.id],
                                            reply_markup:{
                                                inline_keyboard:types_keyboard[chat.id]
                                            }
                                        })
                                        .then(res => {
                                            messages_todelete[chat.id][0] = res.message_id
                                            messages_texts[chat.id][0] = res.caption
                                        })
                                        .catch(err => {console.log(err)})
                                    }

                                    if (program_photo_link[chat.id] === 'unknown'){
                                        bot.sendMessage(chat.id, temp_progtypes_text[chat.id], {
                                            parse_mode: 'HTML',
                                            reply_markup:{
                                                inline_keyboard:types_keyboard[chat.id]
                                            }
                                        })
                                        .then(res => {
                                            messages_todelete[chat.id][0] = res.message_id
                                            messages_texts[chat.id][0] = res.caption
                                        })
                                        .catch(err => {console.log(err)})
                                    }
                                }
                            })
                        }
                    })

                }).catch((err) => {console.log(err)})
            })
        }
    }

        for (let i = 0; i < userTreners[chat.id].length; i++){
            if (query.data === userTreners[chat.id][i]){
                userTrener[chat.id] = userTreners[chat.id][i]

                bot.deleteMessage(chat.id, message_id).then(() => {
                    let prg_info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/treners/' + userTreners[chat.id][i])
                    prg_info.get().then((snapshot) =>
                    {
                        let description = snapshot.val().description
                        let name = snapshot.val().name
                        let social_link = snapshot.val().social_link
                        let photo_link = snapshot.val().photo
                        
                        const texty = `<b>`+ name +`</b>
` + description

                        if (photo_link !== 'unknown'){
                            bot.sendPhoto(chat.id, photo_link, {
                                parse_mode: 'HTML',
                                caption: texty,
                                reply_markup:{
                                    inline_keyboard:[
                                        [{
                                            text: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
                                            url: social_link
                                        }],
                                        [{
                                            text: backtotreners_text[0],
                                            callback_data: backtotreners_text[1]
                                        }]
                                    ]
                                }
                            })
                            .then(res => {
                                messages_todelete[chat.id][0] = res.message_id
                                messages_texts[chat.id][0] = res.caption
                            })
                            .catch(err => {console.log(err)})
                        }
                        
                        if (photo_link === 'unknown'){
                            bot.sendMessage(chat.id, texty, {
                                parse_mode: 'HTML',
                                reply_markup:{
                                    inline_keyboard:[
                                        [{
                                            text: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
                                            url: social_link
                                        }],
                                        [{
                                            text: backtotreners_text[0],
                                            callback_data: backtotreners_text[1]
                                        }]
                                    ]
                                }
                            })
                            .then(res => {
                                messages_todelete[chat.id][0] = res.message_id
                                messages_texts[chat.id][0] = res.caption
                            })
                            .catch(err => {console.log(err)})
                        }
    
                    }).catch((err) => {console.log(err)})
                })
            }
        }

    if (query.data === anotherprogram_text){
        userProgram[chat.id] = ''
      //  user_mailingdata[chat.id][1] = ''
      //  user_mailingdata[chat.id][2] = ''
//        user_mailingdata[chat.id][3] = ''
        bot.deleteMessage(chat.id, messages_todelete[chat.id][0]).catch(err => {console.log(err)})
        .then(() => {messages_todelete[chat.id][0] = undefined})
        if (messages_todelete[chat.id][1] !== null){
            console.log('!!')
            bot.deleteMessage(chat.id, messages_todelete[chat.id][1]).catch(err => {console.log(err)})
            .then(() => {messages_todelete[chat.id][1] = undefined})
        }
        keyboards.ProgramKeyboard(programmes_keyboard[chat.id], userProgrammesList[chat.id], userCategory[chat.id], fb, bot, chat, message_id, anothercategory_text, chooseprogramme_text, club_name_fb[chat.id])
        
    }
    if (query.data === backtotreners_text[1]){
        userTrener[chat.id] = ''
        bot.deleteMessage(chat.id, messages_todelete[chat.id][0]).catch(err => {console.log(err)})
        .then(() => {messages_todelete[chat.id][0] = undefined})
        if (messages_todelete[chat.id][1] !== null){
            console.log('!!')
            bot.deleteMessage(chat.id, messages_todelete[chat.id][1]).catch(err => {console.log(err)})
            .then(() => {messages_todelete[chat.id][1] = undefined})
        }
        keyboards.TrenersKeyboard(trener_keyboard[chat.id], userTreners[chat.id], fb, bot, chat.id, backtomain_text, choosetrener_text, club_name_fb[chat.id])        
    }
    if (query.data === fillabonement_text + myprogram_type[chat.id][3]){
        bot.editMessageText(messages_texts[chat.id][1], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1]
        })
        CheckUser(chat.id, chat.first_name, chat.id, message_id)
    }
    if (query.data === backtofillinginfo_text[1]){
        bot.deleteMessage(chat.id, add_info_msg[chat.id])
        CheckUser(chat.id, chat.first_name, chat.id, message_id)
    }
    if (query.data === backtoprogramme_text[1]){
        console.log('14^ '  + add_info_msg[chat.id])
        bot.deleteMessage(chat.id, messages_todelete[chat.id][2]).catch(err => {console.log('124 ' + err)})
        bot.editMessageText(messages_texts[chat.id][1], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: types_keyboard[chat.id]
            }
        })
    }
    if (query.data === backtochoosepaingmethod_text[1]){
        user_payingmethod[chat.id] = ''
        bot.editMessageText(dopblank_text, {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtofillinginfo_text[0],
                        callback_data: backtofillinginfo_text[1]
                    }],
                    [{
                        text: user_payingmethods[0][0],
                        callback_data: user_payingmethods[0][1]
                    },
                    {
                        text: user_payingmethods[1][0],
                        callback_data: user_payingmethods[1][1]
                    }]
                ]
            }
        }).then(() => {
            add_info_msg[chat.id] = message_id
            console.log('savedmessage = ' + add_info_msg[chat.id] + ', ' + message_id)
        })
    }
    if (query.data === user_payingmethods[0][1]){
        user_payingmethod[chat.id] = user_payingmethods[0][0]
        let finaltext = card_instructions_text + `

<b>üßæ –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç:</b> 
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + myprogram_type[chat.id][6] + `
‚îú –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ` + myprogram_type[chat.id][0] + ` –º–µ—Å. 
‚îî –¶–µ–Ω–∞: ` + myprogram_type[chat.id][1] + ` —Ç–µ–Ω–≥–µ
                
<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>`
        
        if (card_data[chat.id][0] !== 0 && card_data[chat.id][0] !== undefined && card_data[chat.id][0] !== 'unknown') {
            finaltext += `
‚îú KASPI –Ω–æ–º–µ—Ä: ` + card_data[chat.id][0]
        }
        
        if (card_data[chat.id][1] !== 0 && card_data[chat.id][1] !== undefined && card_data[chat.id][1] !== 'unknown'){
            finaltext += `
‚îú –ö–∞—Ä—Ç–∞: ` + card_data[chat.id][1]
        }
        
        finaltext += `
‚îî –§–ò–û: ` + card_data[chat.id][2]

        bot.editMessageText(finaltext, {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtochoosepaingmethod_text[0],
                        callback_data: backtochoosepaingmethod_text[1]
                    }],
                    [{
                        text: ihavepaid_text[0],
                        callback_data: dataiscorrect2_text
                    }]
                ]
            }
        })
    }
    if (query.data === user_payingmethods[1][1]){
        user_payingmethod[chat.id] = user_payingmethods[1][0]
        let finaltext = cash_instructions_text + `

<b>üßæ –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç:</b> 
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + myprogram_type[chat.id][6] + `
‚îú –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ` + myprogram_type[chat.id][0] + ` –º–µ—Å. 
‚îî –¶–µ–Ω–∞: ` + myprogram_type[chat.id][1] + ` —Ç–µ–Ω–≥–µ`

        bot.editMessageText(finaltext, {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtochoosepaingmethod_text[0],
                        callback_data: backtochoosepaingmethod_text[1]
                    }],
                    [{
                        text: ihavepaid_text[0],
                        callback_data: ihavepaid_text[1]
                    }]
                ]
            }
        })
    }
    if (query.data === dataiscorrect2_text){
        bot.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É?', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtochoosepaingmethod_text[0],
                        callback_data: backtochoosepaingmethod_text[1]
                    }],
                    [{
                        text: '–î–∞, —è –æ–ø–ª–∞—Ç–∏–ª',
                        callback_data: ihavepaid_text[1]
                    }]
                ]
            }
        })
    }
    if (query.data === ihavepaid_text[1]){
        favourite_program[chat.id] = myprogram_type[chat.id][6]
        //–°–æ–∑–¥–∞–µ–º –∞–∫–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤
        if (userstatus[chat.id] !== 'unregistered'){
            bot.deleteMessage(chat.id, message_id).then(() => 
            {
                abonement_status[chat.id] = abonement_statuses_text[0]
                bot.sendChatAction(chat.id, 'upload_document')
                .catch(err => {console.log('24 ' + err)})
                
                let updates = {};
                
                let stringy = programme_pas[chat.id]
                stringy = stringy.split('/')
                
                if (stringy[4] === userCategory[chat.id] && stringy[6] === userProgram[chat.id]){
                    abonements_bill_topic = abonement_bill_topic_names[3]
                }

                if (stringy[4] !== userCategory[chat.id] || stringy[6] !== userProgram[chat.id]){
                    abonements_bill_topic = abonement_bill_topic_names[0]
                }

                //abonements_bill_topic = abonement_bill_topic_names[0]
                abonemets_bill_client_info = `

<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

`
    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + myprogram_type[chat.id][6] + `
‚îú –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ` + myprogram_type[chat.id][0] + ` –º–µ—Å.
‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: ` + myprogram_type[chat.id][1] + `  —Ç–µ–Ω–≥–µ.

`

if (myprogram_type[chat.id][2] === 'unlimited'){
    abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
}

if (myprogram_type[chat.id][2] !== 'unlimited'){
    if (myprogram_type[chat.id][2] === 'morning'){
        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + morning_time[chat.id][0][0] + `:` + morning_time[chat.id][0][1] + ` –¥–æ ` + morning_time[chat.id][1][0] + `:` + morning_time[chat.id][1][1] 
    }

    if (myprogram_type[chat.id][2] === 'evening'){
        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + evening_time[chat.id][0][0] + `:` + evening_time[chat.id][0][1] + ` –¥–æ ` + evening_time[chat.id][1][0] + `:` + evening_time[chat.id][1][1] 
    }
}

if (myprogram_type[chat.id][4] === 'unlimited'){
    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
}

if (myprogram_type[chat.id][4] !== 'unlimited'){
    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + myprogram_type[chat.id][4]
}

if (myprogram_type[chat.id][5] === false){
    abonements_bill_order_info += `
‚îî –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏`
}

if (myprogram_type[chat.id][5] !== false){
    abonements_bill_order_info += `
‚îî –ö–æ–ª-–≤–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫: ` + myprogram_type[chat.id][5] + ` –¥–Ω–µ–π.`
}

    console.log('order_date! ' + order_date[chat.id])
    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info
    //console.log('last message id: ' + query.message.message_id)
    programme_pas[chat.id] = 'Fitness/' + club_name_fb[chat.id] + '/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id]
    let username = []
    username[chat.id] = "undefined"
    if (chat.username != undefined) username[chat.id] = chat.username.toString()

    if (stringy[4] === userCategory[chat.id] && stringy[6] === userProgram[chat.id]){
        user_mailingdata[chat.id][0] = userCategory[chat.id]
        user_mailingdata[chat.id][1] = userProgram[chat.id]
        user_mailingdata[chat.id][2] = myprogram_type[chat.id][2]
        user_mailingdata[chat.id][3] = myprogram_type[chat.id][0]
        let abone = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id + '/abonement');
        abone.get().then((snapshot) => {
            let date = new Date()
            let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
            let timeOfffset = 6 //Astana GMT +6
            let time_now = new Date(utcTime + (3600000 * timeOfffset))

            time_now.setMonth(time_now.getMonth() +  myprogram_type[chat.id][0], date.getDate())
            updates['Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id + '/abonement/period'] = myprogram_type[chat.id][0]
            //updates['Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id + '/abonement/end_date'] = time_now.getTime()
            updates['Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id + '/abonement/abonement_status'] = abonement_statuses_text[0]
            updates['Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id + '/programme_pas'] = programme_pas[chat.id]

            fb.database().ref().update(updates)
            
            order_name[chat.id] = 'Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id
            console.log('ORDER NAME: ' + order_name[chat.id])    
            userstatus[chat.id] = 'registered'
            StartCheckingOrder(chat.id)

            let pp_group = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/people_in_group');
            pp_group.get().then((snapshot) => {
                if (snapshot.exists() && snapshot.val() !== 'unlimited'){
                    let tmp_ar = snapshot.val()
                    tmp_ar = tmp_ar.split('/')
                    tmp_ar = (parseInt(tmp_ar[0]) - 1).toString() + '/' + tmp_ar[1]
                    console.log('–î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–û–ì–û –£–ß–ê–°–¢–ù–ò–ö–ê –ü–†–û–ì–†–ê–ú–ú–´. –¢–ï–ü–ï–†–¨: tmp_ar')
                    let updates2 = {}
                    updates2['Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/people_in_group'] = tmp_ar
                    fb.database().ref().update(updates2)
                }
            })
        })
    }

    if (stringy[4] !== userCategory[chat.id] || stringy[6] !== userProgram[chat.id]){
        DeleteMailingData(chat.id)
        AddMailingData(chat.id, true)
        let newabonement = 
        {
            name: myprogram_type[chat.id][6],
            time: myprogram_type[chat.id][2],
            visits: myprogram_type[chat.id][4],
            freeze_amount: myprogram_type[chat.id][5],
            period: myprogram_type[chat.id][0],
            price: myprogram_type[chat.id][1],
            freeze_start: '0',
            start_date: '0',
            end_date: '0',
            abonement_status: abonement_statuses_text[0],
            activator_name: 'unknown',
            activator_id: 'unknown',
            paying_method: user_payingmethod[chat.id]
        }
        updates['Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id + '/abonement'] = newabonement
        updates['Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id + '/favourite_program'] = myprogram_type[chat.id][6]
        updates['Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id + '/programme_pas'] = programme_pas[chat.id]
        fb.database().ref().update(updates)
        order_name[chat.id] = 'Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id
        console.log('ORDER NAME: ' + order_name[chat.id])

        let pp_group = fb.database().ref(programme_pas[chat.id] + '/people_in_group');
            pp_group.get().then((snapshot) => {
                if (snapshot.exists() && snapshot.val() !== 'unlimited'){
                    let tmp_ar = snapshot.val()
                    tmp_ar = tmp_ar.split('/')
                    tmp_ar = (parseInt(tmp_ar[0]) - 1).toString() + '/' + tmp_ar[1]
                    console.log('–î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–û–ì–û –£–ß–ê–°–¢–ù–ò–ö–ê –ü–†–û–ì–†–ê–ú–ú–´. –¢–ï–ü–ï–†–¨: tmp_ar')
                    let updates2 = {}
                    updates2[programme_pas[chat.id] + '/people_in_group'] = tmp_ar
                    fb.database().ref().update(updates2)
                }
            })
    
        userstatus[chat.id] = 'registered'
        StartCheckingOrder(chat.id)
    }

    //AddMailingData()

    let motherbase = fb.database().ref('Motherbase/clients/' + chat.id)
    motherbase.get().then((result) => {
        let motherbase_update = {}
        if (result.exists()){
            let fintesspart_user = {
                favourite_program: myprogram_type[chat.id][6],
                time: myprogram_type[chat.id][2],
                price: myprogram_type[chat.id][1],
                start_date: '0',
                end_date: '0',
                abonement_status: abonement_statuses_text[0],
                paying_method: user_payingmethod[chat.id]
            }

            motherbase_update['Motherbase/clients/' + chat.id + '/fitness'] = fintesspart_user
        
        }
        fb.database().ref().update(motherbase_update)
    })

    console.log('delivery_chat: ' + operators_chat[chat.id])
    let cr_chat = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/chats/');
    cr_chat.get().then((snapshot) => {
        operators_chat[chat.id] = snapshot.val().operators_chat
        console.log('IT WORKS: ' + operators_chat[chat.id])

        bot.sendMessage(operators_chat[chat.id], abonements_bill, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard:[
                    [{
                        text: '‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç',
                        callback_data: accept_order_callback + chat.id
                    }],
                    [{
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: refuse_order_callback + chat.id
                    }]
                ]
            }
        }).then(() => {
            bot.sendMessage(chat.id, '‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –Ω–µ–µ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫', {
                
            })
        })
    })
    

    ////////////////////////////////////////////////////////////////////////

                //console.log('Date: ' + date_now.getHours() + ':' + date_now.getMinutes())
            })
        }

        else {
            bot.deleteMessage(chat.id, message_id).then(() => 
            {
                abonement_status[chat.id] = abonement_statuses_text[0]
                bot.sendChatAction(chat.id, 'upload_document')
                .catch(err => {console.log('24 ' + err)})
                
                let updates = {};

/*                 let date = new Date()
                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                let timeOfffset = 6 //Astana GMT +6
                let Astana_date = new Date(utcTime + (3600000 * timeOfffset))
                let date_now = Astana_date.getDate() + '_' + (Astana_date.getMonth() + 1) + '_' + Astana_date.getFullYear() + '__' + Astana_date.getHours() + '_' + Astana_date.getMinutes()                
 */
               

                ////////////////////–û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê///////////////////////////////////                 
    
/* let minutes = Astana_date.getMinutes()
if (minutes < 10) minutes = '0' + minutes
let hours = Astana_date.getHours()
if (hours < 10) hours = '0' + hours
let visible_date = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date) + ' ' +  hours + ':' + minutes + ', ' + Astana_date.getDate() + '.' + (Astana_date.getMonth() + 1)
*/

if (programdiscount[chat.id] !== 0 &&  programdiscount[chat.id] !== undefined) {
    abonements_bill_topic = `–ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –ø—Ä–æ–±–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!
    
`
    abonements_bill_topic += abonement_bill_topic_names[0]
    let anal = fb.database().ref('Fitness/' + club_name_fb[chat.id] + '/analytics')
    anal.get().then((an) =>{
        let mini_update = {}
        mini_update['Fitness/' + club_name_fb[chat.id] + '/analytics/current_data/audience/conversions/converted'] = (an.val().current_data.audience.conversions.converted + 1)
        mini_update['Fitness/' + club_name_fb[chat.id] + '/analytics/alltime_data/net_conversions'] = (an.val().alltime_data.net_conversions + 1)
        fb.database().ref().update(mini_update)
    })
}

if (programdiscount[chat.id] === 0 ||  programdiscount[chat.id] === undefined) {
    abonements_bill_topic = abonement_bill_topic_names[0]
}
    abonemets_bill_client_info = `

<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

`
    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + myprogram_type[chat.id][6] + `
‚îú –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ` + myprogram_type[chat.id][0] + ` –º–µ—Å.
‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: ` + myprogram_type[chat.id][1] + `  —Ç–µ–Ω–≥–µ.`

if (programdiscount[chat.id] !== 0 &&  programdiscount[chat.id] !== undefined) {
    abonements_bill_order_info += ` (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ `+ programdiscount[chat.id] +`%)
    
`
}

if (programdiscount[chat.id] === 0 ||  programdiscount[chat.id] === undefined){
    abonements_bill_order_info += `

`
}

if (myprogram_type[chat.id][2] === 'unlimited'){
    abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
}

if (myprogram_type[chat.id][2] !== 'unlimited'){
    if (myprogram_type[chat.id][2] === 'morning'){
        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + morning_time[chat.id][0][0] + `:` + morning_time[chat.id][0][1] + ` –¥–æ ` + morning_time[chat.id][1][0] + `:` + morning_time[chat.id][1][1] 
    }

    if (myprogram_type[chat.id][2] === 'evening'){
        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + evening_time[chat.id][0][0] + `:` + evening_time[chat.id][0][1] + ` –¥–æ ` + evening_time[chat.id][1][0] + `:` + evening_time[chat.id][1][1] 
    }
}

if (myprogram_type[chat.id][4] === 'unlimited'){
    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
}

if (myprogram_type[chat.id][4] !== 'unlimited'){
    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + myprogram_type[chat.id][4]
}

if (myprogram_type[chat.id][5] === false){
    abonements_bill_order_info += `
‚îî –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏`
}

if (myprogram_type[chat.id][5] !== false){
    abonements_bill_order_info += `
‚îî –ö–æ–ª-–≤–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫: ` + myprogram_type[chat.id][5] + ` –¥–Ω–µ–π.`
}

    user_mailingdata[chat.id][0] = userCategory[chat.id]
    user_mailingdata[chat.id][1] = userProgram[chat.id]
    user_mailingdata[chat.id][2] = myprogram_type[chat.id][2]
    user_mailingdata[chat.id][3] = myprogram_type[chat.id][0]
    console.log('order_date! ' + order_date[chat.id])
    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info
    //console.log('last message id: ' + query.message.message_id)
    programme_pas[chat.id] = 'Fitness/' + club_name_fb[chat.id] + '/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id]
    let username = []
    username[chat.id] = "undefined"
    if (chat.username != undefined) username[chat.id] = chat.username.toString()

    let newuser = {
        coins: user_coins[chat.id],
        email: user_email[chat.id],
        favourite_program: favourite_program[chat.id],
        id: chat.id,
        name: user_name[chat.id],
        phone: user_phone[chat.id],
        username: username[chat.id],
        abonements_bought: abonements_bought[chat.id],
        times_came: user_timescame[chat.id],
        bill_text: abonements_bill,
        bill_msg: 0,
        programme_pas: programme_pas[chat.id],
        abonement: {
            name: myprogram_type[chat.id][6],
            time: myprogram_type[chat.id][2],
            visits: myprogram_type[chat.id][4],
            freeze_amount: myprogram_type[chat.id][5],
            period: myprogram_type[chat.id][0],
            price: myprogram_type[chat.id][1],
            freeze_start: '0',
            start_date: '0',
            end_date: '0',
            abonement_status: abonement_statuses_text[0],
            activator_name: 'unknown',
            activator_id: 'unknown',
            paying_method: user_payingmethod[chat.id]
        }
    }

    order_name[chat.id] = 'Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id
    console.log('ORDER NAME: ' + order_name[chat.id])

    userstatus[chat.id] = 'registered'
    updates[order_name[chat.id]] = newuser

    fb.database().ref().update(updates)
    StartCheckingOrder(chat.id)
    AddMailingData(chat.id, true)

    let motherbase = fb.database().ref('Motherbase/clients/' + chat.id)
    motherbase.get().then((result) => {
        let motherbase_update = {}
        if (result.exists()){
            let fintesspart_user = {
                favourite_program: favourite_program[chat.id],
                time: myprogram_type[chat.id][2],
                price: myprogram_type[chat.id][1],
                start_date: '0',
                end_date: '0',
                abonement_status: abonement_statuses_text[0],
                paying_method: user_payingmethod[chat.id]
            }
            motherbase_update['Motherbase/clients/' + chat.id + '/name'] = user_name[chat.id]
            motherbase_update['Motherbase/clients/' + chat.id + '/phone'] = user_phone[chat.id]
            motherbase_update['Motherbase/clients/' + chat.id + '/username'] = username[chat.id]

            motherbase_update['Motherbase/clients/' + chat.id + '/fitness'] = fintesspart_user
        
        }
        else {
            let newmotherbase_user = {
                email: user_email[chat.id],           
                id: chat.id,
                name: user_name[chat.id],
                phone: user_phone[chat.id],
                username: username[chat.id],
                adress: 'unknown',
                sex: 'unknown',
                age: 'unknown',
                soc_stat: 'unknown',
                fitness: {
                    favourite_program: favourite_program[chat.id],
                    time: myprogram_type[chat.id][2],
                    price: myprogram_type[chat.id][1],
                    start_date: '0',
                    end_date: '0',
                    abonement_status: abonement_statuses_text[0],
                    paying_method: user_payingmethod[chat.id]
                }
            }
            motherbase_update['Motherbase/clients/' + chat.id] = newmotherbase_user
        }
        fb.database().ref().update(motherbase_update)
    })

    console.log('delivery_chat: ' + operators_chat[chat.id])
    let cr_chat = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/chats/');
    cr_chat.get().then((snapshot) => {
        operators_chat[chat.id] = snapshot.val().operators_chat
        console.log('IT WORKS: ' + operators_chat[chat.id])

        bot.sendMessage(operators_chat[chat.id], abonements_bill, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard:[
                    [{
                        text: '‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç',
                        callback_data: accept_order_callback + chat.id
                    }],
                    [{
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: refuse_order_callback + chat.id
                    }]
                ]
            }
        }).then(() => {
            bot.sendMessage(chat.id, abonementrequest_sended)
        })
    })
    

    ////////////////////////////////////////////////////////////////////////

                //console.log('Date: ' + date_now.getHours() + ':' + date_now.getMinutes())
            })
        }
    }
    if (query.data === accepttraining_text[1]){
        bot.deleteMessage(chat.id, message_id)
        StartTraining(chat.id, message_id)
    }
    if (query.data === refusetraining_text[1]){
        for (let i=0; i<100; i++){
            bot.deleteMessage(chat.id, message_id - i).catch(err => {
                //console.log(err)
            })
        }
        bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
        .then(() => {
            anotherpoint_multiple[chat.id] = 2
            bot.sendMessage(chat.id, hellomessage_text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboards.main_menu_keyboard
                }
            })
            .then(() => {
                IdentifyUser(chat.id, false)
            })
        })
    }
    if (query.data === anotherfood_text2){
        /* bot.editMessageText(choosefood_text,
            {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_id, //!!!! –ù–ï –¢–û–¢ –ú–ï–°–°–ï–î–ñ ID –£–î–ê–õ–Ø–ï–ú
                reply_markup:{
                    inline_keyboard:foodlist_keyboard[chat.id]
                }
            }) */
            userProgram[chat.id] = ''
            keyboards.ProgramKeyboard(programmes_keyboard[chat.id], userProgrammesList[chat.id], foodlist_count[chat.id], userCategory[chat.id], fb, bot, chat, message_id, anothercategory_text, query, chooseprogramme_text, club_name_fb[chat.id])

        //bot.deleteMessage(chat.id, message_id - 1)
    }
    if (query.data === addto_basket_text){
        bot.editMessageText(text, {
            chat_id: chat.id,
            message_id: message_id
        }) //—É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–ª—é–¥–∞
        for (let i = 0; i < basket[chat.id].length; i++){
            console.log('!!!! ' + basket[chat.id][i][0] + ' ' + userProgrammesList[chat.id][userProgram[chat.id]])
            if (basket[chat.id][i][0] === userProgrammesList[chat.id][userProgram[chat.id]]){

                bot.sendMessage(chat.id, chooseamountoffood_text + basket[chat.id][i][1] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (basket[chat.id][i][1] * temp_program_types[chat.id] + '—Ç–≥.'), {
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: decrease_foodcount,
                                callback_data: decrease_foodcount
                            },
                            {
                                text: increase_foodcount,
                                callback_data: increase_foodcount
                            }],
                            [{
                                
                                text: dont_addto_basket_text2,
                                callback_data: dont_addto_basket_text2
                            },
                            {
                                text: addto_basket_text2,
                                callback_data: addto_basket_text2
                            }]
                        ]
                    }
                })
                break
            }
            if (i === basket[chat.id].length - 1 && basket[chat.id][i][0] !== userProgrammesList[chat.id][userProgram[chat.id]]){
                //–∫–æ–≥–¥–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞...
                console.log('ALARM2: ' + i + ' ' + basket[chat.id].length)
                /*if (i === basket[chat.id].length){
                    bot.sendMessage(chat.id, chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_food_price[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_food_price[chat.id] + '—Ç–≥.'), {
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: decrease_foodcount,
                                    callback_data: decrease_foodcount
                                },
                                    {
                                        text: increase_foodcount,
                                        callback_data: increase_foodcount
                                    }],
                                [{
                                    text: addto_basket_text2,
                                    callback_data: addto_basket_text2
                                },
                                    {
                                        text: dont_addto_basket_text2,
                                        callback_data: dont_addto_basket_text2
                                    }]
                            ]
                        }
                    })
                }*/
                temp_foodamount[chat.id] = 1
                bot.sendMessage(chat.id, chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id] + '—Ç–≥.'), {
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: decrease_foodcount,
                                callback_data: decrease_foodcount
                            },
                                {
                                    text: increase_foodcount,
                                    callback_data: increase_foodcount
                                }],
                            [{
                                text: dont_addto_basket_text2,
                                callback_data: dont_addto_basket_text2
                            },
                            {
                                text: addto_basket_text2,
                                callback_data: addto_basket_text2
                            }]
                        ]
                    }
                })
            }
        }
        if (basket[chat.id].length === 0){
            //–∫–æ–≥–¥–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞...
            bot.sendMessage(chat.id, chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id] + '—Ç–≥.'), {
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: decrease_foodcount,
                            callback_data: decrease_foodcount
                        },
                            {
                                text: increase_foodcount,
                                callback_data: increase_foodcount
                            }],
                        [{
                            text: dont_addto_basket_text2,
                            callback_data: dont_addto_basket_text2
                        },
                        {
                            text: addto_basket_text2,
                            callback_data: addto_basket_text2
                        }]
                    ]
                }
            })
        }
    }
    //—Ç—É—Ç –º—ã –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∞–≤–ª—è–µ–º –∫–æ–ª-–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
    if (query.data === increase_foodcount || query.data === decrease_foodcount){
        console.log(decrease_foodcount + ' ' + increase_foodcount + ' ' + dont_addto_basket_text2 + ' ' + addto_basket_text2)
        if (query.data === increase_foodcount){
            for (let i = 0; i < basket[chat.id].length; i++){
                console.log('226 ' + basket[chat.id][i][0] + ' ' + userProgrammesList[chat.id][userProgram[chat.id]])
                if (basket[chat.id][i][0] === userProgrammesList[chat.id][userProgram[chat.id]]){
                    basket[chat.id][i][1]++
                    console.log('increasing existing food postion +1 ' + basket[chat.id][i][1])
                    bot.editMessageText(chooseamountoffood_text + basket[chat.id][i][1] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (basket[chat.id][i][1] * temp_program_types[chat.id]) + '—Ç–≥.', {
                        chat_id: chat.id,
                        message_id: message_id,
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: decrease_foodcount,
                                    callback_data: decrease_foodcount
                                },
                                    {
                                        text: increase_foodcount,
                                        callback_data: increase_foodcount
                                    }],
                                [{
                                    text: dont_addto_basket_text2,
                                    callback_data: dont_addto_basket_text2
                                },
                                {
                                    text: addto_basket_text2,
                                    callback_data: addto_basket_text2
                                }]
                            ]
                        }
                    })
                    break
                }
                if (i === basket[chat.id].length - 1 && basket[chat.id][i][0] !== userProgrammesList[chat.id][userProgram[chat.id]]){
                    console.log('227 ' + basket[chat.id][i][0] + ' ' + userProgrammesList[chat.id][userProgram[chat.id]])
                    temp_foodamount[chat.id]++
                        bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id]) + '—Ç–≥.', {
                            chat_id: chat.id,
                            message_id: message_id,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: decrease_foodcount,
                                        callback_data: decrease_foodcount
                                    },
                                        {
                                            text: increase_foodcount,
                                            callback_data: increase_foodcount
                                        }],
                                    [{
                                        text: dont_addto_basket_text2,
                                        callback_data: dont_addto_basket_text2
                                    },
                                    {
                                        text: addto_basket_text2,
                                        callback_data: addto_basket_text2
                                    }]
                                ]
                            }
                        })
                        break
                }
            }
            if (basket[chat.id].length === 0){
                temp_foodamount[chat.id]++
                bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id]) + '—Ç–≥.', {
                    chat_id: chat.id,
                    message_id: message_id,
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: decrease_foodcount,
                                callback_data: decrease_foodcount
                            },
                                {
                                    text: increase_foodcount,
                                    callback_data: increase_foodcount
                                }],
                            [{
                                text: dont_addto_basket_text2,
                                callback_data: dont_addto_basket_text2
                            },
                            {
                                text: addto_basket_text2,
                                callback_data: addto_basket_text2
                            }]
                        ]
                    }
                })
            }
        }
        if (query.data === decrease_foodcount){
            console.log('descrease')
            for (let i = 0; i < basket[chat.id].length; i++){
                if (basket[chat.id][i][0] === userProgrammesList[chat.id][userProgram[chat.id]]){
                    if (basket[chat.id][i][1] > 1){
                        basket[chat.id][i][1]--
                        bot.editMessageText(chooseamountoffood_text + basket[chat.id][i][1] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (basket[chat.id][i][1] * temp_program_types[chat.id]) + '—Ç–≥.', {
                            chat_id: chat.id,
                            message_id: message_id,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: decrease_foodcount,
                                        callback_data: decrease_foodcount
                                    },
                                        {
                                            text: increase_foodcount,
                                            callback_data: increase_foodcount
                                        }],
                                    [{
                                        text: dont_addto_basket_text2,
                                        callback_data: dont_addto_basket_text2
                                    },
                                    {
                                        text: addto_basket_text2,
                                        callback_data: addto_basket_text2
                                    }]
                                ]
                            }
                        })
                    }
                }
                else{
                    //–∫–æ–≥–¥–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞...
                    /*if (i === basket[chat.id].length){
                        if (temp_foodamount[chat.id] > 1){
                            temp_foodamount[chat.id]--
                            bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_food_price[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_food_price[chat.id]) + '—Ç–≥.', {
                                chat_id: chat.id,
                                message_id: message_id,
                                reply_markup:{
                                    inline_keyboard:[
                                        [{
                                            text: decrease_foodcount,
                                            callback_data: decrease_foodcount
                                        },
                                            {
                                                text: increase_foodcount,
                                                callback_data: increase_foodcount
                                            }],
                                        [{
                                            text: addto_basket_text2,
                                            callback_data: addto_basket_text2
                                        },
                                            {
                                                text: dont_addto_basket_text2,
                                                callback_data: dont_addto_basket_text2
                                            }]
                                    ]
                                }
                            })
                        }
                    }*/

                    if (temp_foodamount[chat.id] > 1){
                        temp_foodamount[chat.id]--
                        bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id]) + '—Ç–≥.', {
                            chat_id: chat.id,
                            message_id: message_id,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: decrease_foodcount,
                                        callback_data: decrease_foodcount
                                    },
                                        {
                                            text: increase_foodcount,
                                            callback_data: increase_foodcount
                                        }],
                                    [{
                                        text: dont_addto_basket_text2,
                                        callback_data: dont_addto_basket_text2
                                    },
                                    {
                                        text: addto_basket_text2,
                                        callback_data: addto_basket_text2
                                    }]
                                ]
                            }
                        })
                        break
                    }
                }
            }
            if (basket[chat.id].length === 0){
                if (temp_foodamount[chat.id] > 1){
                    temp_foodamount[chat.id]--
                    bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id]) + '—Ç–≥.', {
                        chat_id: chat.id,
                        message_id: message_id,
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: decrease_foodcount,
                                    callback_data: decrease_foodcount
                                },
                                    {
                                        text: increase_foodcount,
                                        callback_data: increase_foodcount
                                    }],
                                [{
                                    text: dont_addto_basket_text2,
                                    callback_data: dont_addto_basket_text2
                                },
                                {
                                    text: addto_basket_text2,
                                    callback_data: addto_basket_text2
                                }]
                            ]
                        }
                    })
                }
            }
        }
    }
    if (query.data === increase_foodcount2 || query.data === decrease_foodcount2){
        if (query.data === increase_foodcount2){
            console.log('–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º: ' + basket[chat.id][temp_backet_food[chat.id]][0])
            basket[chat.id][temp_backet_food[chat.id]][1]++
            bot.editMessageText(chooseamountoffood_text + basket[chat.id][temp_backet_food[chat.id]][1] + ' x ' + basket[chat.id][temp_backet_food[chat.id]][2] + '—Ç–≥. = ' + (basket[chat.id][temp_backet_food[chat.id]][1] * basket[chat.id][temp_backet_food[chat.id]][2]) + '—Ç–≥.', {
                chat_id: chat.id,
                message_id: message_id,
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: decrease_foodcount,
                            callback_data: decrease_foodcount2
                        },
                            {
                                text: increase_foodcount,
                                callback_data: increase_foodcount2
                            }],
                        [{
                            text: dont_addto_basket_text2,
                            callback_data: delete_basketfood
                        },
                        {
                            text: addto_basket_text2,
                            callback_data: addto_basket_text3
                        }]
                    ]
                }
            })
        }
        if (query.data === decrease_foodcount2){
            console.log('–£–º–µ–Ω—å—à–∞–µ–º: ' + basket[chat.id][temp_backet_food[chat.id]][0])
            basket[chat.id][temp_backet_food][1]--
            bot.editMessageText(chooseamountoffood_text + basket[chat.id][temp_backet_food[chat.id]][1] + ' x ' + basket[chat.id][temp_backet_food[chat.id]][2] + '—Ç–≥. = ' + (basket[chat.id][temp_backet_food[chat.id]][1] * basket[chat.id][temp_backet_food[chat.id]][2]) + '—Ç–≥.', {
                chat_id: chat.id,
                message_id: message_id,
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: decrease_foodcount,
                            callback_data: decrease_foodcount2
                        },
                            {
                                text: increase_foodcount,
                                callback_data: increase_foodcount2
                            }],
                        [{
                            text: dont_addto_basket_text2,
                            callback_data: delete_basketfood
                        },
                        {
                            text: addto_basket_text2,
                            callback_data: addto_basket_text3
                        }]
                    ]
                }
            })
        }
    }
    if (query.data === dont_addto_basket_text2){
        for (let i = 0; i < basket[chat.id].length; i++){
            if (userProgrammesList[chat.id][userProgram[chat.id]] === basket[chat.id][i][0]){
                basket[chat.id].splice(i, 1)
                console.log('DELETED')
                //—Ç—É—Ç –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç, –∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–æ –Ω–µ—Ç
            }
        }
        bot.deleteMessage(chat.id, message_id).then(() => {
            bot.editMessageText(temp_progtypes_text[chat.id], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_id - 1,
                reply_markup:{
                    inline_keyboard: [
                        [{
                            text: addto_basket_text,
                            callback_data: addto_basket_text
                        }],
                        [{
                            text: anotherprogram_text,
                            callback_data: anotherprogram_text
                        }]
                    ]
                }
            })
        })
    }
    if (query.data === yesigotorder_text){
        for(let i = 0; i < 100; i++){
            if (i <= 98){
                bot.deleteMessage(chat.id, message_id - i - 1).catch(err => {
                    console.log('–û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞: ' + err)
                })
            }
            if (i === 99){
                bot.deleteMessage(chat.id, message_id - i - 1).catch(err => {
                    console.log('–û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞: ' + err)
                }).then(() => {
                    bot.sendMessage(chat.id, hellomessage_text,
                        {
                                reply_markup:{
                                    inline_keyboard:[
                                        [{
                                            text: '–ù—É—Ä-–°—É–ª—Ç–∞–Ω',
                                            callback_data: '–ù—É—Ä-–°—É–ª—Ç–∞–Ω'
                                        }]/*,
                                        [{
                                            text: '–ê–ª–º–∞—Ç—ã',
                                            callback_data: '–ê–ª–º–∞—Ç—ã'
                                        }]*/
                                    ]
                                }
                        })
                })
                
            }
        }
        
    }
    if (query.data === changename_text){
        isMakingChanges[chat.id] = 1
        bot.editMessageText('üôÇ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è, –æ–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:', {
            chat_id: chat.id, 
            message_id: message_id,
        })
        .then(res => 
            {
                add_info_msg[chat.id] = res.message_id
                messages_todelete[chat.id][2] = res.message_id
            })
    }
    if (query.data === changephone_text){
        isMakingChanges[chat.id] = 2
        bot.editMessageText('üìû –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:', {
            chat_id: chat.id, 
            message_id: message_id,
        })
        .then(res => 
            {
                add_info_msg[chat.id] = res.message_id
                messages_todelete[chat.id][2] = res.message_id
            })
    }
    if (query.data === dataiscorrect_text){
        isMakingChanges[chat.id] = 0
        bot.editMessageText(dopblank_text, {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtofillinginfo_text[0],
                        callback_data: backtofillinginfo_text[1]
                    }],
                    [{
                        text: user_payingmethods[0][0],
                        callback_data: user_payingmethods[0][1]
                    }],
                    [{
                        text: user_payingmethods[1][0],
                        callback_data: user_payingmethods[1][1]
                    }]
                ]
            }
        }).then(() => {
            add_info_msg[chat.id] = message_id
            console.log('savedmessage = ' + add_info_msg[chat.id] + ', ' + message_id)
        })
    }
    if (query.data === adduserinfo_text[0]){
        isMakingChanges_2[chat.id] = 1
        bot.editMessageText('üôÇ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è, –æ–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:', {
            chat_id: chat.id, 
            message_id: messages_todelete[chat.id][4],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: backtoadduserinfo_text[0],
                        callback_data: backtoadduserinfo_text[1]
                    }]
                ]
            }
        })
        .catch(err => {console.log(err)})
    }
    if (query.data === adduserinfo_text[1]){
        isMakingChanges_2[chat.id] = 2
        bot.deleteMessage(chat.id, messages_todelete[chat.id][4])
        bot.sendPhoto(chat.id, openkeyboard_pic, {
            parse_mode: 'HTML',
            caption: '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à—É—é—Å—è —Å–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä". –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∑–Ω–∞—á–æ–∫ –≤ –Ω–∏–∂–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ)',
            reply_markup: {
                keyboard: [
                    [{
                        text: 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
                        request_contact: true
                    }],
                    [{
                        text: backtoadduserinfo_text[0]
                    }]
                ],
                resize_keyboard: true
            }
        })
        .then(res => {
            messages_todelete[chat.id][4] = res.message_id
        })
    }
    if (query.data === adduserinfo_text[2]){
        isMakingChanges_2[chat.id] = 3
        bot.editMessageText('üìß –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π email, —á—Ç–æ–±—ã –Ω–∞—à –∫–ª—É–± –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ–± –∞–∫—Ü–∏—è—Ö –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. –û–±–µ—â–∞–µ–º - –±–µ–∑ —Å–ø–∞–º–∞ üôÇ', {
            chat_id: chat.id, 
            message_id: messages_todelete[chat.id][4],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: backtoadduserinfo_text[0],
                        callback_data: backtoadduserinfo_text[1]
                    }]
                ]
            }
        })
        .catch(err => {console.log(err)})
    }

    if (query.data === backtoadduserinfo_text[1]){
        isMakingChanges_2[chat.id] = 0
        bot.editMessageText(messages_texts[chat.id][3], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][4],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: backadduserdata_text[0],
                        callback_data: backadduserdata_text[1]
                    }],
                    [{
                        text: '–§–ò–û: ' + user_name[chat.id],
                        callback_data: adduserinfo_text[0]
                    },
                    {
                        text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chat.id],
                        callback_data: adduserinfo_text[1]
                    }],
                    [{
                        text: 'Email: ' + user_email[chat.id],
                        callback_data: adduserinfo_text[2]
                    }]
                ]
            }
        })
    }

    if (query.data === dontleavecomment){
        let orderinfo = fb.database().ref(order_name[chat.id]);
        orderinfo.get().then((snapshot) => 
        {
            console.log('saving poll...')
            let updates = {}
            let bill_update = {
                adress: snapshot.val().adress,
                client_name: snapshot.val().client_name,
                date_ordered: snapshot.val().date_ordered,
                client_id: snapshot.val().client_id,
                order_info: snapshot.val().order_info,
                phone: snapshot.val().phone,
                price: snapshot.val().price,
                order_status: snapshot.val().order_status,
                deliver_name: snapshot.val().deliver_name,
                accept_date: snapshot.val().accept_date,
                deliver_id: snapshot.val().deliver_id,
                message_id: snapshot.val().message_id,
                delivered_date: snapshot.val().delivered_date,
                feedback: feedback_options[answered_feedback[chat.id]],
                bill_text: snapshot.val().bill_text,
                user_personsamount: snapshot.val().user_personsamount,
                user_payingmethod: snapshot.val().user_payingmethod,
                user_deliverdate: snapshot.val().user_deliverdate,
                user_sdachainfo: snapshot.val().user_sdachainfo,
                user_howtocome: snapshot.val().user_howtocome
            }
            updates[order_name[chat.id]] = bill_update
            updates['Basement/clients/' + chat.id + '/coins'] = user_coins[chat.id]
            fb.database().ref().update(updates).then(() => {
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chat.id, query.message.message_id - i).catch(err => {
                        //console.log(err)
                    })
                }

                let temp_bill = snapshot.val().bill_text + `
<b>üí¨ –û—Ç–∑—ã–≤ –æ –¥–æ—Å—Ç–∞–≤–∫–µ:</b>                    
‚îî –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: ` + feedback_options[answered_feedback[chat.id]]
                    bot.editMessageText(temp_bill, {
                        parse_mode: 'HTML',
                        chat_id: operators_chat[chat.id],
                        message_id: snapshot.val().message_id
                    })
                bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)]).then(() => {
                    IdentifyUser(chat.id, false)
                    anotherpoint_multiple[chat.id] = 2
                    //keyboards.CategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], fb, bot, chat.id, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chat.id], userPoint[chat.id], user_mode[chat.id])
                    bot.sendMessage(chat.id, hellomessage_text, {
                        parse_mode: 'HTML',
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: usermodes[0][0],
                                    callback_data: usermodes[0][1]
                                },
                                {
                                    text: usermodes[1][0],
                                    callback_data: usermodes[1][1]
                                }]
                            ]
                        }
                    })
                })
            })
        }) 
    }
    if (query.data === leavecomment){
        bot.editMessageText('üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:', {
            chat_id: chat.id,
            message_id: message_id
        }).then(() => {
            buttons_message[chat.id] = message_id
            isMakingChanges[chat.id] = 5
        })/* .catch(err => {
            bot.editMessageText('üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:', {
                chat_id: chat.id,
                message_id: message_id - 1
            }).then(() => {
                buttons_message[chat.id] = message_id - 1
                isMakingChanges[chat.id] = 5
            }).catch(err2 => {
                bot.editMessageText('üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:', {
                    chat_id: chat.id,
                    message_id: message_id - 2
                }).then(() => {
                    buttons_message[chat.id] = message_id - 2
                    isMakingChanges[chat.id] = 5
                }).catch(err3 => {
                    for (let i=0; i<100; i++){
                        bot.deleteMessage(chat.id, message_id - i).catch(smth => {
                            //console.log(smth)
                        })
                    }
                    bot.sendSticker(chat.id, sticker_hello).then(() => {
                        Reset(chat.id)
                        anotherpoint_multiple[chat.id] = 2
                        keyboards.CategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], categories_count[chat.id], fb, bot, chat.id, query.message, anotherpoint_text, choosecategory_text, hellomessage_text, location_text, phone_text)
                    })
                })
            })
        }) */
        
    }

    //////////////////////////////–†–ê–°–°–´–õ–ö–ò///////////////////////////
    if (query.data === keyboards.admin_menu_buttons[1][1]){//–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        bot.editMessageText(messages_texts[chat.id][0], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][0]
        })
        .then(() => {
            bot.sendMessage(chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–±–æ –≤—Å–µ–º —Å—Ä–∞–∑—É, –ª–∏–±–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ:', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: mailing_buttons[3][0],
                            callback_data: mailing_buttons[3][1]
                        },
                        {
                            text: 'üó£ –ü–æ—Å–ª–∞—Ç—å –≤—Å–µ–º',
                            callback_data: mailing_modes[0]
                        }],
                        [{
                            text: mailing_buttons[0][0],
                            callback_data: mailing_buttons[0][1]
                        },
                        {
                            text: mailing_buttons[1][0],
                            callback_data: mailing_buttons[1][1]
                        }],
                        [{
                            text: mailing_buttons[2][0],
                            callback_data: mailing_buttons[2][1]
                        }]
                    ]
                }
            })
            .then(res => {
                messages_todelete[chat.id][1] = res.message_id
                messages_texts[chat.id][1] = res.text
            })
        })
    }
    if (query.data === mailing_buttons[3][1]){//–æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        bot.deleteMessage(chat.id, messages_todelete[chat.id][1])
        bot.editMessageText(messages_texts[chat.id][0], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][0],
            reply_markup: {
                inline_keyboard: keyboards.admin_menu_keyboard
            }
        })
    }
    if (query.data === mailing_buttons[1][1]){//–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: mailing_time[2][0],
                        callback_data: mailing_time[2][1]
                    }],
                    [{
                        text: mailing_time[0][0],
                        callback_data: mailing_time[0][1]
                    },
                    {
                        text: mailing_time[1][0],
                        callback_data: mailing_time[1][1]
                    }],
                ]
            }
        })
    }
    if (query.data === mailing_time[2][1]){//–æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫ —Ä–∞—Å—Å—ã–ª–∫–∞–º —Å –≤—Ä–µ–º–µ–Ω–∏
        bot.editMessageText(messages_texts[chat.id][1], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: mailing_buttons[3][0],
                        callback_data: mailing_buttons[3][1]
                    },
                    {
                        text: '–ü–æ—Å–ª–∞—Ç—å –≤—Å–µ–º',
                        callback_data: mailing_modes[0]
                    }],
                    [{
                        text: mailing_buttons[0][0],
                        callback_data: mailing_buttons[0][1]
                    },
                    {
                        text: mailing_buttons[1][0],
                        callback_data: mailing_buttons[1][1]
                    }],
                    [{
                        text: mailing_buttons[2][0],
                        callback_data: mailing_buttons[2][1]
                    }]
                ]
            }
        })
    }
    if (query.data === mailing_time[0][1]){//–≤—ã–±—Ä–∞–ª–∏ —É—Ç—Ä–æ 
        isMailingMessage[chat.id] = 1
        bot.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                        callback_data: mailing_buttons[1][1]
                    }]
                ]
            }
        })
    }
    if (query.data === mailing_time[1][1]){//–≤—ã–±—Ä–∞–ª–∏ –≤–µ—á–µ—Ä 
        isMailingMessage[chat.id] = 2
        bot.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                        callback_data: mailing_buttons[1][1]
                    }]
                ]
            }
        })
    }
    if (query.data === mailing_modes[0]){//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
        isMailingMessage[chat.id] = 3
        bot.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                        callback_data: mailing_time[2][1]
                    }]
                ]
            }
        })
    }
    if (query.data === mailing_buttons[2][1]){//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        let mail = fb.database().ref('Fitness/' + club_name_fb[chat.id] + '/mailing/period/')
        mail.get().then(result => {
            let arr = Object.keys(result.val())
            let kb = []
            kb[0] = [{
                text: mailing_time[2][0],
                callback_data: mailing_time[2][1]
            }]
            kb[1] = []
            for (let i = 0; i<arr.length; i++){
                kb[1][i]/* [i] */ = {
                    text: arr[i],
                    callback_data: mailing_modes[3] + arr[i]
                }
                if (i === arr.length - 1){
                    bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å—Ä–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ', {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: messages_todelete[chat.id][1],
                        reply_markup: {
                            inline_keyboard: kb
                        }
                    })
                }
            }
        })
    }
    if (query.data.includes(mailing_modes[3])){
        mailing_mode[chat.id] = query.data.split(mailing_modes[3])
        mailing_mode[chat.id] = mailing_mode[chat.id][1]
        console.log(mailing_mode[chat.id])
        isMailingMessage[chat.id] = 4
        bot.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                        callback_data: mailing_buttons[2][1]
                    }]
                ]
            }
        })
    }
    if (query.data === mailing_buttons[0][1]){//–ø–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
        let categ = fb.database().ref('Fitness/' + club_name_fb[chat.id] + '/mailing/categories/')
        categ.get().then(result => {
            let arr = Object.keys(result.val())
            console.log(arr)
            let kb = []
            kb[0] = [{
                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data: mailing_time[2][1]
            }]
            for(let i = 0; i< arr.length; i++){
                let names = fb.database().ref('Fitness/' + club_name_fb[chat.id] + '/mailing/categories/' + arr[i])
                names.get().then(result => {
                    kb[i+1] = [{
                        text: result.val().category_name,
                        callback_data: 'mailcat_' + arr[i]
                    }]

                    if (i === arr.length - 1){
                        console.log(kb)
                        bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', {
                            parse_mode: 'HTML',
                            chat_id: chat.id,
                            message_id: messages_todelete[chat.id][1],
                            reply_markup: {
                                inline_keyboard: kb
                            }
                        })
                    }
                })
                
            }
        })
    }
    if (query.data.includes('mailcat_')){
        let cat_name = query.data.split('_')
        cat_name = cat_name[1]
        let categ = fb.database().ref('Fitness/' + club_name_fb[chat.id] + '/mailing/categories/' + cat_name)
        categ.get().then(result => {
            let arr = Object.keys(result.val())
            let kb = []
            for(let i = 0; i< arr.length; i++){
                let names = fb.database().ref('Fitness/' + club_name_fb[chat.id] + '/mailing/categories/'+ cat_name +'/' + arr[i])
                names.get().then(result => {
                    kb[i] = [{
                        text: result.val().name,
                        callback_data: 'mailprog_' + cat_name + '_' + arr[i]
                    }]
                    if (arr[i] === 'category_name'){
                        kb[i] = [{
                            text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                            callback_data: mailing_time[2][1]
                        }]
                    }

                    if (i === arr.length - 1){
                        console.log(kb)
                        bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É: ', {
                            parse_mode: 'HTML',
                            chat_id: chat.id,
                            message_id: messages_todelete[chat.id][1],
                            reply_markup: {
                                inline_keyboard: kb
                            }
                        })
                    }
                })
                
            }
        })
    }
    if (query.data.includes('mailprog_')){
        mailing_mode[chat.id] = query.data
        isMailingMessage[chat.id] = 5
        bot.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                        callback_data: mailing_time[2][1]
                    }]
                ]
            }
        })

    }
    if (query.data === sendmessage_cb){
        StartMailing(mailing_mode[chat.id], mailing_text[chat.id], chat.id)
        bot.deleteMessage(chat.id, messages_todelete[chat.id][0])
        .then(() => {
            bot.editMessageText('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ß–µ–º –µ—â–µ –∑–∞–π–º–µ–º—Å—è? üòè', {
                chat_id: chat.id,
                message_id: messages_todelete[chat.id][1],
                reply_markup: {
                    inline_keyboard: keyboards.admin_menu_keyboard
                }
            })
            .then(res => {
                messages_todelete[chat.id][0] = res.message_id
                messages_todelete[chat.id][1] = null
            })
        })
    }
    /////////////////////////////////////////////////////////////////////////////
    ////////////////////////–ù–ê–°–¢–†–û–ô–ö–ò///////////////////////////////////////////
    //–°–ê–ü–ü–û–†–¢
    if (query.data === keyboards.admin_menu_buttons[4][1]){
        var other_data = fb.database().ref('Motherbase/contacts')
        other_data.get().then((snapshot) => {
            bot.sendMessage(chat.id, `–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ ‚åöÔ∏è 
Email: `+ snapshot.val().email + `
–¢–µ–ª–µ—Ñ–æ–Ω: ` + snapshot.val().phone + `
–ê–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ: ` + snapshot.val().tgusername, {
        parse_mode: 'HTML', })
        })
    }
    //–ö–ê–†–¢–ê
    if (query.data ===  keyboards.admin_menu_buttons[0][1]){
        bot.editMessageText(messages_texts[chat.id][0], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][0]
        })
        .then(() => {
            var other_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/other_info')
            other_data.get().then((snapshot) => 
            {
                help_phone[chat.id] = snapshot.val().contact_phone
                point_location[chat.id][0] = snapshot.val().latitude
                point_location[chat.id][1] = snapshot.val().longitude
                point_adress[chat.id] = snapshot.val().adress_text
        
                morning_time[chat.id] = snapshot.val().morning_time
        
                evening_time[chat.id] = snapshot.val().evening_time
        
                support_username[chat.id] = snapshot.val().support_username
        
                card_data[chat.id][0] = snapshot.val().kaspi_phone
                card_data[chat.id][1] = snapshot.val().card
                card_data[chat.id][2] = snapshot.val().fio
        
            })
            bot.sendMessage(chat.id, '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboards.admin_preferences_keyboard
                }
            })
            .then(res => {
                messages_todelete[chat.id][1] = res.message_id
                messages_texts[chat.id][1] = res.text
            })
        })
    }
    if (query.data === keyboards.admin_preferences_buttons[6][1]){
        bot.deleteMessage(chat.id, messages_todelete[chat.id][1])
        bot.editMessageText(messages_texts[chat.id][0], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][0],
            reply_markup: {
                inline_keyboard: keyboards.admin_menu_keyboard
            }
        })
        .then(res => {
            messages_todelete[chat.id][1] = null
            messages_texts[chat.id][1] = null
        })
        
    }
    if (query.data === keyboards.admin_preferences_buttons[1][1]){
        
        bot.editMessageText('–£–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_cards[3][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_cards[0][0] + ': ' + card_data[chat.id][1],
                        callback_data: keyboard_admin_cards[0][1]
                    }],
                    [{
                        text: keyboard_admin_cards[1][0] + ': ' + card_data[chat.id][2],
                        callback_data: keyboard_admin_cards[1][1]
                    },
                    {
                        text: keyboard_admin_cards[2][0] + ': ' + card_data[chat.id][0],
                        callback_data: keyboard_admin_cards[2][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_cards[0][1]){
        isChangingPrefs[chat.id] = 1
        bot.editMessageText('üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–∞—Ä—Ç—ã. –ï–µ –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –æ–Ω–ª–∞–π–Ω:', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_cards[3][0],
                        callback_data: keyboards.admin_preferences_buttons[1][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_cards[1][1]){
        isChangingPrefs[chat.id] = 2
        bot.editMessageText('üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_cards[3][0],
                        callback_data: keyboards.admin_preferences_buttons[1][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_cards[2][1]){
        isChangingPrefs[chat.id] = 3
        bot.editMessageText('–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å KASPI –Ω–æ–º–µ—Ä, –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏ –µ–≥–æ. –í–ê–ñ–ù–û! –ï—Å–ª–∏ —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É –≤–∞—Å –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–æ–¥–∏—Ç–µ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "unknown" ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_cards[3][0],
                        callback_data: keyboards.admin_preferences_buttons[1][1]
                    }]
                ]
            }
        })
    }

    //–ö–û–ù–¢–ê–ö–¢–´
    if (query.data === 'backtoalldata_cb'){
        bot.editMessageText(messages_texts[chat.id][1], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: keyboards.admin_preferences_keyboard
            }
        })
    }
    if (query.data === keyboards.admin_preferences_buttons[2][1]){
        
        bot.editMessageText('–£–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –í–∞–º–∏', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_phone[2][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_phone[0][0] + ': ' + help_phone[chat.id],
                        callback_data: keyboard_admin_phone[0][1]
                    }],
                    [{
                        text: keyboard_admin_phone[1][0] + ': ' + support_username[chat.id],
                        callback_data: keyboard_admin_phone[1][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_phone[0][1]){
        isChangingPhone[chat.id] = 1
        bot.editMessageText('üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_cards[3][0],
                        callback_data: keyboards.admin_preferences_buttons[2][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_phone[1][1]){
        isChangingPhone[chat.id] = 2
        bot.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –í–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_cards[3][0],
                        callback_data: keyboards.admin_preferences_buttons[2][1]
                    }]
                ]
            }
        })
    }


    //–†–ê–°–ü–ò–°–ê–ù–ò–ï
    if (query.data === keyboards.admin_preferences_buttons[3][1]){
        
        bot.editMessageText('–£ –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä. –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å 8:00-17:00). –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è:', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_phone[2][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_times[0][0] + ' ' +  morning_time[chat.id],
                        callback_data: keyboard_admin_times[0][1]
                    }],
                    [{
                        text: keyboard_admin_times[1][0] + ' ' + evening_time[chat.id],
                        callback_data: keyboard_admin_times[1][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_times[0][1]){
        isChangingTime[chat.id] = 1
        bot.editMessageText('üå• –£–∫–∞–∂–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è –í–∞—à–µ–≥–æ –∫–ª—É–±–∞ (–Ω–∞–ø—Ä. —Å 8.00 - 17.00). –£–ö–ê–ó–´–í–ê–ô–¢–ï –í–†–ï–ú–Ø –í –§–û–†–ú–ê–¢–ï: –ß:–ú–ú-–ß:–ú–ú. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–º–æ–∂–Ω—ã —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_cards[3][0],
                        callback_data: keyboards.admin_preferences_buttons[3][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_times[1][1]){
        isChangingTime[chat.id] = 2
        bot.editMessageText('üåö –£–∫–∞–∂–∏—Ç–µ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è –í–∞—à–µ–≥–æ –∫–ª—É–±–∞ (–Ω–∞–ø—Ä. —Å 8.00 - 17.00). –£–ö–ê–ó–´–í–ê–ô–¢–ï –í–†–ï–ú–Ø –í –§–û–†–ú–ê–¢–ï: –ß:–ú–ú-–ß:–ú–ú. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–º–æ–∂–Ω—ã —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_cards[3][0],
                        callback_data: keyboards.admin_preferences_buttons[3][1]
                    }]
                ]
            }
        })
    }

    //–õ–û–ö–ê–¶–ò–Ø
    if (query.data === keyboards.admin_preferences_buttons[0][1]){
        bot.editMessageText('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–ª—É–±–∞.', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_phone[2][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_location[0][0] + point_adress[chat.id],
                        callback_data: keyboard_admin_location[0][1]
                    }],
                    [{
                        text: keyboard_admin_location[1][0] + point_location[chat.id][0],
                        callback_data: keyboard_admin_location[1][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_location[0][1]){
        isChangingLocation[chat.id] = 1
        bot.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –í–∞—à–µ–≥–æ –∫–ª—É–±–∞:', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_location[2][0],
                        callback_data: keyboards.admin_preferences_buttons[0][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_location[1][1]){
        isChangingLocation[chat.id] = 2
        bot.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ì–µ–æ–ø–æ–∑–∏—Ü–∏—é</b> –í–∞—à–µ–≥–æ –∫–ª—É–±–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É —Å–ª–µ–≤–∞ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç<b> "–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è". </b>', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_location[2][0],
                        callback_data: keyboards.admin_preferences_buttons[0][1]
                    }]
                ]
            }
        })
    }

    //–õ–û–Ø–õ–¨–ù–û–°–¢–¨
    if (query.data === keyboards.admin_preferences_buttons[5][1]){
        var cb_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/loyal_system')
        cb_data.get().then((snapshot) => {
            cashback[chat.id] = snapshot.val().cashback
            max_cashback[chat.id] = snapshot.val().max_cashback
            min_cashback[chat.id] = snapshot.val().min_cashback
            min_price[chat.id] = snapshot.val().min_price
        })
        bot.editMessageText('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å <b>–°–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>. –ó–∞ –∫–∞–∂–¥—É—é –ø–æ—Å–µ—â–µ–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç <b>–∫—ç—à–±—ç–∫</b>, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥—É—Ç –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å <b>–≤ –í–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ</b>. –≠—Ç–æ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, –∞ —Ç–∞–∫–∂–µ <i>–º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.</i>', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_phone[2][0],
                        callback_data: 'backtoalldata_cb'
                    }],
                    [{
                        text: keyboard_admin_loyal[0][0] + cashback[chat.id] + ' —Ç–≥.',
                        callback_data: keyboard_admin_loyal[0][1]
                    }],
                    [{
                        text: keyboard_admin_loyal[1][0] + min_price[chat.id] + ' —Ç–≥.',
                        callback_data: keyboard_admin_loyal[1][1]
                    }],
                    [{
                        text: keyboard_admin_loyal[3][0] + (min_cashback[chat.id]*100) + '%',
                        callback_data: keyboard_admin_loyal[3][1]
                    },
                    {
                        text: keyboard_admin_loyal[4][0] + (max_cashback[chat.id]*100) + '%',
                        callback_data: keyboard_admin_loyal[4][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_loyal[0][1]){
        isChangingCashback[chat.id] = 1
        bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤ 3 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ —ç—Ç–æ–π —Å—É–º–º—ã. ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_loyal[2][0],
                        callback_data: keyboards.admin_preferences_buttons[5][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_loyal[1][1]){
        isChangingCashback[chat.id] = 2
        bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–≤', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_loyal[2][0],
                        callback_data: keyboards.admin_preferences_buttons[5][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_loyal[3][1]){
        isChangingCashback[chat.id] = 3
        bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % –æ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –±–æ–Ω—É—Å–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç 1000—Ç–≥, –∞ –º–∏–Ω. –ø—Ä–æ—Ü–µ–Ω—Ç - 30%, —Ç–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –∏—Ö –±–æ–ª—å—à–µ 300 —Ç–≥. ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_loyal[2][0],
                        callback_data: keyboards.admin_preferences_buttons[5][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_loyal[4][1]){
        isChangingCashback[chat.id] = 4
        bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π % –æ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –±–æ–Ω—É—Å–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç 1000—Ç–≥, –∞ –º–∏–Ω. –ø—Ä–æ—Ü–µ–Ω—Ç - 30%, —Ç–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏ –º–∞–∫—Å–∏–º—É–º 300—Ç–≥., –∞ –æ—Å—Ç–∞–ª—å–Ω—É—é —Å—É–º–º—É - —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_loyal[2][0],
                        callback_data: keyboards.admin_preferences_buttons[5][1]
                    }]
                ]
            }
        })
    }

    //–í–û–†–û–ù–ö–ê
    if (query.data === keyboards.admin_preferences_buttons[4][1]){
        var cb_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/discounts')
        cb_data.get().then((snapshot) => {
            discountvalues[chat.id] = []
            discountvalues[chat.id][0] = snapshot.val().goodvalue
            discountvalues[chat.id][1] = snapshot.val().middlevalue
            discountvalues[chat.id][2] = snapshot.val().badvalue
            discountvalues[chat.id][3] = snapshot.val().maxvalue

            bot.editMessageText('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å <b>—Å–∏—Å—Ç–µ–º—É —Å–∫–∏–¥–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.</b> –ï—Å–ª–∏ –∫ –í–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–∫—É–ø–∞–µ—Ç –æ–¥–Ω—É –∏–∑ –ø—Ä–æ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º (–Ω–∞ 1 –¥–µ–Ω—å), —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –µ–≥–æ, –≤—Å–µ –ª–∏ –µ–º—É –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞, –±–æ—Ç –º–æ–∂–µ—Ç <b>–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.</b> –≠—Ç–æ —É–≤–µ–ª–∏—á–∏—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏–∑ –ø—Ä–æ–±–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã.', {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: messages_todelete[chat.id][1],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: keyboard_admin_phone[2][0],
                            callback_data: 'backtoalldata_cb'
                        }],
                        [{
                            text: keyboard_admin_voron[0][0] + discountvalues[chat.id][0] + '%',
                            callback_data: keyboard_admin_voron[0][1]
                        },
                        {
                            text: keyboard_admin_voron[1][0] + discountvalues[chat.id][1] + '%',
                            callback_data: keyboard_admin_voron[1][1]
                        },
                        {
                            text: keyboard_admin_voron[3][0] + discountvalues[chat.id][2] + '%',
                            callback_data: keyboard_admin_voron[3][1]
                        }],
                        [{
                            text: keyboard_admin_voron[4][0] + discountvalues[chat.id][3] + ' —Ç–≥.',
                            callback_data: keyboard_admin_voron[4][1]
                        }]
                    ]
                }
            })
        })
        
    }

    if (query.data === keyboard_admin_voron[0][1]){
        isChangingVoron[chat.id] = 1
        bot.editMessageText('–ï—Å–ª–∏ –±—É–¥—É—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É <b>–ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º –µ–º—É –∫—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –ï—Å–ª–∏ –æ–Ω –æ—Ç–∫–∞–∂–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç, —Ç–æ —Å–ø—É—Å—Ç—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º –µ–º—É —Å–∫–∏–¥–∫—É. –í–≤–µ–¥–∏—Ç–µ % —ç—Ç–æ–π —Å–∫–∏–¥–∫–∏: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_voron[2][0],
                        callback_data: keyboards.admin_preferences_buttons[4][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_voron[1][1]){
        isChangingVoron[chat.id] = 2
        bot.editMessageText('–ï—Å–ª–∏ –±—É–¥—É—â–∏–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—à–ª–æ <b>–Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>, –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º –µ–º—É –∫—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –ï—Å–ª–∏ –æ–Ω –æ—Ç–∫–∞–∂–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç, —Ç–æ —Å–ø—É—Å—Ç—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º –µ–º—É —Å–∫–∏–¥–∫—É. –í–≤–µ–¥–∏—Ç–µ % —ç—Ç–æ–π —Å–∫–∏–¥–∫–∏: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_voron[2][0],
                        callback_data: keyboards.admin_preferences_buttons[4][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_voron[3][1]){
        isChangingVoron[chat.id] = 3
        bot.editMessageText('–ï—Å–ª–∏ –±—É–¥—É—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É <b>–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞,</b> –±–æ—Ç –ø—Ä–∏–Ω–µ—Å–µ—Ç —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç <b>—Å —Ö–æ—Ä–æ—à–µ–π —Å–∫–∏–¥–∫–æ–π</b>. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —ç—Ç–æ —Å–∫–∏–¥–∫–∏: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_voron[2][0],
                        callback_data: keyboards.admin_preferences_buttons[4][1]
                    }]
                ]
            }
        })
    }

    if (query.data === keyboard_admin_voron[4][1]){
        isChangingVoron[chat.id] = 4
        bot.editMessageText('–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–ª–∏–µ–Ω—Ç –∫—É–ø–∏–ª –ø—Ä–æ–±–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –µ–º—É –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —Å–∫–∏–¥–∫–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –º–µ—Å—è—á–Ω—ã–π, –Ω–æ –∏ –Ω–∞ 3-—Ö, 6-–∏ –∏ 12-–∏ –º–µ—Å—è—á–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å–∫–∏–¥–∫–∏ (—Ç–≥), –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–æ—Ç: ', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: keyboard_admin_voron[2][0],
                        callback_data: keyboards.admin_preferences_buttons[4][1]
                    }]
                ]
            }
        })
    }
    /////////////////////////////////////////////////////////////////////
    //–ê–ù–ê–õ–ò–¢–ò–ö–ê
    if (query.data ===  keyboards.admin_menu_buttons[2][1]){
        bot.editMessageText(messages_texts[chat.id][0], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][0]
        })
        .then(() => {
            var other_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/analytics/')
            other_data.get().then((snapshot) => {
                //guserdata[chat.id] = []   /* <---- –≠–¢–û –£–ë–†–ê–¢–¨ */
                /* guserdata[chat.id][12] = snapshot.val().sh_online  <------ –≠–¢–û –û–°–¢–ê–í–ò–¢–¨*/
                //guserdata[chat.id] = ['–ò–æ—Å–∏—Ñ –ö—É—Ç–∞—Ç–µ–ª–∞–¥–∑–µ', '+77075112224', '–ö–∞—Ä–∞—Ç—ç', '–ê–ö–¢–ò–í–ï–ù', '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', '–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞','10000 —Ç–≥.', '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', '–ë–µ—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', '–ù–µ—Ç', '–ù–ï—Ç', 10, snapshot.val().sh_online]
                //GoogleAddUser(chat.id, guserdata[chat.id])
                bot.sendMessage(chat.id, '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ <b>–¥–æ–∫—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ç–¥.</b> –ö–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π', {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                                callback_data: keyboards.admin_preferences_buttons[6][1]
                            }],
                            [{
                                text: adminreports[0],
                                callback_data: adminreports[1]
                            }],
                            [{
                                text: 'üë§ –ë–î —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
                                url: 'https://docs.google.com/spreadsheets/d/' + snapshot.val().sh_online
                            }]
                        ]
                    }
                })
                .then(res => {
                    messages_todelete[chat.id][1] = res.message_id
                    messages_texts[chat.id][1] = res.text
                })
            })
        })
    }

    if (query.data === backfromadmreports[1]){
        var other_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/analytics/')
        other_data.get().then((snapshot) => {
            bot.editMessageText(messages_texts[chat.id][0], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: messages_todelete[chat.id][1],
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                            callback_data: keyboards.admin_preferences_buttons[6][1]
                        }],
                        [{
                            text: adminreports[0],
                            callback_data: adminreports[1]
                        }],
                        [{
                            text: 'üë§ –ë–î —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
                            url: 'https://docs.google.com/spreadsheets/d/' + snapshot.val().sh_online
                        }]
                    ]
                }
            })
        })
        
    }

    if (query.data === adminreports[1]){
        bot.editMessageText(messages_texts[chat.id][1], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1]
        })

        var other_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/analytics/')
            other_data.get().then((snapshot) => {
                let date = new Date()
                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                let timeOfffset = 6 //Astana GMT +6
                let time_now = new Date(utcTime + (3600000 * timeOfffset))
                let end_time = new Date(snapshot.val().last_report_date)
                end_time = end_time.setMonth(end_time.getMonth() + 1, end_time.getDate())
                let kb = []
                kb[0] = [{
                    text: backfromadmreports[0],
                    callback_data: backfromadmreports[1]
                }]
                let msg_txt = ''
                let allreports = Object.keys(snapshot.val().reports)
                
                if (time_now >= end_time){
                    kb[1] = [{
                        text: adminnewreport[0],
                        callback_data: adminnewreport[1]
                    }]

                    msg_txt = `–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü ü•≥
ABONEMENTS.ME —Ä–∞–¥—ã –ø–æ–º–æ–≥–∞—Ç—å –í–∞—à–µ –±–∏–∑–Ω–µ—Å—É —Ä–∞—Å—Ç–∏! 

–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º:
ü§ù –ü—Ä–æ–¥–∞–∂ —Å–æ–≤–µ—Ä—à–µ–Ω–æ: <b>` + snapshot.val().alltime_data.net_sold + `</b>
üí∞ –í—ã—Ä—É—á–∫–∞: <b>` + snapshot.val().alltime_data.net_income + ` —Ç–µ–Ω–≥–µ. </b>
`
                    if (snapshot.val().alltime_data.net_conversions > 5) {
                        msg_txt += `üÜï –ö–æ–Ω–≤–µ—Ä—Å–∏–π –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: <b>` + snapshot.val().alltime_data.net_conversions + ` —á–µ–ª–æ–≤–µ–∫(-–∞) </b>`
                    }

                    for (let i = 0; i < allreports.length; i++){
                        var moredata = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/analytics/reports/' + allreports[i])
                        moredata.get().then((result) => {
                            if (result.exists()){
                                kb[i+2] = [{
                                    text: result.val().name,
                                    url: result.val().link
                                }]
                                if (i === allreports.length - 1){ 
                                    bot.editMessageText(msg_txt, {
                                        chat_id: chat.id,
                                        message_id: messages_todelete[chat.id][1],
                                        parse_mode: 'HTML',
                                        reply_markup: {
                                            inline_keyboard: kb
                                        }
                                    })

                                }
                            }
                            else {
                                bot.editMessageText(msg_txt, {
                                    chat_id: chat.id,
                                    message_id: messages_todelete[chat.id][1],
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: kb
                                    }
                                })
                            }
                        })
                    }
                }

                if (time_now < end_time){
                    msg_txt = '–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å <b>–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</b>. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É: '
                
                    for (let i = 0; i < allreports.length; i++){
                        var moredata = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/analytics/reports/' + allreports[i])
                        moredata.get().then((result) => {
                            if (result.exists()){
                                kb[i+1] = [{
                                    text: result.val().name,
                                    url: result.val().link
                                }]
                                if (i === allreports.length - 1){ 
                                    bot.editMessageText(msg_txt, {
                                        chat_id: chat.id,
                                        message_id: messages_todelete[chat.id][1],
                                        parse_mode: 'HTML',
                                        reply_markup: {
                                            inline_keyboard: kb
                                        }
                                    })

                                }
                            }
                            else {
                                bot.editMessageText(msg_txt, {
                                    chat_id: chat.id,
                                    message_id: messages_todelete[chat.id][1],
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: kb
                                    }
                                })
                                 
                            }
                        })
                    }

                }
                
                
            })
    }

    if (query.data === adminnewreport[1]){
        GoogleCreateReport(chat.id, chat.first_name)
        bot.sendChatAction(chat.id, 'upload_document')
        bot.editMessageText('<b>‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç.</b> –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ù–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ...', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1]
        })

    }
}

    if (chat.type === 'group' || chat.type === 'supergroup'){
        bot.getChat(chat.id).then((result0) => {
            if (result0.description !== null || result0.description !== undefined){
                let del_userdata = []
                console.log(result0)
                del_userdata[chat.id] = result0.description.split('/')
                console.log('Chats| this: ' + chat.id + ', ' + del_userdata[chat.id][2])
                if (del_userdata[chat.id][2] === (chat.id).toString()){
                    let userdata = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'/clients/')
                    userdata.get().then((result) => {
                        //IdentifyUser(query.message.chat.id, false)
                        let clients_array = Object.keys(result.val())
                        console.log('–í—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É callback –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ' + query.data + ', array = ' + clients_array.length)
                        for(let i = clients_array.length - 1; i >= 0; i--){
                            console.log(i + ' Processing... ' + query.data + ', ' + (accept_order_callback + clients_array[i]))
                            if (query.data === accept_order_callback + clients_array[i].toString()){
                                accepted_order_name = clients_array[i]
                                console.log('–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑: ' + accepted_order_name)
                                //—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —á–µ–∫–µ –∞–π–¥–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ –æ–Ω –º–æ–≥ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
                                let orderinfo = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'/clients/' + clients_array[i]);
                                orderinfo.get().then((snapshot) => 
                                {   
                                    guserdata[query.from.id] = []
                                    console.log(query)
                                    console.log('acceptor name2 : ' + query.from.first_name + ', ' + query.from.id)
                                    let date = new Date()
                                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                                    let timeOfffset = 6 //Astana GMT +6
                                    let accept_date = new Date(utcTime + (3600000 * timeOfffset))
                                    let end_date
                                    /* if (snapshot.val().abonement.end_date !== '0'){
                                        end_date = new Date(snapshot.val().abonement.end_date)
                                        
                                    }
                                    if (snapshot.val().abonement.end_date === '0'){
                                        end_date = new Date (accept_date.getFullYear(), accept_date.getMonth(), accept_date.getDate(), accept_date.getHours(), accept_date.getMinutes())
                                        end_date.setMonth(accept_date.getMonth() + snapshot.val().abonement.period, accept_date.getDate())
                                    } */

                                    if (accept_date.getTime() >= snapshot.val().abonement.end_date){
                                        end_date = new Date (accept_date.getFullYear(), accept_date.getMonth(), accept_date.getDate(), accept_date.getHours(), accept_date.getMinutes())
                                        end_date.setMonth(accept_date.getMonth() + snapshot.val().abonement.period, accept_date.getDate())
                                    }

                                    if (accept_date.getTime() < snapshot.val().abonement.end_date){
                                        end_date = new Date (snapshot.val().abonement.end_date)
                                        end_date.setMonth(end_date.getMonth() + snapshot.val().abonement.period, end_date.getDate())
                                        console.log('–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ' + end_date)
                                    }
                                    /* if (snapshot.val().abonement.period < 12){
                                    }
                                    if (snapshot.val().abonement.period >= 12){
                                        end_date.setFullYear(accept_date.getFullYear() + 1,accept_date.getMonth(), accept_date.getDate())
                                    } */
                                    console.log('–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ' + accept_date.getTime() + ', –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞: ' + end_date.getTime() + ', ' + snapshot.val().abonement.period)
                                      
                                    /////–ò–ó–ú–ï–ù–Ø–ï–ú –ß–ï–ö///////////////

                                    let Astana_date_accept = new Date(accept_date.getTime())  
                                    let minutes2 = Astana_date_accept.getMinutes()
                                    if (minutes2 < 10) minutes2 = '0' + minutes2
                                    let hours2 = Astana_date_accept.getHours()
                                    if (hours2 < 10) hours2 = '0' + hours2
                                    let visible_date_accept = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_accept) + ' ' +  */hours2 + ':' + minutes2 + ', ' + Astana_date_accept.getDate() + '.' + (Astana_date_accept.getMonth() + 1) + '.' + Astana_date_accept.getFullYear()
                                
                                    let Astana_date_end = new Date(end_date.getTime())  
                                    let minutes = Astana_date_end.getMinutes()
                                    if (minutes < 10) minutes = '0' + minutes
                                    let hours = Astana_date_end.getHours()
                                    if (hours < 10) hours = '0' + hours
                                    let visible_date_end = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_end) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date_end.getDate() + '.' + (Astana_date_end.getMonth() + 1) + '.' + Astana_date_end.getFullYear()
                                
                                    abonements_bill_topic = abonement_bill_topic_names[1]
                                    abonemets_bill_client_info = `
                                
<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + snapshot.val().name + `
‚îî –ù–æ–º–µ—Ä: ` + snapshot.val().phone + `
                                
`
                                    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + snapshot.val().abonement.name + `
‚îú –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ` + snapshot.val().abonement.period + ` –º–µ—Å.
‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: ` +snapshot.val().abonement.price + `  —Ç–µ–Ω–≥–µ.
                                
`
                                
                                if (snapshot.val().abonement.time === 'unlimited'){
abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
guserdata[query.from.id][7] = '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'
                                }
                                
                                if (snapshot.val().abonement.time !== 'unlimited'){
                                    if (snapshot.val().abonement.time === 'morning'){
                                        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + morning_time[query.from.id][0][0] + `:` + morning_time[query.from.id][0][1] + ` –¥–æ ` + morning_time[query.from.id][1][0] + `:` + morning_time[query.from.id][1][1] 
guserdata[query.from.id][7] = `c ` + morning_time[query.from.id][0][0] + `:` + morning_time[query.from.id][0][1] + ` –¥–æ ` + morning_time[query.from.id][1][0] + `:` + morning_time[query.from.id][1][1] 
}
                                
                                    if (snapshot.val().abonement.time === 'evening'){
                                        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + evening_time[query.from.id][0][0] + `:` + evening_time[query.from.id][0][1] + ` –¥–æ ` + evening_time[query.from.id][1][0] + `:` + evening_time[query.from.id][1][1] 
guserdata[query.from.id][7] = `c `+ evening_time[query.from.id][0][0] + `:` + evening_time[query.from.id][0][1] + ` –¥–æ ` + evening_time[query.from.id][1][0] + `:` + evening_time[query.from.id][1][1] 
}
                                }
                                
                                if (snapshot.val().abonement.visits === 'unlimited'){
                                    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
guserdata[query.from.id][8] = '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'
                                }
                                
                                if (snapshot.val().abonement.visits !== 'unlimited'){
                                    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + snapshot.val().abonement.visits
guserdata[query.from.id][8] = snapshot.val().abonement.visits
                                }
                                
                                if (snapshot.val().abonement.freeze_amount === false){
                                    abonements_bill_order_info += `
‚îî –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏`
guserdata[query.from.id][9] = '–ù–µ—Ç'
                                }
                                
                                if (snapshot.val().abonement.freeze_amount !== false){
                                    abonements_bill_order_info += `
‚îî –ö–æ–ª-–≤–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫: ` + snapshot.val().abonement.freeze_amount + ` –¥–Ω–µ–π.`
guserdata[query.from.id][9] = snapshot.val().abonement.freeze_amount + ` –¥–Ω–µ–π.`
                                }

                                    abonements_bill_order_info += `

<b>üïî –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>
‚îú –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ` + visible_date_accept + `
‚îú –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ` + visible_date_end + `
‚îî –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ` + query.from.first_name + ', id: ' + query.from.id
                                
                                    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info

                                    let updates = {}

                                    if (snapshot.val().abonement.abonement_status === abonement_statuses_text[4]){
                                        updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/audience/stats/active'] = res.val().current_data.audience.stats.active + 1
                                        updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/audience/stats/inactive'] = res.val().current_data.audience.stats.inactive - 1
                                    }

                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/bill_text'] = abonements_bill
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/bill_msg'] = query.message.message_id,
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/abonement/start_date'] = accept_date.getTime()
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/abonement/end_date'] = end_date.getTime()
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/abonement/abonement_status'] = abonement_statuses_text[2]
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/abonement/activator_name'] =  query.from.first_name
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/abonement/activator_id'] =  query.from.id

                                    updates['Motherbase/clients/'+ clients_array[i] + '/fitness/start_date'] = accept_date.getTime()
                                    updates['Motherbase/clients/'+ clients_array[i] + '/fitness/end_date'] = end_date.getTime()
                                    updates['Motherbase/clients/'+ clients_array[i] + '/fitness/abonement_status'] = abonement_statuses_text[2]

                                    let sh_info = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'/analytics/');
                                    sh_info.get().then((res) => 
                                    {
                                        
                                        if (snapshot.val().userrow !== undefined){
                                            guserdata[query.from.id][11] = snapshot.val().userrow
                                        }

                                        if (snapshot.val().userrow === undefined){
                                            guserdata[query.from.id][11] = res.val().nextuser_row
                                            updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/audience/stats/net_users'] = res.val().current_data.audience.stats.net_users + 1
                                            updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/audience/stats/active'] = res.val().current_data.audience.stats.active + 1
                                            updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/nextuser_row'] =  guserdata[query.from.id][11] + 13
                                        }
                                        
                                        if (res.val().sh_online !== undefined){
                                            console.log('sh: ' + res.val().sh_online)
                                            guserdata[query.from.id][12] = res.val().sh_online
                                        }

                                        programme_pas[clients_array[i]] = snapshot.val().programme_pas //"Fitness/ForceClub/Program/categories/silovye/programmes/bezlimit_den"
                                        // 4 - categ, 6 - program
                                        programme_pas[clients_array[i]] = programme_pas[clients_array[i]].split('/')
                                        console.log(res.val().current_data.income.abonements.abonements_income + snapshot.val().abonement.price)
                                        updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/alltime_data/net_income'] = (res.val().alltime_data.net_income + snapshot.val().abonement.price)
                                        updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/alltime_data/net_sold'] = (res.val().alltime_data.net_sold + 1)

                                        updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/abonements/abonements_income'] = (res.val().current_data.income.abonements.abonements_income + snapshot.val().abonement.price)
                                        updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/abonements/abonements_sold'] = res.val().current_data.income.abonements.abonements_sold + 1
                                        updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/net_income'] = res.val().current_data.income.net_income + snapshot.val().abonement.price
                                        updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/net_sold'] = res.val().current_data.income.net_sold + 1

                                        //updates['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/abonements/abonements_income'] =  res.val().current_data.income.abonements.abonements_income +  snapshot.val().abonement_price
                                        
                                        let program_stat = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/abonements/' + programme_pas[clients_array[i]][6])
                                        program_stat.get().then((program_res) => {
                                            let new_update = {}
                                            if (program_res.exists()){ 
                                                new_update['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/abonements/' + programme_pas[clients_array[i]][6] + '/income'] = program_res.val().income + snapshot.val().abonement.price
                                                new_update['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/abonements/' + programme_pas[clients_array[i]][6] + '/sold'] = program_res.val().sold + 1
                                            }
                                            else { 
                                                new_update['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/abonements/' + programme_pas[clients_array[i]][6] + '/income'] = snapshot.val().abonement.price
                                                new_update['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/abonements/' + programme_pas[clients_array[i]][6] + '/sold'] = 1
                                                new_update['Fitness/'+del_userdata[chat.id][0]+'/analytics/current_data/income/abonements/' + programme_pas[clients_array[i]][6] + '/name'] = snapshot.val().abonement.name
                                            }
                                            fb.database().ref().update(new_update)
                                        })


                                        guserdata[query.from.id][0] = snapshot.val().name
                                        guserdata[query.from.id][1] = snapshot.val().phone
                                        guserdata[query.from.id][2] = snapshot.val().abonement.name
                                        guserdata[query.from.id][3] = abonement_statuses_text[2]
                                        guserdata[query.from.id][6] = snapshot.val().abonement.price + ' —Ç–≥.'
                                        guserdata[query.from.id][4] = visible_date_accept
                                        guserdata[query.from.id][5] = visible_date_end
                                        guserdata[query.from.id][10] = '–ù–µ—Ç'
       
                                        updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/userrow'] =  guserdata[query.from.id][11]
                                        fb.database().ref().update(updates)

                                        GoogleAddUser(query.from.id, guserdata[query.from.id])
                                        
                                    })

                                    

                                    bot.editMessageText(abonements_bill, {
                                        parse_mode: 'HTML',
                                        chat_id: chat.id,
                                        message_id: message_id
                                    })
                                })
                                break
                            }
                            else if (query.data === refuse_order_callback + clients_array[i]){
                                console.log('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑: ' + clients_array[i])
                                let orderinfo = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'/clients/' + clients_array[i]);
                                orderinfo.get().then((snapshot) => 
                                {
                                    let date = new Date()
                                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                                    let timeOfffset = 6 //Astana GMT +6
                                    let refuse_date = new Date(utcTime + (3600000 * timeOfffset))
                                    
                                    let Astana_date_accept = new Date(refuse_date)
                                    let minutes2 = Astana_date_accept.getMinutes()
                                    if (minutes2 < 10) minutes2 = '0' + minutes2
                                    let hours2 = Astana_date_accept.getHours()
                                    if (hours2 < 10) hours2 = '0' + hours2
                                    let visible_date_refuse = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_accept) + ' ' +  */hours2 + ':' + minutes2 + ', ' + Astana_date_accept.getDate() + '.' + (Astana_date_accept.getMonth() + 1) + '.' + Astana_date_accept.getFullYear()
                                
                                    abonements_bill_topic = abonement_bill_topic_names[2]
                                    abonemets_bill_client_info = `
                                
<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + snapshot.val().name + `
‚îî –ù–æ–º–µ—Ä: ` + snapshot.val().phone + `
                                
`
                                    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + snapshot.val().abonement.name + `
‚îú –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ` + snapshot.val().abonement.period + ` –º–µ—Å.
‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: ` +snapshot.val().abonement.price + `  —Ç–µ–Ω–≥–µ.
                                
`
                                
                                if (snapshot.val().abonement.time === 'unlimited'){
abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
                                }
                                
                                if (snapshot.val().abonement.time !== 'unlimited'){
                                    if (snapshot.val().abonement.time === 'morning'){
                                        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + morning_time[chat.id][0][0] + `:` + morning_time[chat.id][0][1] + ` –¥–æ ` + morning_time[chat.id][1][0] + `:` + morning_time[chat.id][1][1] 
                                    }
                                
                                    if (snapshot.val().abonement.time === 'evening'){
                                        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + evening_time[chat.id][0][0] + `:` + evening_time[chat.id][0][1] + ` –¥–æ ` + evening_time[chat.id][1][0] + `:` + evening_time[chat.id][1][1] 
                                    }
                                }
                                
                                if (snapshot.val().abonement.visits === 'unlimited'){
                                    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
                                }
                                
                                if (snapshot.val().abonement.visits !== 'unlimited'){
                                    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + snapshot.val().abonement.visits
                                }
                                
                                if (snapshot.val().abonement.freeze_amount === false){
                                    abonements_bill_order_info += `
‚îî –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏`
                                }
                                
                                if (snapshot.val().abonement.freeze_amount !== false){
                                    abonements_bill_order_info += `
‚îî –ö–æ–ª-–≤–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫: ` + snapshot.val().abonement.freeze_amount + ` –¥–Ω–µ–π.`
                                }

                                    abonements_bill_order_info += `

<b>üïî –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>
‚îú –î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞ –≤ –∑–∞—è–≤–∫–µ: ` + visible_date_refuse + `
‚îî –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ` + query.from.first_name + ', id: ' + query.from.id
                                
                                    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info

                                    let updates = {}
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/bill_text'] = abonements_bill
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/bill_msg'] = query.message.message_id,
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/abonement/abonement_status'] = abonement_statuses_text[3]
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/abonement/activator_name'] =  query.from.first_name
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i] + '/abonement/activator_id'] =  query.from.id

                                    updates['Motherbase/clients/'+ clients_array[i] + '/fitness/start_date'] = '0'
                                    updates['Motherbase/clients/'+ clients_array[i] + '/fitness/end_date'] = '0'
                                    updates['Motherbase/clients/'+ clients_array[i] + '/fitness/abonement_status'] = abonement_statuses_text[3]
                                    //updates['Basement/clients/CLIENTID/EGO_CHECK'] = order_update
                                    fb.database().ref().update(updates)

                                    bot.editMessageText(abonements_bill, {
                                        parse_mode: 'HTML',
                                        chat_id: chat.id,
                                        message_id: message_id
                                    })
                                })
                                break
                            }
                            else if (i === 0) {
                                console.log(i + 'HERE IT IS')
                                bot.editMessageText('üí≠ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
                                    chat_id: chat.id,
                                    message_id: message_id
                                })
                            }
                        }
                    })
                }
                if (query.data.includes('bytm_')){
                    bot.editMessageText(text, {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: message_id
                    })
                    .then(() => {
                        let info = query.data.split('_') 
                        let anal = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'analytics/current_data/sales')
                        anal.get().then((result) => {
                        //'bytm_' + userItem[chat.id] + '_' + result.val().name + '_' + result.val().price
                            let updates_general = {}
                            updates_general['Fitness/'+del_userdata[chat.id][0]+'analytics/current_data/sales/net_income'] = result.val().net_income + parseInt(info[3])
                            updates_general['Fitness/'+del_userdata[chat.id][0]+'analytics/current_data/sales/net_sold'] = result.val().net_sold + 1
                            updates_general['Fitness/'+del_userdata[chat.id][0]+'analytics/current_data/sales/items/items_income'] = result.val().items.items_income + parseInt(info[3])
                            updates_general['Fitness/'+del_userdata[chat.id][0]+'analytics/current_data/sales/items/items_sold'] = result.val().items.items_sold + 1
                            fb.database().ref().update(updates_general)
                        })
                        let item_detailed = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'analytics/current_data/sales/items/' + info[1])
                        item_detailed.get().then((snap) => {
                            if (snap.exists()){
                                let updates_detailed = {}
                                updates_detailed['Fitness/'+del_userdata[chat.id][0]+'analytics/current_data/sales/items/' + info[1] + '/income'] = snap.val().income + parseInt(info[3])
                                updates_detailed['Fitness/'+del_userdata[chat.id][0]+'analytics/current_data/sales/items/' + info[1] + '/sold'] = (snap.val().sold + 1)
                                fb.database().ref().update(updates_detailed)
                            }
                            else {
                                let updates_detailed = {}
                                let newitem = {
                                    income: snap.val().income + parseInt(info[3]),
                                    name: info[2],
                                    sold: (snap.val().sold + 1)
                                }
                                updates_detailed['Fitness/'+del_userdata[chat.id][0]+'analytics/current_data/sales/items/' + info[1]] = newitem
                                fb.database().ref().update(updates_detailed)
                            }                            
                        })
                    })
                }
            }
            else {
                bot.sendMessage(chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö ü•∫')
            }
        })
    
    }
})

bot.onText(/Admin_controller:GetChatInfo/, msg =>
{
    //console.log(msg)
    const chatId = msg.chat.id
    bot.sendMessage(chatId, chatId)

})
bot.onText(/\/our_programs/, msg => {
    const { chat, message_id, text } = msg
    bot.editMessageText(text, {
        chat_id: chat.id,
        message_id: message_id
    }).catch(err => {console.log('here: ' + err)})
    keyboards.ProgramCategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], fb, bot, chat.id, backtomain_text, choosecategory_text, club_name_fb[chat.id])
})
bot.onText(/\/shop/, msg => {
    const { chat, message_id, text } = msg
    bot.editMessageText(text, {
        chat_id: chat.id,
        message_id: message_id
    }).catch(err => {console.log('here: ' + err)})
    let ppl_ingroup = fb.database().ref('Fitness/'+club_name_fb[chat.id] + '/shop')
    ppl_ingroup.get().then((snapshot) => {
        if (snapshot.exists()){
            keyboards.ShopCategoriesKeyboard(shop_keyboard[chat.id], userShopCategories[chat.id], fb, bot, chat.id, backtomain_text, chooseshopcategory_text, club_name_fb[chat.id])
        }
        else {
            bot.sendMessage(chat.id, '–ú—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, –Ω–æ —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º—Å—è üòá', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtomain_text,
                            callback_data: backtomain_text
                        }]
                    ]
                }
            })
        }
    })
})
bot.onText(/\/our_coaches/, msg => {
    const { chat, message_id, text } = msg
    bot.editMessageText(text, {
        chat_id: chat.id,
        message_id: message_id
    }).catch(err => {console.log('here: ' + err)})
    keyboards.TrenersKeyboard(trener_keyboard[chat.id], userTreners[chat.id], fb, bot, chat.id, backtomain_text, choosetrener_text, club_name_fb[chat.id])
})
bot.onText(/\/start/, msg => {
    console.log(msg)
    const chatId = msg.chat.id
    current_chat = chatId
    //userstatus[chatId] = 'registered'
    if (msg.chat.type === 'private'){
        if (msg.text === '/start'){
            if (club_name_fb[chatId] !== undefined && club_name_fb[chatId] !== ''){
                //—á–µ–ª —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º –∫–ª—É–±–∞, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏ –≥–æ–≤–æ—Ä–∏–º –ø—Ä–∏–≤–µ—Ç
                
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                .then(() => {
                    anotherpoint_multiple[chatId] = 2
                    bot.sendMessage(chatId, hellomessage_text, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: keyboards.main_menu_keyboard
                        }
                    })
                    .then(() => {
                        IdentifyUser(chatId, true)
                    })
                })
            }
    
            else {
                //–ø–æ—Å—ã–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–∞–ª–æ–∫
                IdentifyUser(chatId, false)
                gym_keyboard[chatId] = []
                userGyms[chatId] = []
                keyboards.GymsKeyboard(gym_keyboard[chatId], userGyms[chatId], fb, bot, chatId, mother_link, choosegym_text)
            }
        }
        else {
            let userdata = fb.database().ref('Fitness/')
            userdata.get().then((result) => 
            {
                let clubs = Object.keys(result.val())
                for (let i = 0; i < clubs.length; i++){
                    console.log(clubs[i])
                    if (msg.text === '/start ' + clubs[i] + '_start'){
                        let temp = (msg.text).split(' ')
                        temp[1] = temp[1].split('_')
                        //
                        console.log(club_name_fb[chatId])
                        if (userstatus[chatId] === 'registered' && club_name_fb[chatId] === temp[1][0]){
                            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∞–Ω –∏ –µ–≥–æ –∫–ª—É–± —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª—É–±–æ–º –∏–∑ —Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
                            StartTraining(chatId, msg.message_id)
    
                            for (let i=0; i<100; i++){
                                bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                                    //console.log(err)
                                })
                            }
                            bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                            .then(() => {
                                anotherpoint_multiple[chatId] = 2
                                bot.sendMessage(chatId, hellomessage_text, {
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: keyboards.main_menu_keyboard
                                    }
                                })
                            })
                        }
                        else {
                            club_name_fb[chatId] = temp[1][0]
                            console.log(club_name_fb[chatId])
                            
                            for (let i=0; i<100; i++){
                                bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                                    //console.log(err)
                                })
                            }
                            bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                            .then(() => {
                                anotherpoint_multiple[chatId] = 2
                                bot.sendMessage(chatId, hellomessage_text, {
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: keyboards.main_menu_keyboard
                                    }
                                })
                                .then(() => {
                                    IdentifyUser(chatId, true)
                                })
                            })
    
                        }
                    }
                    if ((msg.text).includes('/start bp-' + clubs[i]) === true){
                        if (userstatus[chatId] !== 'registered'){
                            let temp_link = (msg.text).split(' ')
                            temp_link = temp_link[1].split('-')
                            club_name_fb[chatId] = temp_link[1]
                            IdentifyUser(chatId, false)
                            console.log('512 ' + temp_link)
                            CreateAbonement(msg.chat, temp_link)
                        }

                        else {
                            bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                            .then(() => {
                                anotherpoint_multiple[chatId] = 2
                                bot.sendMessage(chatId, '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ —ç—Ç–æ–º –∑–∞–ª–µ ü§©', {
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: keyboards.main_menu_keyboard
                                    }
                                })
                                .then(() => {
                                    IdentifyUser(chatId, false)
                                })
                            }) 
                        }
                        
                    }
                    if (msg.text === '/start clubadmin_' + clubs[i]) {
                        let cbadmin_data = fb.database().ref('Fitness/' + clubs[i] + '/chats/admin_chat')
                        cbadmin_data.get().then((result) => {
                            if (result.val() === chatId){
                                isMailingMessage[chatId] = 0
                                isChangingPrefs[chatId] = 0
                                isChangingPhone[chatId] = 0
                                isChangingTime[chatId] = 0
                                isChangingLocation[chatId] = 0
                                isChangingCashback[chatId] = 0
                                isChangingVoron[chatId] = 0
                                mailing_text[chatId] = ''
                                mailing_mode[chatId] = ''
                                club_name_fb[chatId] = clubs[i]
                                isAdmin[chatId] = true
                                messages_texts[chatId] = []
                                messages_todelete[chatId] = []
                                IdentifyUser(chatId,false)
                                bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> –∫–ª—É–±–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã.', {
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: keyboards.admin_menu_keyboard
                                    }
                                })
                                .then(res => {
                                    messages_texts[chatId][0] = res.text
                                    messages_todelete[chatId][0] = res.message_id
                                })
                            }
                        })
                    }
                }
            })
        }
    }

    if (msg.chat.type === 'group' || msg.chat.type === 'supergroup'){
        bot.getChat(chatId).then(result => {
            if (result.description !== undefined && result.description !== null){
                console.log('group: ' + result.description)
                let del_userdata = []
                del_userdata[chatId] = result.description.split('/')
                if (del_userdata[chatId].length === 3 && del_userdata[chatId][2] === (chatId).toString())(
                    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å—é–¥–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –°–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ—Å—Ç—É–ø–∏–≤—à–µ–π –Ω–∞ –í–∞—à —Å—á–µ—Ç. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç')
                )
                else {
                    bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
                        reply_markup: {
                            inline_keyboard:[
                                [{
                                    text: 'ctOS ü§ñ',
                                    url: mother_link
                                }]
                            ]
                        }
                    })
                }
            }
            else {
                bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
                    reply_markup: {
                        inline_keyboard:[
                            [{
                                text: 'ctOS ü§ñ',
                                url: mother_link
                            }]
                        ]
                    }
                })
            }
        })
    }
})
bot.onText(/\/start_training/, msg => {
    const { chat, message_id, text } = msg
    IdentifyUser(chat.id, true)
    bot.deleteMessage(chat.id, message_id)
    if (userstatus[chat.id] !== 'registered'){
        bot.editMessageText('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. –°–∞–º–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å!', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id - 1,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtomain_text,
                        callback_data: backtomain_text
                    }],
                    [{
                        text: keyboards.main_menu_buttons[1][0],
                        callback_data: keyboards.main_menu_buttons[1][1]
                    }]
                ]
            }
        })
    }
})
bot.onText(/\/im_admin/, msg => {
    const { chat, message_id, text } = msg
    for (let i=0; i<100; i++){
        bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
            //console.log(err)
        })
    }
    let cbadmin_data = fb.database().ref('Fitness/' + club_name_fb[chat.id] + '/chats/admin_chat')
    cbadmin_data.get().then((result) => {
        if (result.val() === chat.id){
            isMailingMessage[chat.id] = 0
            isChangingPrefs[chat.id] = 0
            isChangingPhone[chat.id] = 0
            isChangingTime[chat.id] = 0
            isChangingLocation[chat.id] = 0
            isChangingCashback[chat.id] = 0
            isChangingVoron[chat.id] = 0
            mailing_text[chat.id] = ''
            mailing_mode[chat.id] = ''
            isAdmin[chat.id] = true
            messages_texts[chat.id] = []
            messages_todelete[chat.id] = []
            IdentifyUser(chat.id,false)
            bot.sendMessage(chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> –∫–ª—É–±–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã.', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboards.admin_menu_keyboard
                }
            })
            .then(res => {
                messages_texts[chat.id][0] = res.text
                messages_todelete[chat.id][0] = res.message_id
            })
        }
        else {
            bot.sendMessage(chat.id,  text_notadmin[Math.floor(Math.random() * text_notadmin.length)])
        }
    })
})

function IdentifyUser(current_chat, isTraing){

    console.log(club_name_fb[current_chat])

    deelay[current_chat] = ms => {
        return new Promise(r => setTimeout(() => r(), ms))
    }

    user_phone[current_chat] = ''
    user_email[current_chat] = 'unknown'
    user_adress[current_chat] = ''
    user_name[current_chat] = ''
    user_username[current_chat] = 'unknown'
    user_id[current_chat] = 0
    average_price[current_chat] = 0
    average_purchases[current_chat] = 0
    user_coins[current_chat] = 0
    added_coins[current_chat] = 0
    favourite_program[current_chat] = 'unknown'
    abonements_bought[current_chat] = 0
        userstatus[current_chat] = 'unknown'
    order_name[current_chat] = ''
    order_date[current_chat] = ''
    abonement_status[current_chat] = 'unknown'
    skidka[current_chat] = 0
    //user_lastbill[current_chat] = []
    user_mailingdata[current_chat] = []

    finalprice[current_chat] = 0
    finalbasket[current_chat] = ''
    temp_backet_food[current_chat] = 0
    temp_progtypes_text[current_chat] = ''
    temp_program_types[current_chat] = []
    myprogram_type[current_chat] = []
    temp_foodamount[current_chat] = 1

    basket[current_chat] = []

    food_categories[current_chat] = [['‚òïÔ∏è –ö–æ—Ñ–µ', 0, 'coffee'], ['üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ', 0, 'icecream'], ['üç£ –°—É—à–∏', 0, 'sushi'], ['üç∞ –î–µ—Å–µ—Ä—Ç—ã', 0, 'deserts'], ['üçî –§–∞—Å—Ç-—Ñ—É–¥', 0, 'fastfood'], ['–û—Å—Ç–∞–ª—å–Ω–æ–µ', 0, 'other']]

    add_info_msg[current_chat] = 0

    anotherpoint_multiple[current_chat] = 0

    temp_message[current_chat] = 0
    userCity[current_chat] = 0 // 0-NurSultan, 1-Almaty
    userPoint[current_chat] = 0
    //
    userCategory[current_chat] = ''
    userCategories[current_chat] = []
    category_keyboard[current_chat] = []
    categories_count[current_chat] = 0
    //
    userProgram[current_chat] = ''
    userProgrammesList[current_chat] = []
    programmes_keyboard[current_chat] = []
    foodlist_count[current_chat] = 0
    //
    userCity[current_chat] = ''
    userCities[current_chat] = []
    userPoint[current_chat] = ''
    userPoints[current_chat] = []
    cities_keyboard[current_chat] = []
    points_keyboard[current_chat] = []
    cities_count[current_chat] = 0
    points_count[current_chat] = 0

    trener_keyboard[current_chat] = []
    userTreners[current_chat] = []
    userTrener[current_chat] = ''

    isMakingChanges[current_chat] = 0
    isMakingChanges_2[current_chat] = 0

    userlocation[current_chat] = [0.1,0.1]
    nearest_place[current_chat] = 0
    min_distance[current_chat] = 9999999

    buttons_message[current_chat] = 0
    messages_todelete[current_chat] = []
    messages_texts[current_chat] = []
    
    answered_feedback[current_chat] = 0
    isAnswered_feedback[current_chat] = 0

    user_payingmethod[current_chat] = ''
    user_timescame[current_chat] = 0

    operators_chat[current_chat] = 0
    types_keyboard[current_chat] = []

    waitlist[current_chat] = ''
    //club_name_fb[current_chat] = ''

    userGyms[current_chat] = []
    gym_keyboard[current_chat] = []

    card_data[current_chat] = []
    point_location[current_chat] = []

    morning_time[current_chat] = []
    evening_time[current_chat] = []

    shop_keyboard[current_chat] = []
    userShopCategories[current_chat] = []
    userShopCategory[current_chat] = ''

    shopitems_keyboard[current_chat] = []
    userItemsList[current_chat] = []
    userItem[current_chat] = ''
    userItemPrice[current_chat] = 0

    programme_pas[current_chat] = ''

    user_freezeamount[current_chat] = 0

/*     suggestgoodskidka_text[current_chat][0] = '–Ø –ø–æ–¥—É–º–∞—é...'
    suggestgoodskidka_text[current_chat][1] = 'sgstgdskdk_cb'
    suggestmiddleskidka_text[current_chat][0] = '–Ø –ø–æ–¥—É–º–∞—é...'
    suggestmiddleskidka_text[current_chat][1] = 'sgstmdskdk_cb'
    suggestbadskidka_text[current_chat][0] = '–Ø –ø–æ–¥—É–º–∞—é...'
    suggestbadskidka_text[current_chat][1] = 'gstbdskdk_cb' */

    if (club_name_fb[current_chat] !== undefined){
        var other_data = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/other_info')
        other_data.get().then((snapshot) => 
        {
            help_phone[current_chat] = snapshot.val().contact_phone
            point_location[current_chat][0] = snapshot.val().latitude
            point_location[current_chat][1] = snapshot.val().longitude
            point_adress[current_chat] = snapshot.val().adress_text
    
            morning_time[current_chat] = snapshot.val().morning_time
            morning_time[current_chat] = snapshot.val().morning_time.split('-')
            morning_time[current_chat][0] = morning_time[current_chat][0].split(':')
            morning_time[current_chat][1] = morning_time[current_chat][1].split(':')
    
            evening_time[current_chat] = snapshot.val().evening_time
            evening_time[current_chat] = snapshot.val().evening_time.split('-')
            evening_time[current_chat][0] = evening_time[current_chat][0].split(':')
            evening_time[current_chat][1] = evening_time[current_chat][1].split(':')
    
            support_username[current_chat] = snapshot.val().support_username
    
            card_data[current_chat][0] = snapshot.val().kaspi_phone
            card_data[current_chat][1] = snapshot.val().card
            card_data[current_chat][2] = snapshot.val().fio
    
        })
    
        var loyalsys_data = fb.database().ref('Fitness/'+ club_name_fb[current_chat] + '/loyal_system/')
        loyalsys_data.get().then((snapshot) => 
            {
                cashback[current_chat] = snapshot.val().cashback
                max_cashback[current_chat] = snapshot.val().max_cashback
                min_cashback[current_chat] = snapshot.val().min_cashback
                min_price[current_chat] = snapshot.val().min_price
            }
        )
        
        var chats_data = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/chats')
            chats_data.get().then((snapshot) => 
            {
                admin_id[current_chat] = snapshot.val().admin_chat
                operators_chat[current_chat] = snapshot.val().operators_chat
                console.log('!!! ' + admin_id[current_chat] + ' ' + operators_chat[current_chat])
            }
        )
    
        //—Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—Ä–µ–≥–∞–Ω –ª–∏ —é–∑–µ—Ä. –ï—Å–ª–∏ –¥ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        let identifyes = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/clients/' + current_chat);
        identifyes.get().then((snapshot) => {
            if (snapshot.exists()){
                userstatus[current_chat] = 'registered'
                user_coins[current_chat] = snapshot.val().coins
                user_email[current_chat] = snapshot.val().email
                favourite_program[current_chat] = snapshot.val().favourite_program
                user_name[current_chat] = snapshot.val().name
                abonements_bought[current_chat] = snapshot.val().abonements_bought
                user_timescame[current_chat] = snapshot.val().times_came
                user_phone[current_chat] = snapshot.val().phone
    
                myprogram_type[current_chat][6] = snapshot.val().abonement.name
                myprogram_type[current_chat][2] = snapshot.val().abonement.time
                myprogram_type[current_chat][4] = snapshot.val().abonement.visits
                myprogram_type[current_chat][5] = snapshot.val().abonement.freeze_amount
                myprogram_type[current_chat][0] = snapshot.val().abonement.period
                myprogram_type[current_chat][1] = snapshot.val().abonement.price
                user_payingmethod[current_chat] = snapshot.val().paying_method
    
                if (isTraing === true){
                    const temp_tex = '–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –í—ã <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å–≤–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.</b>'
                    bot.sendMessage(current_chat, temp_tex, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: accepttraining_text[0],
                                    callback_data: accepttraining_text[1]
                                },{
                                    text: refusetraining_text[0],
                                    callback_data: refusetraining_text[1]
                                }]
                            ],
                        }
                    })
                }
                
            }
            else {
                userstatus[current_chat] = 'unregistered'
            }
        }).catch(err => {console.log('1 ' + err)})
    }


}

function CreateAbonement(chat, temp_link){

    let updates = {};
    user_name[chat.id] = chat.first_name
    user_coins[chat.id] = 0
    user_email[chat.id] = 'unknown'
    user_phone[chat.id] = 'unknown'
    abonements_bought[chat.id] = 0
    favourite_program[chat.id] = temp_link[3]
    user_timescame[chat.id] = 0
    user_payingmethod[chat.id] = user_payingmethods[1][0]
    userProgram[chat.id] = temp_link[3]
    userCategory[chat.id] = temp_link[2]
    discountvalues[chat.id] = []
    programdiscount[chat.id] = 0

    suggestgoodskidka_text[chat.id] = ['–Ø –ø–æ–¥—É–º–∞—é...', 'sgstgdskdk_cb', 'üëã –ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑. –°–ª—É—à–∞–π, –º—ã —Ç—É—Ç –ø–æ–¥—É–º–∞–ª–∏ –∏ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ <b>—Å–∫–∏–¥–∫—É –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ —Ç–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.</b> –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å! </b>']
    suggestmiddleskidka_text[chat.id] = ['–Ø –ø–æ–¥—É–º–∞—é...', 'sgstmdskdk_cb']
    suggestbadskidka_text[chat.id] = ['–Ø –ø–æ–¥—É–º–∞—é...', 'sgstbdskdk_cb']

    if (temp_link[4] !== 'onetime'){
        console.log('full time')
        programme_pas[chat.id] = 'Fitness/' + temp_link[1] + '/Program/categories/' + temp_link[2] + '/programmes/' + temp_link[3]

        let userdata = fb.database().ref('Fitness/' + temp_link[1] + '/Program/categories/' + temp_link[2] + '/programmes/' + temp_link[3]/*  + '/types/' + temp_link[4] */)
        userdata.get().then((result) => 
        {
            let username = []
            username[chat.id] = "undefined"
            if (chat.username != undefined) username[chat.id] = chat.username.toString()
            
            let userdata2 = fb.database().ref('Fitness/' + temp_link[1] + '/Program/categories/' + temp_link[2] + '/programmes/' + temp_link[3] + '/types/' + temp_link[4])
            userdata2.get().then((result2) => {
    
            abonements_bill_topic = abonement_bill_topic_names[0]
            abonemets_bill_client_info = `
    
<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

`
        abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + result.val().name + `
‚îú –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ` + result2.val().period + ` –º–µ—Å.
‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: ` + result2.val().price + `  —Ç–µ–Ω–≥–µ.

`

    if (result2.val().time === 'unlimited'){
        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
    }
    
    if (result2.val().time !== 'unlimited'){
        if (result2.val().time === 'morning'){
            abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + morning_time[chat.id][0][0] + `:` + morning_time[chat.id][0][1] + ` –¥–æ ` + morning_time[chat.id][1][0] + `:` + morning_time[chat.id][1][1] 
        }
    
        if (result2.val().time === 'evening'){
            abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + evening_time[chat.id][0][0] + `:` + evening_time[chat.id][0][1] + ` –¥–æ ` + evening_time[chat.id][1][0] + `:` + evening_time[chat.id][1][1] 
        }
    }
    
    if (result2.val().visits === 'unlimited'){
        abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
    }
    
    if (result2.val().visits !== 'unlimited'){
        abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + result2.val().visits
    }
    
    if (result2.val().is_freeze === false){
        abonements_bill_order_info += `
‚îî –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏`
    }
    
    if (result2.val().is_freeze !== false){
        abonements_bill_order_info += `
‚îî –ö–æ–ª-–≤–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫: ` + result2.val().is_freeze + ` –¥–Ω–µ–π.`
    }
    
        console.log('order_date! ' + order_date[chat.id])
        abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info
        //console.log('last message id: ' + query.message.message_id)
    
                let newuser = {
                    coins: user_coins[chat.id],
                    email: user_email[chat.id],
                    favourite_program: favourite_program[chat.id],
                    id: chat.id,
                    name: user_name[chat.id],
                    phone: user_phone[chat.id],
                    username: username[chat.id],
                    abonements_bought: 0,
                    times_came: 0,
                    bill_text: abonements_bill,
                    programme_pas: programme_pas[chat.id],
                    abonement: {
                        name: result.val().name,
                        time: result2.val().time,
                        visits: result2.val().visits,
                        freeze_amount: result2.val().is_freeze,
                        period: result2.val().period,
                        price: result2.val().price,
                        freeze_start: '0',
                        start_date: '0',
                        end_date: '0',
                        abonement_status: abonement_statuses_text[0],
                        activator_name: 'unknown',
                        activator_id: 'unknown',
                        paying_method: user_payingmethod[chat.id]
                    }
                }
          
                order_name[chat.id] = 'Fitness/'+temp_link[1]+'/clients/' + chat.id
                console.log('ORDER NAME: ' + order_name[chat.id])
            
                userstatus[chat.id] = 'registered'
                club_name_fb[chat.id] = temp_link[1]
                updates[order_name[chat.id]] = newuser
            
                fb.database().ref().update(updates)
                StartCheckingOrder(chat.id)
    
                /* deelay[chat.id](10000/* 2*3600000 ).then(() => {
                    bot.sendMessage(chat.id, howdoyoulikeourtraining_text)
                    .then(() => {
                        bot.sendPoll(chat.id, feedback_options, {
                            is_anonymous: false
                        })
                    })
                }) */
    
                let cr_chat = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/chats/');
                cr_chat.get().then((snapshot) => {
                    operators_chat[chat.id] = snapshot.val().operators_chat
                    console.log('IT WORKS: ' + operators_chat[chat.id])
            
                    bot.sendMessage(operators_chat[chat.id], abonements_bill, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard:[
                                [{
                                    text: '‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç',
                                    callback_data: accept_order_callback + chat.id
                                }],
                                [{
                                    text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                                    callback_data: refuse_order_callback + chat.id
                                }]
                            ]
                        }
                    }).then(() => {
                        bot.sendMessage(chat.id, abonementrequest_sended, {
                            reply_markup: {
                                keyboard: unregistered_keyboard[3],
                                resize_keyboard: true
            
                            }
                        })
                    })
                })
            })
            
        })
    }

    if (temp_link[4] === 'onetime'){
        console.log('!onetime')
        programme_pas[chat.id] = 'Fitness/' + temp_link[1] + '/Program/categories/' + temp_link[2] + '/programmes/' + temp_link[3] + '/types/' + temp_link[4]

        let discount = fb.database().ref('Fitness/' + temp_link[1] + '/discounts/')
        discount.get().then((result) =>{

            discountvalues[chat.id][0] = result.val().goodvalue
            discountvalues[chat.id][1] = result.val().middlevalue
            discountvalues[chat.id][2] = result.val().badvalue
            discountvalues[chat.id][3] = result.val().maxvalue

            suggestgoodskidka_text[chat.id][2] = 'üëã –ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑. –°–ª—É—à–∞–π, –º—ã —Ç—É—Ç –ø–æ–¥—É–º–∞–ª–∏ –∏ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ <b>'+ discountvalues[chat.id][0] +'% —Å–∫–∏–¥–∫—É –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ —Ç–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.</b> –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å!'
            suggestmiddleskidka_text[chat.id][2] = 'üëã –ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑. –°–ª—É—à–∞–π, –º—ã —Ç—É—Ç –ø–æ–¥—É–º–∞–ª–∏ –∏ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ <b>'+ discountvalues[chat.id][1] +'% —Å–∫–∏–¥–∫—É –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ —Ç–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.</b> –û–±–µ—â–∞–µ–º —É—á–µ—Å—Ç—å –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–µ–¥–æ—á–µ—Ç—ã!'
            suggestbadskidka_text[chat.id][2] = 'üëã –ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑. –ù–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–∞–ª—å, —á—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞. –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —ç—Ç–∏–º. –ê –ø–æ–∫–∞, —á—Ç–æ –¥—É–º–∞–µ—à—å –Ω–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –≤ <b>'+ discountvalues[chat.id][2] +'% –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ —Ç–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.</b> –î–∞–π –Ω–∞–º –µ—â–µ –æ–¥–∏–Ω —à–∞–Ω—Å ü•∫'
        })
        let anal = fb.database().ref('Fitness/' + temp_link[1] + '/analytics/current_data/audience/conversions/')
        anal.get().then((an) =>{
            let mini_update = {}
            mini_update['Fitness/' + temp_link[1] + '/analytics/current_data/audience/conversions/onetime'] = (an.val().onetime + 1)
            fb.database().ref().update(mini_update)
        })
        bot.sendSticker(chat.id, sticker_trainstarted[Math.floor(Math.random() * sticker_trainstarted.length)])
        .then(() => {
            bot.sendMessage(chat.id, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞ –∏ –≤–ø–µ—Ä–µ–¥ üëç', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: backtomain_text,
                            callback_data: backtomain_text
                        }]
                    ]
                }
            }).then(res => {
                messages_todelete[chat.id][5] = res.message_id
            })
        })
        

        deelay[chat.id](/* 10000 */ 7200000 ).then(() => 
        {
            bot.deleteMessage(chat.id, messages_todelete[chat.id][5])
            .catch(err => {messages_todelete[chat.id][5] = null})
            .then(() => {messages_todelete[chat.id][5] = null})

            bot.sendPoll(chat.id, howdoyoulikeourtraining_text , feedback_options, 
                {
                    is_anonymous: false
                })
        })
    }

}

process.on('uncaughtException', function (err) {
    console.log(err)
    let userdata = fb.database().ref('Motherbase/logger/uncaughtException/')
    userdata.get().then((result) => {
        let counter = Object.keys(result.val())

        let date = new Date()
        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
        let timeOfffset = 6 //Astana GMT +6
        let time_now = new Date(utcTime + (3600000 * timeOfffset))

        let updates = {}
        let newreport = {
            who: 'ID:' + current_chat + ', phone: ' + user_phone[current_chat],
            when: time_now,
            club: 'club_name: ' + club_name_fb[current_chat],
            error_text: err.message.toString(),
            error_stack: err.stack.toString()
        }
        updates['Motherbase/logger/uncaughtException/' + counter.length] = newreport
        fb.database().ref().update(updates)
        let mb_data = fb.database().ref('Motherbase/chats/')
        mb_data.get().then((result) => {
            let err_txt = `<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è</b>
–í —Ä–∞–±–æ—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞ FITNESS –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.

<b>‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: </b>
‚îú –ö–ª—É–±: `+ club_name_fb[current_chat] + `
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID: ` + current_chat + `, –¢–µ–ª–µ—Ñ–æ–Ω: ` + user_phone[current_chat] + `
‚îî –í—Ä–µ–º—è: ` + time_now + `

<b>üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: </b>
` + err.name.toString() + `

` + err.stack.toString() + `

` + err.message.toString()
            bot.sendMessage(result.val().god_id, err_txt, {
                parse_mode: 'HTML'
            })
        })
    
    })
    
})