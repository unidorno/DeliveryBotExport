const TelegramBot = require('node-telegram-bot-api')
//const mongoose = require('mongoose')
var GeoPoint = require('geopoint')
const debug = require('./helpers')
const config = require('./config')
const database = require('./database.json')
const keyboards = require('./src/keyboard-buttons')
const NodeGeocoder = require('node-geocoder');
//const firebase = require('./firebase_connect')
console.log('bot has been started...')

//====================INITIALIZE FIREBASE==============================
const firebase_connect = require('firebase')
const { reset } = require('nodemon')

const fb = firebase_connect.initializeApp({
    apiKey:'AIzaSyA0wSxSsB938N4mKpV5Nec0tBWbpPFyZAQ',
    authDomain:'upperrestaurant.firebaseapp.com',
    databaseURL: 'https://upperrestaurant-default-rtdb.europe-west1.firebasedatabase.app'
})

//====================================================================

const bot = new TelegramBot(config.TOKEN,
    {
        polling:
            {
                interval: 300,
                autoStart: true,
                params: {
                    timeout: 10
                }
            }
    })

// text variables
let admin_id = []
let operators_chat = []
let current_chat = 0
let support_username = []

let temp_message = []
let userCity = [] // 0-NurSultan, 1-Almaty
let userCities = []
let userPoint = []
let userPoints = []
let cities_keyboard = []
let points_keyboard = []
let cities_count = []
let points_count = []
//
let userCategory = []
let userCategories = []
let category_keyboard = []
let categories_count = []
//
let userGyms = []
let gym_keyboard = []
let mother_link = 'https://t.me/ctos_nursultan'
let choosegym_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Ä—Ç–∑–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å '
//
let userProgram = []
let userProgrammesList = []
let programmes_keyboard = []
let trener_keyboard = []
let userTreners = []
let userTrener = []
const choosetrener_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–º –±–æ–ª—å—à–µ:'
let foodlist_count = []
//
let shop_keyboard = []
let userShopCategories = []
let chooseshopcategory_text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:'
let userShopCategory = []

let shopitems_keyboard = []
let userItemsList = []
let anothershopcategory_text = '‚óÄÔ∏è –î—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
let chooseitem_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:'
let userItem = []
let userItemPrice = []

let waitlist = []

/////////////////////////////////////////////////////////////////
let anotherpoint_multiple = []
let club_name_fb = []

let card_instructions_text = `<b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>

‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç?
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–¥–∞—Å—Ç –í–∞–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ" —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. 
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –∑–∞–ª–µ, –≤–∞–º –Ω—É–∂–Ω–æ –ª–∏–±–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –Ω–∞ —Ä–µ—Å–µ–ø—à–Ω–µ, –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞. –ü–æ–∫–∞–∂–∏—Ç–µ —ç–∫—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞ –∏ –≤–ø–µ—Ä–µ–¥!

üí∞ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç? 
–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ KASPI –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É. –ù–∏–∂–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. –í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –§–ò–û, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ –∑–¥–µ—Å—å. –¢–∞–∫ –º—ã –ø–æ–π–º–µ–º, –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"‚òëÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç.`
/////////////////////////////////////////////////////
let cash_instructions_text = `<b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>

‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç?
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–¥–∞—Å—Ç –í–∞–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ" —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. 
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –∑–∞–ª–µ, –≤–∞–º –Ω—É–∂–Ω–æ –ª–∏–±–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –Ω–∞ —Ä–µ—Å–µ–ø—à–Ω–µ, –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞. –ü–æ–∫–∞–∂–∏—Ç–µ —ç–∫—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞ –∏ –≤–ø–µ—Ä–µ–¥!

üí∞ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏? 
–ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞ –Ω–∞ —Ä–µ—Å–µ–ø—à–Ω–µ –∏ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏. –ü–æ–∫–∞–∂–∏—Ç–µ –µ–º—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"‚òëÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>. –°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç. `
const choosepoint_text = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'
const backtoprogramme_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'backtoprogramme_cb']
const backtofillinginfo_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'backtofilling_cb']
const backtochoosepaingmethod_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'backtopme_cb']
const ihavepaid_text = ['‚òëÔ∏è –Ø –æ–ø–ª–∞—Ç–∏–ª', 'ivepaid_cb']
const accepttraining_text = ['‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'accpwarng_cb']
const refusetraining_text = ['–ù–∞–∑–∞–¥', 'rfswarng_cb']
const backtotreners_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'backtotreners_cb']
const buyitem_text = ['üü¢ –ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä', 'buyitem_clbck']
const backtoitemslist_text = ['‚óÄÔ∏è –ù–∞–∑–∞–¥', 'bcktoitemslst_cb']
const dontuseskidka_text = ['–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', 'dontuseskidka_cb']
const useskidka_text = ['–î–∞, —Ö–æ—á—É!', 'useskidka_cb']
const igotmyitem_text = ['‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω','igtmtm_cb']
const youchosepoint_text = 'üõí –ó–∞–∫–∞–∑–∞—Ç—å –∑–¥–µ—Å—å'
const anotherpoint_text = '‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ'
const backtomain_text = '‚óÄÔ∏è –ù–∞–∑–∞–¥'
const anothercategory_text = '‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø'
let hellomessage_text = `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –í–∞—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞. –°–æ –º–Ω–æ–π –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∑–∞–Ω—è—Ç–∏–π, –∞ —Ç–∞–∫–∂–µ –∫—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç`
const youchosecafe_text = '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ñ–µ–π–Ω—é Coffee BOOM, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: '
const sendlocation = 'üìç –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'
const choosecategory_text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:</b>'
const chooseprogramme_text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>'
const addto_basket_text = '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'
const changefoodamount_basket_text = '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
const addto_basket_text2 = '–ì–æ—Ç–æ–≤–æ'
const addto_basket_text3 = '–ì–æ—Ç–æ–≤–æ.'
const dont_addto_basket_text2 = 'üóë –£–¥–∞–ª–∏—Ç—å'
const anotherprogram_text = '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥—Ä—É–≥–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º'
const anotherfood_text2 = '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É'
const fillabonement_text = '–û—Ñ–æ—Ä–º–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç ‚ñ∂Ô∏è'
const chooseamountoffood_text = '–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '
const editbasket_text = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É'
const paybasket_text = '‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'
const youwanttochangepoint_text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –≤ –¥—Ä—É–≥–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏? –ü—Ä–∏ —Å–º–µ–Ω–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–¥–µ—Ç—Å—è –≤—ã–±–∏—Ä–∞—Ç—å –±–ª—é–¥–∞ —Å–Ω–æ–≤–∞'
const query_deletethismessage = '–ù–µ—Ç, –Ω–µ —Ö–æ—á—É'
const choosefoodtoedit_text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:'
const delete_basketfood = 'üóë  –£–¥–∞–ª–∏—Ç—å'
const basketisempty_text = '–¢–µ–ø–µ—Ä—å –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è. –î–∞–≤–∞–π –Ω–∞–ø–æ–ª–Ω–∏–º –µ–µ üòè'
const mybasket_text = 'üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞'
const myabonement_status = 'üßæ –°—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞'
const choosetime_text = '–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑? (–º–∏–Ω. 15 –º–∏–Ω)'
const chooseanothertime_text = '‚è≥ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è'
const paybutton_text = 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å'
const location_text = 'üìç –ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è?'
const phone_text = 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º'
const didyougetorder_text = '–í—ã —Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑? –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –º–æ–≥—É—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è'
const yesigotorder_text = '–î–∞, –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω'
const noigotorder_text = '–Ø –µ—â–µ –Ω–µ –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑'
const almostthere_text = 'ü§ó –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ –§–ò–û'
const dataiscorrect_text = '‚úîÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
const almostthere2_text = '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ "'+ dataiscorrect_text +'"'
const order_status_button = 'üö¥‚Äç‚ôÇÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
const coins_text = 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å'
const start_training_text = '‚è± –ù–∞—á–∞—Ç—å'
const add_email = 'üîó –î–æ–±–∞–≤–∏—Ç—å email'
const dont_add_email = '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ'
const spendmycoins = '–î–∞, —Ö–æ—á—É'
const dontspendmycoins = '–ù–µ—Ç'
const gotomain_text = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
const declineorder_button = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'
let help_phone = []
const didntaddemail_text = 'üòï –ñ–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π email. –≠—Ç–æ –µ—â–µ –æ–¥–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
const emailalreadyadded_text = '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å! –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –µ—â–µ –æ–¥–∏–Ω –∑–∞–∫–∞–∑: '
const badfeedback_text = 'üôÅ –ù–∞–º –∂–∞–ª—å, —á—Ç–æ –í—ã –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–æ–π. –°–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?'
const goodfeedback_text = 'üëç –û—Ç–ª–∏—á–Ω–æ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å'
const dopblank_text = `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã. 
‚ùóÔ∏è –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω—É–∂–Ω–æ –≤ –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–ª—É–±–µ. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω`
const no_sdacha_text = '–ë–µ–∑ —Å–¥–∞—á–∏ üëç'
const no_howtocome_text = '–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å'

const changeamountof_persons = '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω'
const changepaying_method = '–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'
const changedeliver_date = '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏'
const dataiscorrect2_text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ'

const leavecomment = '‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤'
const dontleavecomment = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑'
/////////////////////////////////////////////////////////////////
const openkeyboard_pic = 'https://storage.googleapis.com/upperrestaurant.appspot.com/Fitness/Force/howtoopen_keyboard.jpg'
const sticker_hello = ['CAACAgIAAxkBAAMGYM3C1lBqxud-dg-iowVRkGW414MAAoMBAAIlA1IPWNNtHfsPGS0fBA', 'CAACAgIAAxkBAAIDqWDPepkl_U4La4z9-HJyBBHW-F3NAAKAAQACJQNSD7tHz-822-uaHwQ', 'CAACAgIAAxkBAAIDqmDPer1wMJFpjCOvjVn2mw9Va9ADAAKWAQACJQNSD1GYpaVpXb4FHwQ', 'CAACAgIAAxkBAAIDq2DPesqIO4cmZW7tzYiXN1ig0YSHAAKaAQACJQNSD6tgF3kuPi0sHwQ']
const sticker_success = 'CAACAgIAAxkBAAIG2mDQ-q0bypXtUaXFQsyObqaRI94tAAKHAQACJQNSD-j7MBUjpIIaHwQ'
const sticker_baddeliver = 'CAACAgIAAxkBAAIOamDD28hX7Watn4Rp6qHAHzXyJJNSAAL2WAACns4LAAFuAwYAAZJBuukfBA'
const sticker_gooddeliver = 'CAACAgIAAxkBAAIOa2DD3FBUep_gdhzbMSkCtAd_SxY4AALuWAACns4LAAGLlC_BC-4ctR8E'

/////////////////////////////////////////////////////////////////
let basket = [] //–∫–æ—Ä–∑–∏–Ω–∞ (–º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤)
let decrease_foodcount = '-'
let increase_foodcount = '+'
let decrease_foodcount2 = '.-.'
let increase_foodcount2 = '.+.'
let temp_foodamount = []
//let food_categories = [['‚òïÔ∏è –ö–æ—Ñ–µ', 0, 'coffee'], ['üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ', 0, 'icecream'], ['üç£ –°—É—à–∏', 0, 'sushi'], ['üç∞ –î–µ—Å–µ—Ä—Ç—ã', 0, 'deserts'], ['üçî –§–∞—Å—Ç-—Ñ—É–¥', 0, 'fastfood'], ['–û—Å—Ç–∞–ª—å–Ω–æ–µ', 0, 'other']]
let food_categories = []
let temp_program_types = [] //
let myprogram_type = []
let temp_food_text = [] //
let temp_backet_food = [] //
let finalbasket = [] //
let finalprice = [] //
let finaltime_deelay = ''
let finaltime = new Date()

//food_categories[current_chat] = [['‚òïÔ∏è –ö–æ—Ñ–µ', 0, 'coffee'], ['üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ', 0, 'icecream'], ['üç£ –°—É—à–∏', 0, 'sushi'], ['üç∞ –î–µ—Å–µ—Ä—Ç—ã', 0, 'deserts'], ['üçî –§–∞—Å—Ç-—Ñ—É–¥', 0, 'fastfood'], ['–û—Å—Ç–∞–ª—å–Ω–æ–µ', 0, 'other']]
//basket[current_chat] = []

///////////–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏///////////
let cashback = []
let max_cashback = []
let min_cashback = []
let min_price = []
let max_pay_percentage = 0
let min_pay_percentage = 0
let percent_foremail = 0
let skidka = [] //[current_chat]

///////////–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏///////////
let cheap_max = 0
let group_buys_amount = 0
let reach_min = 0

///////////////–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ//////////////////
let user_phone = []
let user_email = []
let user_adress = []
let user_name = []
let user_username = []
//let user_lastbill = []
let user_id = []
let average_price = []
let average_purchases = []
let user_coins = []
let added_coins = []
let favourite_program = []
let abonements_bought = []
let userstatus = []
let order_name = []
let order_date = []
let abonement_status = []

let user_payingmethod = []
let user_payingmethods = [['–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ','payingtocard_callback'], ['–ù–∞–ª–∏—á–Ω—ã–µ', 'payingcash_callback']]
let user_timescame = []

/* user_phone[current_chat] = ''
user_email[current_chat] = ''
user_adress[current_chat] = ''
user_name[current_chat] = ''
user_username[current_chat] = 'unknown'
user_id[current_chat] = 0
average_price[current_chat] = 0
average_purchases[current_chat] = 0
user_coins[current_chat] = 0
added_coins[current_chat] = 0
favourite_food[current_chat] = 'unknown'
alltime_purchases_amount[current_chat] = 0
userstatus[current_chat] = 'unknown'
order_name[current_chat] = ''
order_date[current_chat] = ''
order_status[current_chat] = 'unknown'
skidka[current_chat] = 0 */

/* finalprice[current_chat] = 0
finalbasket[current_chat] = ''
temp_backet_food[current_chat] = 0
temp_food_text[current_chat] = ''
temp_food_price[current_chat] = 0
temp_foodamount[current_chat] = 1 */

let abonement_statuses_text = ['–í –æ–±—Ä–∞–±–æ—Ç–∫–µ ‚è≥', '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω', '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω', '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω']
let feedback_options = ['ü§© - –û—Ç–ª–∏—á–Ω–æ', 'üòå - –•–æ—Ä–æ—à–æ', 'üòí - –ü–ª–æ—Ö–æ']
let answered_feedback = []
let isAnswered_feedback = []
///////////////////////////////////////////////////////

//////////////////QUERY USER DATA//////////////////////
const changename_text = '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'
const changephone_text = '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä'
const changeadress_text = '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'
let isMakingChanges = []
let isMakingChanges_2 = []
let isMakingChanges_3 = []
///////////////////////////////////////////////////////

let delivery_min_price = 0
let delivery_price = 0
let point_location = []
let point_adress = []
let morning_time = []
let evening_time = []
let card_data = []
const abonementrequest_sended = '‚è≥ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ —É–≤–∏–¥–∏—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ–≥–æ. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫.'

var userlocation = []
var nearest_place = [] //–Ω–æ–º–µ—Ä –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è(–≤ –º–∞—Å—Å–∏–≤–µ)
var min_distance = []

//////////////////DATA FOR DELIVERS//////////////////////
let abonement_bill_topic_names = ['üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!', '‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω ', '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω']
let accept_order_callback = 'acc_n'
let refuse_order_callback = 'ref_n'
let isdelivered_callback = 'del_c'
let choosetype_callback = 'chstpe_'
let abonements_bill = ''
let abonements_bill_topic = ''
let abonemets_bill_client_info = ''
let abonements_bill_order_info = ''
let deliver_bill_finalprice = 0
let deliver_bill_order_details = ''
let accepted_order_name = ''
let deliver_bill_help_info = ''
///////////////////////////////////////////////////////

////////////////////MESSAGES_COUNTER////////////////////
let add_info_msg = []
let buttons_message = []
let messages_todelete = []
let messages_texts = []
///////////////////////////////////////////////////////
let types_keyboard = []
let unregistered_keyboard = []
unregistered_keyboard[0] = [
    [{
        text: mybasket_text
    }],
    [{
        text: paybasket_text
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]
unregistered_keyboard[1] = [
    [{
        text: start_training_text
    },{
        text: myabonement_status
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]
unregistered_keyboard[2] = [
    [{
        text: order_status_button
    },{
        text: myabonement_status
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]

unregistered_keyboard[3] = [
    [{
        text: myabonement_status
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]

let registered_keyboard = []
registered_keyboard[0] = [
    [{
        text: start_training_text
    }],
    [{
        text: gotomain_text
    }],
    [{
        text: location_text
    },{
        text: phone_text
    }]
]

 //console.log(new Date(1630346400000) + '   |   ' + new Date(1624205621683))
function StartCheckingOrder(chat){
    let order_data = fb.database().ref(order_name[chat] + '/abonement/abonement_status')
    order_data.on('value', (result) => 
    {
        abonement_status[chat] = result.val()
        console.log('ORDER STATUS: ' + result.val() + ', name: "' + order_name[chat] + '"')

        if (abonement_status[chat] === abonement_statuses_text[3]){
            bot.sendMessage(chat, '–ù–∞–º –∂–∞–ª—å, –Ω–æ –º—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –í–∞—à –∑–∞–∫–∞–∑. –ï—Å–ª–∏ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ' + help_phone[chat], {
                reply_markup:{
                    keyboard:[
                        [{
                            text: 'üîÉ –ù–∞ –≥–ª–∞–≤–Ω—É—é',
                        }]
                    ],
                    resize_keyboard: true
                }
            })
        }
        
        if (abonement_status[chat] === abonement_statuses_text[2]){
            //–º—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–∫–∞–∑. –ù–∞ –∫–ª–∞–≤–µ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å "–∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω". –¢–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–ª –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–≥–æ—Ç–æ–≤–æ", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ —Ä–∞–∑. 
            //–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ, –º—ã –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑—ã–≤–∞—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç —Å —á–µ–∫–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏, —á—Ç–æ–±—ã –µ—Å–ª–∏ –≤ —á–∞—Ç–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ–º–µ–Ω—è—é—Ç —Å—Ç–∞—Ç—É—Å, –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–∞–ª –æ–ø–µ–≤–µ—â–µ–Ω–∏–π. 
            
            const temp_text = `‚úÖ –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>` + start_training_text + `. </b>
–£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!`
            userstatus[chat] = 'registered'
            bot.sendSticker(chat, sticker_success)
            .then(() => {
                bot.sendMessage(chat, temp_text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: start_training_text,
                                callback_data: accepttraining_text[1]
                            },{
                                text: refusetraining_text[0],
                                callback_data: refusetraining_text[1]
                            }]
                        ],
                    }
                })
            })

        }
    }
)
}

function StartTraining(chatId, message_id){
    let userdata = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/clients/' + chatId)
    userdata.get().then((result) => 
    {
        let is_refused = false

        let date = new Date()
        let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
        let timeOfffset = 6 //Astana GMT +6
        let time_now = new Date(utcTime + (3600000 * timeOfffset))
        let end_time = new Date(result.val().abonement.end_date)

        if (result.val().abonement.abonement_status !== abonement_statuses_text[2] && is_refused === false){
            is_refused = true
            bot.sendMessage(chatId, '–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ' + result.val().abonement.abonement_status + '. –° —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üôÅ', {
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: refusetraining_text[0],
                            callback_data: refusetraining_text[1]
                        }]
                    ]
                }
            })
        }

        console.log(time_now + ' \\ ' + end_time)
        if (time_now > end_time && is_refused === false){
            console.log('TRUE!')
            is_refused = true

            let minutes = end_time.getMinutes()
            if (minutes < 10) minutes = '0' + minutes
            let hours = end_time.getHours()
            if (hours < 10) hours = '0' + hours
            let visible_date_end = /* new Intl.DateTimeFormat('ru-RU', options).format(end_time) + ' ' +  */hours + ':' + minutes + ', ' + end_time.getDate() + '.' + (end_time.getMonth() + 1) + '.' + end_time.getFullYear()

            bot.sendMessage(chatId, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–µ–∫. –û–Ω –±—ã–ª –≥–æ–¥–µ–Ω –¥–æ: ' + visible_date_end + '. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π', {
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: refusetraining_text[0],
                            callback_data: refusetraining_text[1]
                        }]
                    ]
                }
            })
        }

        if (result.val().abonement.visits !== 'unlimited' && result.val().abonement.visits < 1 && is_refused === false){
            is_refused = true
            bot.sendMessage(chatId, '–í—ã —É–∂–µ –ø–æ—Å–µ—Ç–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —á–∏—Å–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π', {
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: refusetraining_text[0],
                            callback_data: refusetraining_text[1]
                        }]
                    ]
                }
            })
        }

        if (result.val().abonement.time !== 'unlimited' && is_refused === false){
            let restriction_time_max = time_now
            let restriction_time_min = time_now
            if (result.val().abonement.time === 'evening'){
                restriction_time_min.setHours(evening_time[chatId][0][0], evening_time[chatId][0][1])
                restriction_time_max.setHours(evening_time[chatId][1][0], evening_time[chatId][1][1])
                if (time_now < restriction_time_min || time_now > restriction_time_max){
                    is_refused = true
                    bot.sendMessage(chatId, 'üôä –£–ø—Å, –≤—ã –ø—Ä–∏—à–ª–∏ –Ω–µ –≤–æ–≤—Ä–µ–º—è... –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å ' + evening_time[chatId][0][0] + ':' + evening_time[chatId][0][1] + ' –ø–æ ' +  evening_time[chatId][1][0] + ':' + evening_time[chatId][1][1], {
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: refusetraining_text[0],
                                    callback_data: refusetraining_text[1]
                                }]
                            ]
                        }
                    })
                }
            }
            if (result.val().abonement.time === 'morning'){
                restriction_time_min.setHours(morning_time[chatId][0][0], morning_time[chatId][0][1])
                restriction_time_max.setHours(morning_time[chatId][1][0], morning_time[chatId][1][1])
                if (time_now < restriction_time_min || time_now > restriction_time_max){
                    is_refused = true
                    bot.sendMessage(chatId, 'üôä –£–ø—Å, –≤—ã –ø—Ä–∏—à–ª–∏ –Ω–µ –≤–æ–≤—Ä–µ–º—è... –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å ' + morning_time[chatId][0][0] + ':' + morning_time[chatId][0][1] + ' –ø–æ ' +  morning_time[chatId][1][0] + ':' + morning_time[chatId][1][1], {
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: refusetraining_text[0],
                                    callback_data: refusetraining_text[1]
                                }]
                            ]
                        }
                    })
                }
            }
        }
        
        if (is_refused === false){
            let updates = {}
            if (result.val().abonement.visits !== 'unlimited'){          
                updates['Fitness/'+club_name_fb[chatId]+'/clients/'+ chatId + '/abonement/visits'] = result.val().abonement.visits - 1
                //updates['Basement/clients/CLIENTID/EGO_CHECK'] = order_update
            }
            updates['Fitness/'+club_name_fb[chatId]+'/clients/'+ chatId + '/coins'] = result.val().coins + (result.val().abonement.price * cashback[chatId])
            bot.sendMessage(chatId, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ë–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ: –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç–µ —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Ä–µ—Å–µ–ø—à–Ω–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ' + start_training_text + '. –£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!')
            .then(() => {
                fb.database().ref().update(updates)
            })
        }
        
    })
}

function CheckUser(userid, username, chatId, message_id){
    
    console.log('checking user: ' + userid + ' ' + username)
    let userdata = fb.database().ref('Fitness/'+club_name_fb[chatId]+'/clients/' + userid)
    userdata.get().then((result) => 
    {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. ID: ' + userid + ' ' + result.val().id)
        //user_adress[chatId] = result.val().adress
        //user_email[chatId] = result.val().email
        user_name[chatId] = result.val().name
        user_username[chatId] = result.val().username
        user_phone[chatId] = result.val().phone
        user_id[chatId] = result.val().id
        //alltime_purchases_amount[chatId] = result.val().alltime_purchases_amount[chatId]
        user_coins[chatId] = result.val().coins

        userstatus[chatId] = 'registered'

        bot.sendMessage(chatId, almostthere_text, {
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtoprogramme_text[0],
                        callback_data: backtoprogramme_text[1]
                    }]
                    [{
                        text: '–ò–º—è: ' + user_name[chatId],
                        callback_data: changename_text
                    },
                    {
                        text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                        callback_data: changephone_text
                    }],
                    [{
                        text: dataiscorrect_text,
                        callback_data: dataiscorrect_text
                    }]
                ]
            }
        }).then(res => {
            add_info_msg[chatId] = message_id + 2
            messages_todelete[chatId][2] = res.message_id
            console.log('savedmessage = ' + add_info_msg[chatId] + ', ' + messages_todelete[chat.id][2])
        }).catch(err => {console.log(err)})

        //StartAnalitycs()

    }).catch(error => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. ' + error)
        userstatus[chatId] = 'unregistered'
        /*fb.database().ref('Basement/clients/').set({
            userid : {
                adress: 'unknown'
            }
            username: name,
            email: email,
            profile_picture : imageUrl
          });*/
        user_name[chatId] = username
          bot.sendMessage(chatId, almostthere_text, {
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtoprogramme_text[0],
                        callback_data: backtoprogramme_text[1]
                    }],
                    [{
                        text: '–ò–º—è: ' + user_name[chatId],
                        callback_data: changename_text
                    },
                    {
                        text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' /* + user_phone[chatId] */,
                        callback_data: changephone_text
                    }]
                ]
            }
        }).then(res => {
            add_info_msg[chatId] = message_id + 2 
            messages_todelete[chatId][2] = res.message_id
            console.log('savedmessage = ' + add_info_msg[chatId] + ', ' + message_id)
        }).catch(err => {console.log(err)})

        //StartAnalitycs()
    })
}

function StartAnalitycs(){
    
    //—É–∑–Ω–∞–µ–º –ª—é–±–∏–º—É—é –µ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let i = 0; i < basket[current_chat].length; i++){
        if (basket[current_chat][i][3] === 0){
            //—Ç—É—Ç –∏–¥—É—Ç –∑–∞–≤—Ç—Ä–∞–∫–∏, –∞ –∑–Ω–∞—á–∏—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–æ—Å–Ω–æ–≤–Ω–æ–µ"
            food_categories[current_chat][5][1] = food_categories[current_chat][5][1] + basket[current_chat][i][1]
            console.log('–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–æ—Å–Ω–æ–≤–Ω–æ–µ" –æ—á–∫–∏. –û—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–ø–µ—Ä—å: ' + food_categories[current_chat][5][1])
        }
        if (basket[current_chat][i][3] === 1){
            //—Ç—É—Ç –∏–¥—É—Ç –¥–µ—Å–µ—Ä—Ç—ã, –∑–Ω–∞—á–∏—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ "–¥–µ—Å–µ—Ä—Ç—ã"
            food_categories[current_chat][3][1] = food_categories[current_chat][3][1] + basket[current_chat][i][1]
            console.log('–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¥–µ—Å–µ—Ä—Ç—ã" –æ—á–∫–∏. –î–µ—Å–µ—Ä—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å: ' + food_categories[current_chat][3][1])
        }
        if (i === basket[current_chat].length - 1){
            //–≤—Å–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —Ç–µ–ø–µ—Ä—å —É–∑–Ω–∞–µ–º –∫–∞–∫—É—é –µ–¥—É –ª—é–±–∏–º
            console.log('–ë–∞–ª–ª—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏. –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –ª—é–±–∏–º—É—é –µ–¥—É')
            let favourite_food_number = []
            favourite_food_number[current_chat] = 0
            for (let i = 0; i < food_categories[current_chat].length; i++){
                if (i <= food_categories[current_chat].length - 1){
                    console.log('–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é #' + i + ' –∏ #' + (i+1))
                    /* if (food_categories[current_chat][i][1] >= food_categories[current_chat][i+1][1]){
                        favourite_food[current_chat]= food_categories[current_chat][i][0]
                        console.log(i +' 1 –ö–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i][0] + ' –±–æ–ª—å—à–µ, —á–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i+1][0])
                    }
                    else if (food_categories[current_chat][i][1] < food_categories[current_chat][i+1][1]){
                        favourite_food[current_chat]= food_categories[current_chat][i+1][0]
                        console.log(i + ' 2 –ö–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i+1][0] + ' –±–æ–ª—å—à–µ, —á–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i][0])
                    }*/
                    if (food_categories[current_chat][i][1] >= favourite_food_number[current_chat]){
                        favourite_program[current_chat]= food_categories[current_chat][i][2]
                        favourite_food_number[current_chat] = food_categories[current_chat][i][1]
                        console.log(i +' 1 –ö–∞—Ç–µ–≥–æ—Ä–∏—è ' + food_categories[current_chat][i][0] + ' –±–æ–ª—å—à–µ')
                    }
                    if (i === food_categories[current_chat].length - 1){
                        console.log('WINNER: ' + favourite_program[current_chat])
                    } 

                }
            }
        }
    }

    //—É–∑–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (average_price[current_chat] === 0){
        console.log('1 finalprice is ' + finalprice[current_chat])
        average_price[current_chat] = finalprice[current_chat]
    }
    if (average_price[current_chat] !== 0){
        console.log('2 finalprice is ' + finalprice[current_chat])
        average_price[current_chat] = (average_price[current_chat] + finalprice[current_chat]) / 2
        console.log('2 average price is ' + average_price[current_chat])
    }

    //—É–∑–Ω–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –∑–∞ —Ä–∞–∑ –±–ª—é–¥
    if (average_purchases[current_chat] === 0){
        for (let i = 0; i < basket[current_chat].length; i++){
            average_purchases[current_chat] += basket[current_chat][i][1]
            if (i === basket[current_chat] - 1){
                console.log('1 purchases amount = ' + average_purchases[current_chat])
            }
        }
    }
    if (average_purchases[current_chat] !== 0){
        let temp_purchases = 0
        for (let i = 0; i < basket[current_chat].length; i++){
            temp_purchases += basket[current_chat][i][1]
            if (i === basket[current_chat] - 1){
                console.log('2 old purchases amount = ' + average_purchases[current_chat])
                console.log('2 new purchases amount = ' + temp_purchases)
                average_purchases[current_chat] = (average_purchases[current_chat] + temp_purchases) / 2
                console.log('2 final purchases amount = ' + average_purchases[current_chat])
            }
        }
    }
}

function AddMailingData(){

    if (finalprice[current_chat] >= reach_min){
        console.log('!? reach_min: ' + reach_min)
        let userdata = fb.database().ref('Basement/mailing/categories/reach')
        userdata.get().then((result) => {
            let count = result.val().user_amount
            count++
            let user_ids_string = ''
            user_ids_string = result.val().user_ids
            let user_ids = user_ids_string.split(',')
            for (let i = 0; i < user_ids.length; i++){
                if (user_ids[i] === current_chat.toString()){
                    break
                }
                if (i === user_ids.length - 1 && user_ids[i] !== current_chat.toString()){
                    let updates = {}
                    updates['Basement/mailing/categories/reach/user_amount'] = count

                    if (user_ids_string !== ''){
                        user_ids_string += ',' + current_chat
                    }

                    else if (user_ids_string === ''){
                        user_ids_string += current_chat
                    }

                    updates['Basement/mailing/categories/reach/user_ids'] = user_ids_string

                    fb.database().ref().update(updates)
                }
            }
           
        })
    }

    if (finalprice[current_chat] <= cheap_max){
        let userdata = fb.database().ref('Basement/mailing/categories/cheap')
        userdata.get().then((result) => {
            let count = result.val().user_amount
            count++
            let user_ids_string = ''
            user_ids_string = result.val().user_ids
            let user_ids = user_ids_string.split(',')
            for (let i = 0; i < user_ids.length; i++){
                if (user_ids[i] === current_chat.toString()){
                    break
                }
                if (i === user_ids.length - 1 && user_ids[i] !== current_chat.toString()){
                    let updates = {}
                    updates['Basement/mailing/categories/cheap/user_amount'] = count

                    if (user_ids_string !== ''){
                        user_ids_string += ',' + current_chat
                    }

                    else if (user_ids_string === ''){
                        user_ids_string += current_chat
                    }
                    
                    updates['Basement/mailing/categories/cheap/user_ids'] = user_ids_string
                    
                    fb.database().ref().update(updates)
                }
            }
           
        })
    }

    for (let i = 0; i < food_categories[current_chat].length; i++){
        if (favourite_program[current_chat]=== food_categories[current_chat][i][2]){
            console.log('!!! Basement/mailing/categories/' + food_categories[current_chat][i][2])
            let userdata = fb.database().ref('Basement/mailing/categories/' + food_categories[current_chat][i][2])
            userdata.get().then((result) => 
            {
                let count = result.val().user_amount
                count++
                let user_ids_string = ''
                user_ids_string = result.val().user_ids
                let user_ids = user_ids_string.split(',')
                
                for (let i = 0; i < user_ids.length; i++){
                    console.log('category user ids list: ' + user_ids[i] + ' ' + current_chat)
                    if (user_ids[i] === current_chat.toString()){
                        console.log('found user_id. BREAK! ' + user_ids[i] + ' ' + current_chat)
                        break
                    }
                    if (i === user_ids.length - 1 && user_ids[i] !== current_chat.toString()){
                        console.log('users length = ' + user_ids.length + ', i =' + i)
                        let updates = {}
                        updates['Basement/mailing/categories/' + favourite_program[current_chat]+ '/user_amount'] = count

                        if (user_ids_string !== ''){
                            user_ids_string += ',' + current_chat
                        }
    
                        else if (user_ids_string === ''){
                            user_ids_string += current_chat
                        }

                        updates['Basement/mailing/categories/' + favourite_program[current_chat]+ '/user_ids'] = user_ids_string
                        
                        fb.database().ref().update(updates)
                    }
                }
            })

            
            
        }
    }

        let userdata = fb.database().ref('Basement/mailing/all')
        userdata.get().then((result) => {
            let count = result.val().user_amount
            count++
            let user_ids_string = ''
            user_ids_string = result.val().user_ids
            let user_ids = user_ids_string.split(',')
            for (let i = 0; i < user_ids.length; i++){
                console.log('all, user ids list: ' + user_ids[i] + ' ' + current_chat)
                if (user_ids[i] === current_chat.toString()){
                    console.log('found user_id. BREAK! "' + user_ids[i] + '" "' + current_chat + '"')
                    break
                }
                if (i === user_ids.length - 1 && user_ids[i] !== current_chat.toString()){
                    console.log('users length = "' + user_ids.length + '", i = "' + i + '". (user_ids[i] !== current_chat): ' + user_ids[i] + ' !== ' + current_chat)
                    let updates = {}
                    updates['Basement/mailing/all/user_amount'] = count

                    if (user_ids_string !== ''){
                        user_ids_string += ',' + current_chat
                    }

                    else if (user_ids_string === ''){
                        user_ids_string += current_chat
                    }

                    updates['Basement/mailing/all/user_ids'] = user_ids_string

                    fb.database().ref().update(updates)
                }
            }
           
        })
}

bot.on('polling_error', console.log);

bot.on('poll_answer', poll_answer => {
    answered_feedback[poll_answer.user.id] = poll_answer.option_ids
    console.log('^^ ' + isAnswered_feedback[poll_answer.user.id])
    if (isAnswered_feedback[poll_answer.user.id] === 0){
        console.log('answered!')
        isAnswered_feedback[poll_answer.user.id] = 1
        if (answered_feedback[poll_answer.user.id] > 1){
            bot.sendSticker(poll_answer.user.id, sticker_baddeliver).then(() => {
                bot.sendMessage(poll_answer.user.id, badfeedback_text, {
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: leavecomment,
                                callback_data: leavecomment
                            }],
                            [{
                                text: dontleavecomment,
                                callback_data: dontleavecomment
                            }]
                        ]
                    }
                })
            })
        }
        if (answered_feedback[poll_answer.user.id] <= 1){
            bot.sendSticker(poll_answer.user.id, sticker_gooddeliver).then(() => {
                bot.sendMessage(poll_answer.user.id, goodfeedback_text, {
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: leavecomment,
                                callback_data: leavecomment
                            }],
                            [{
                                text: dontleavecomment,
                                callback_data: dontleavecomment
                            }]
                        ]
                    }
                })
            })
        }
        
        
    }
})

bot.on('pre_checkout_query', pre_checkout_query => {
    bot.answerPreCheckoutQuery( pre_checkout_query.id, true, {
        error_message: '–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ'
    })

})

bot.on('location', (msg) => {

    if (userCity[msg.chat.id] !== '' && userPoint[msg.chat.id] === ''){
        
        userlocation[msg.chat.id][0] = msg.location.latitude
        userlocation[msg.chat.id][1] = msg.location.longitude
        let point1 = []
        point1[msg.chat.id] = new GeoPoint(userlocation[msg.chat.id][0], userlocation[msg.chat.id][1], false)    
        let locations_arr = []
        locations_arr[msg.chat.id] = []

        let points_data = fb.database().ref('Basement/cities/' + userCity[msg.chat.id] + '/points/')
        points_data.get().then((snapshot) => {
            let array_len = [] 
            array_len[msg.chat.id] = Object.keys(snapshot.val())
            for (let i = 0; i < array_len[msg.chat.id].length; i++){
                let info = fb.database().ref('Basement/cities/' + userCity[msg.chat.id] + '/points/' + array_len[msg.chat.id][i] + '/is_waiter')
                info.get().then((snapshot2) => {
                    if (snapshot2.val() === true){
                        let info1 = fb.database().ref('Basement/cities/' + userCity[msg.chat.id] + '/points/' + array_len[msg.chat.id][i] + '/other_info/')
                        info1.get().then((snapshot1) => {
                            let newelement = [array_len[msg.chat.id][i], snapshot1.val().adress_text, snapshot1.val().latitude, snapshot1.val().longitude]
                            locations_arr[msg.chat.id].push(newelement)
                        })
                    }

                    if (snapshot2.val() === false){
                        if (i === array_len[msg.chat.id].length){

                        }
                    }
                })
            }
        })
    }
    /* if (userCity[current_chat] === 0){
        for (let i = 0; i < NurSultan_adresses.length; i++) {
            let point2 = new GeoPoint(NurSultan_geo1[i], NurSultan_geo2[i], false)
            let distance = point1.distanceTo(point2, true)//output in kilometers
            //console.log('–¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –∞–¥—Ä–µ—Å–∞: ' + NurSultan_adresses[i] + ' = ' + distance)
            if (distance < min_distance[current_chat]){
                min_distance[current_chat] = distance
                nearest_place[current_chat] = i
            }
            if (i === NurSultan_adresses.length - 1) {
                userPoint[current_chat] = nearest_place[current_chat]
                bot.sendLocation(msg.chat.id, NurSultan_geo1[nearest_place[current_chat]], NurSultan_geo2[nearest_place[current_chat]]).then(() => {
                    bot.sendMessage(msg.chat.id, '–ë–ª–∏–∂–∞–π—à–∞—è –∫ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Ç–æ—á–∫–∞ Coffee BOOM –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ' + NurSultan_adresses[nearest_place[current_chat]], {
                        reply_markup:{
                            inline_keyboard:
                            [
                                [{
                                    text: youchosepoint_text,
                                    callback_data: youchosepoint_text
                                },
                                {
                                        text: anotherpoint_text,
                                        callback_data: anotherpoint_text
                                }]
                            ]
                        }
                    })
                })
            }
        }
    }
    else if (userCity[current_chat] === 1){
        for (let i = 0; i < Almaty_adresses.length; i++) {
            let point2 = new GeoPoint(Almaty_geo1[i], Almaty_geo2[i], false)
            let distance = point1.distanceTo(point2, true)//output in kilometers
            if (distance < min_distance[current_chat]){
                min_distance[current_chat] = distance
                nearest_place[current_chat] = i
            }
            if (i === Almaty_adresses.length - 1) {
                userPoint[current_chat] = nearest_place[current_chat]
                bot.sendLocation(msg.chat.id, Almaty_geo1[nearest_place[current_chat]], Almaty_geo2[nearest_place[current_chat]]).then(() => {
                    bot.sendMessage(msg.chat.id, '–ë–ª–∏–∂–∞–π—à–∞—è –∫ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Ç–æ—á–∫–∞ Coffee BOOM –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ' + Almaty_adresses[nearest_place[current_chat]], {
                        reply_markup:{
                            inline_keyboard:
                                [
                                    [{
                                        text: youchosepoint_text,
                                        callback_data: youchosepoint_text
                                    },
                                        {
                                            text: anotherpoint_text,
                                            callback_data: anotherpoint_text
                                        }]
                                ]
                        }
                    })
                })
            }
        }
    } */
   // console.log('chat id: ' + msg.chat.id + /*'. Message_id: ' + msg.message + */'. Message_id2: ' + msg.message_id)
   /* for (let i = 0; i < 4; i++){
        if (msg.message_id - i > 0){
            if (i!== 0){
                bot.deleteMessage(msg.chat.id, msg.message_id - i)
            }
        }
   } */
})

bot.on('message', (msg) =>
{
    const chatId = msg.chat.id

    console.log(msg)

    current_chat = chatId

    if (userstatus[chatId] === 'unknown' || userstatus[chatId] === undefined && msg.text.includes('/start') === false){
        if (msg.chat.type === 'group' || msg.chat.type === 'supergroup'){
            bot.getChat(chatId).then(result => {
                if (result.description !== undefined && result.description !== null){
                    console.log('group: ' + result.description)
                    let del_userdata = []
                    del_userdata[msg.from.id] = result.description.split('/')
                    if (del_userdata[msg.from.id].length === 3 && del_userdata[msg.from.id][2] === (chatId).toString()){
                        club_name_fb[msg.from.id] = del_userdata[msg.from.id][0]
                        IdentifyUser(msg.from.id)
                    }
                }
            })
        }
        else {
            if (club_name_fb[chatId] === undefined || club_name_fb[chatId] === null){
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                IdentifyUser(chatId)
                keyboards.GymsKeyboard(gym_keyboard[chatId], userGyms[chatId], fb, bot, chatId, mother_link, choosegym_text)
            }
        }
        console.log('dont know users status, lets check it')
    }

    if (msg.text === 'üîÉ –ù–∞ –≥–ª–∞–≤–Ω—É—é'){
        for (let i=0; i<100; i++){
            bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                //console.log(err)
            })
        }
        bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)]).then(() => {
            if (userstatus[chat.id] !== 'registered'){
                IdentifyUser(chatId)
            }
            
            anotherpoint_multiple[chatId] = 2
            //keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], categories_count[chatId], fb, bot, chatId, msg, anotherpoint_text, choosecategory_text, hellomessage_text, location_text, phone_text)
        })
    }

    if (msg.text === coins_text){
        /* bot.editMessageText(msg.text, {
            chat_id: chatId,
            message_id: msg.message_id - 1
        }).then(() => {
            bot.deleteMessage(chatId, msg.message_id).then(() => {
                bot.sendMessage(chatId, '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chatId] + ' —Ç–µ–Ω–≥–µ. –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–ª—é–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.')
            })
        }) */

        bot.deleteMessage(chatId, msg.message_id).then(() => {
            bot.sendMessage(chatId, '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chatId] + ' —Ç–µ–Ω–≥–µ. –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–ª—é–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.')
        })
    }

    if (msg.text === anotherpoint_text){
        finalprice[chatId] = 0
        finaltime_deelay = 0
        finalbasket[chatId] = 0
        console.log('2414124')
        if (userProgram[chatId] !== null || userProgrammesList[chatId] !== []){
            bot.deleteMessage(chatId, msg.message_id)
            bot.sendMessage(chatId, youwanttochangepoint_text, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: anotherpoint_text,
                            callback_data: anotherpoint_text
                        },{
                            text: query_deletethismessage,
                            callback_data: query_deletethismessage
                        }]
                    ],
                },
                remove_keyboard: true
            })
        }
        else {

        }
    }

    if (msg.text === start_training_text){
        bot.deleteMessage(chatId, msg.message_id)
        .then(()=> {
            const temp_tex = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –í—ã <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å–≤–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.</b>'
            bot.sendMessage(chatId, temp_tex, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: accepttraining_text[0],
                            callback_data: accepttraining_text[1]
                        },{
                            text: refusetraining_text[0],
                            callback_data: refusetraining_text[1]
                        }]
                    ],
                }
            })
        })
    }

    if (msg.text === gotomain_text){
        for (let i=0; i<100; i++){
            bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                //console.log(err)
            })
        }
        bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)], {
            reply_markup:{
                keyboard:registered_keyboard[0],
                resize_keyboard: true
            }
        })
        .then(() => {
            anotherpoint_multiple[chatId] = 2
            bot.sendMessage(chatId, hellomessage_text, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboards.main_menu_keyboard
                }
            })
        })
    }

    if (msg.text === myabonement_status){

        //bot.deleteMessage(chatId, msg.message_id-1)
        bot.deleteMessage(chatId, msg.message_id).then(() => {
            bot.sendMessage(chatId, '–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: ' + abonement_status[chatId])
        })
        
    }

    if (msg.text === paybasket_text){
        console.log('!!!' + (finalprice[chatId] - 1000))
        if (finalprice[chatId] - 1000 < delivery_min_price){
            bot.sendMessage(chatId, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ' + delivery_min_price + '. –ó–∞–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ üòá')
        }
        else {
            finaltime_deelay = 0
            bot.deleteMessage(chatId, msg.message_id - 1)
            bot.deleteMessage(chatId, msg.message_id).then(() => {
                let editmsg = `–í–∞—à –∑–∞–∫–∞–∑: `
                let finalsum = 0
                for (let i = 0; i < basket[chatId].length; i++){
                                finalsum += (basket[chatId][i][2] * basket[chatId][i][1])
                                if (i === basket[chatId].length - 1){
                                    editmsg += finalsum + '—Ç–≥. +' + delivery_price + '—Ç–≥. (–¥–æ—Å—Ç–∞–≤–∫–∞)'
                                    console.log(finalsum + ' ' + i)
                                    finalprice[chatId] = finalsum + delivery_price
                                    for (let i = 0; i < basket[chatId].length; i++){
                                        console.log('1–ë–ª—é–¥–æ: ' + basket[chatId][i][0] + '. –¶–µ–Ω–∞: ' + basket[chatId][i][2] + ' —Ö ' + basket[chatId][i][1] + ' = ' + (basket[chatId][i][1] * basket[chatId][i][2]))
                                        editmsg += `
` + (i+1) + `. ` + basket[chatId][i][0] + `. –¶–µ–Ω–∞: ` + basket[chatId][i][2] + `—Ç–≥. —Ö ` + basket[chatId][i][1] + ` = ` + (basket[chatId][i][1] * basket[chatId][i][2]) + `—Ç–≥.`
                                        if (i === basket[chatId].length - 1){
                                            finalbasket[chatId] = editmsg
                                            bot.sendMessage(chatId,  editmsg).then(() => {
                                                CheckUser(chatId, msg.chat.first_name, chatId, msg.message_id)
                                            })
                
                                        }
                                    }
                                }
                }
            })
        }
        
    }

    if (msg.text === location_text){
        bot.sendLocation(chatId, point_location[chatId][0], point_location[chatId][1]).then(() => {
            bot.sendMessage(chatId, 'üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ' + point_adress[chatId])
        })
        
    }
    if (msg.text === phone_text){
        bot.sendContact(chatId, help_phone[chatId], club_name_fb)
    }

    if (isMakingChanges[chatId] !== 0  && userstatus[chatId] !== undefined){
        if (isMakingChanges[chatId] === 1){
            isMakingChanges[chatId] = 0
            user_name[chatId] = msg.text
        }

        if (isMakingChanges[chatId] === 2){
            isMakingChanges[chatId] = 0
            user_phone[chatId] = msg.text
        }

        if (isMakingChanges[chatId] === 3){
            isMakingChanges[chatId] = 0
            user_adress[chatId] = msg.text
        }

        if (isMakingChanges[chatId] === 4){
            isMakingChanges[chatId] = 0
            user_email[chatId] = msg.text
            user_coins[chatId] = user_coins[chatId] + (added_coins[chatId] * percent_foremail)
            user_coins[chatId] = Math.round(user_coins[chatId])
            //—Ç—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –Ω–æ —É–∂–µ —Ä–µ–≥–∏—Å—Ç–µ—Ä–µ–¥

            let updates = {};
            updates['Basement/clients/' + msg.chatId + '/email'] = user_email[chatId]
            updates['Basement/clients/' + msg.chatId + '/coins'] = user_coins[chatId]
            fb.database().ref().update(updates).then(() => {
                //—Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                        console.log(err)
                    })
                }
                bot.sendMessage(chatId, '–£—Ä–∞! Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í–∞–º –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ ' + (added_coins[chatId] * percent_foremail) + ' —Ç–µ–Ω–≥–µ. –í–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chatId] + ' —Ç–µ–Ω–≥–µ').then(() => {
                    IdentifyUser(chatId)
                    anotherpoint_multiple[chatId] = 2
                    keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], fb, bot, chatId, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chatId], userPoint[chatId], user_mode[chatId])
                })
            })
        }

        if (isMakingChanges[chatId] === 5){
            isMakingChanges[chatId] = 0
            let orderinfo = fb.database().ref(order_name[chatId]);
            orderinfo.get().then((snapshot) => 
            {
                console.log('saving poll...')
                let updates = {}
                let bill_update = {
                    adress: snapshot.val().adress,
                    client_name: snapshot.val().client_name,
                    date_ordered: snapshot.val().date_ordered,
                    client_id: snapshot.val().client_id,
                    order_info: snapshot.val().order_info,
                    phone: snapshot.val().phone,
                    price: snapshot.val().price,
                    order_status: snapshot.val().order_status,
                    deliver_name: snapshot.val().deliver_name,
                    accept_date: snapshot.val().accept_date,
                    deliver_id: snapshot.val().deliver_id,
                    message_id: snapshot.val().message_id,
                    delivered_date: snapshot.val().delivered_date,
                    feedback: feedback_options[answered_feedback[chatId]],
                    feedback_message: msg.text,
                    bill_text: snapshot.val().bill_text,
                    user_personsamount: snapshot.val().user_personsamount,
                    user_payingmethod: snapshot.val().user_payingmethod,
                    user_deliverdate: snapshot.val().user_deliverdate,
                    user_sdachainfo: snapshot.val().user_sdachainfo,
                    user_howtocome: snapshot.val().user_howtocome
                }
                updates[order_name[chatId]] = bill_update
                updates['Basement/clients/' + chatId + '/coins'] = user_coins[chatId]
                fb.database().ref().update(updates).then(() => {
                    for (let i=0; i<100; i++){
                        bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                            console.log(err)
                        })
                    }
                    bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)]).then(() => {
                        IdentifyUser(chatId)
                        anotherpoint_multiple[chatId] = 2
                        keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], fb, bot, chatId, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chatId], userPoint[chatId], user_mode[chatId])
                    })

                    let temp_bill = snapshot.val().bill_text + `
<b>üí¨ –û—Ç–∑—ã–≤ –æ –¥–æ—Å—Ç–∞–≤–∫–µ:</b>                    
‚îú –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: ` + feedback_options[answered_feedback[chatId]] + `
‚îî –°–æ–æ–±—â–µ–Ω–∏–µ: ` + msg.text
                    bot.editMessageText(temp_bill, {
                        parse_mode: 'HTML',
                        chat_id: operators_chat[chatId],
                        message_id: snapshot.val().message_id
                    })
                }).catch(error => {
                    console.log(error)
                })
            }) 
        }

        if (/* user_adress[chatId] !== '' &&  */user_phone[chatId] !== '' && user_name[chatId] !== '' && isMakingChanges[chatId] !== 4 && isMakingChanges[chatId] !== 5){
            //order_status = order_statuses_text[0]
            console.log('LOL ' + msg.message_id + ', ' + (msg.message_id - 1))
            bot.deleteMessage(chatId, msg.message_id).then(() => {
                console.log('LOL2 ' + msg.message_id + ', ' + (msg.message_id - 1))
            })

            bot.editMessageText(almostthere2_text, {
                chat_id: chatId,
                message_id: add_info_msg[chatId],
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: backtoprogramme_text[0],
                            callback_data: backtoprogramme_text[1]
                        }],
                        [{
                            text: '–ò–º—è: ' + user_name[chatId],
                            callback_data: changename_text
                        },
                        {
                            text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                            callback_data: changephone_text
                        }],
                        [{
                            text: dataiscorrect_text,
                            callback_data: dataiscorrect_text
                        }]
                    ]
                }
            }
            ).catch(err => {
                console.log(err)
            })
            .then(res => {
                messages_todelete[chatId][2] = res.message_id
            })
            
        }
        if (user_phone[chatId] === '' || user_name[chatId] === '' && isMakingChanges[chatId] !== 4 && isMakingChanges[chatId] !== 5)
        {
            console.log('LOL3 ' + msg.message_id + ', ' + (msg.message_id - 1) + ', save_msgid: ' + add_info_msg[chatId])
            bot.deleteMessage(chatId, msg.message_id)
            
            bot.editMessageText(almostthere_text, {
                chat_id: chatId,
                message_id: add_info_msg[chatId],
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: backtoprogramme_text[0],
                            callback_data: backtoprogramme_text[1]
                        }],
                        [{
                            text: '–ò–º—è: ' + user_name[chatId],
                            callback_data: changename_text
                        },
                        {
                            text: '–¢–µ–ª–µ—Ñ–æ–Ω: ' + user_phone[chatId],
                            callback_data: changephone_text
                        }]
                    ]
                }
            }
            ).catch(err => {
                console.log(err)
            })
            .then(res => {
                messages_todelete[chatId][2] = res.message_id
            })
            
            
        }
    }

    if (isMakingChanges_3[chatId] === 1  && userstatus[chatId] !== undefined){
        isMakingChanges_3[chatId] = 0
        isMakingChanges_2[chatId] = 0
        console.log('isMakingChanges 3!')
        
        user_howtocome[chatId] = msg.text
        if (userstatus[chatId] !== 'unregistered'){
            bot.deleteMessage(chatId, add_info_msg[chatId])
            if (user_coins[chatId] >= (finalprice[chatId] * min_pay_percentage)){
                if (user_coins[chatId] <= (finalprice[chatId] * max_pay_percentage)){
                    //—Ç—É—Ç –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤—Å–µ–º–∏ –±–∞–ª–ª–∞–º–∏.
                    bot.deleteMessage(chatId, add_info_msg[chatId])
                    skidka[chatId] = user_coins[chatId]
                    bot.sendMessage(chatId, '–£ –≤–∞—Å –µ—Å—Ç—å ' + user_coins[chatId] + ' —Ç–µ–Ω–≥–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑. –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: ' + (finalprice[chatId]-user_coins[chatId]) + ' —Ç–µ–Ω–≥–µ. –•–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö —Å–µ–π—á–∞—Å?', {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: spendmycoins,
                                    callback_data: spendmycoins
                                },{
                                    text: dontspendmycoins,
                                    callback_data: dontspendmycoins
                                }]
                            ],
                        },
                    })
                }
                else if (user_coins[chatId] > (finalprice[chatId] * max_pay_percentage)){
                    bot.deleteMessage(chatId, add_info_msg[chatId])
                    //—Ç—É—Ç –æ–ø–ª–∞—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤
                    skidka[chatId] = finalprice[chatId] * max_pay_percentage
                    bot.sendMessage(chatId, '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chatId] + ' —Ç–µ–Ω–≥–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å ' + finalprice[chatId] * max_pay_percentage + '—Ç–µ–Ω–≥–µ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞. –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: ' + (finalprice[chatId] - ( finalprice[chatId] * max_pay_percentage)) + ' —Ç–µ–Ω–≥–µ. –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ?', {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: spendmycoins,
                                    callback_data: spendmycoins
                                },{
                                    text: dontspendmycoins,
                                    callback_data: dontspendmycoins
                                }]
                            ],
                        },
                    })
                }
            }
            else {
                skidka[chatId] = 0
                abonement_status[chatId] = abonement_statuses_text[0]
                bot.sendMessage(chatId, abonementrequest_sended, {
                    reply_markup: {
                        keyboard: unregistered_keyboard[3],
                        resize_keyboard: true
    
                    }
                })
                
                let updates = {};

                let username = []
                username[chatId] = "undefined"
                if (msg.chat.username != undefined) username[chatId] = msg.chat.username.toString()
                
                let alltimepurchases = []
                alltimepurchases[chatId] = 1
                if (abonements_bought[chatId] > 0){
                    alltimepurchases[chatId] = abonements_bought[chatId] + 1
                }

                let newuser = {
                    adress: user_adress[chatId],
                    average_price: average_price[chatId],
                    average_purchases: average_purchases[chatId],
                    coins: user_coins[chatId],
                    email: user_email[chatId],
                    favourite_food: favourite_program[chatId],
                    id: chatId,
                    name: user_name[chatId],
                    phone: user_phone[chatId],
                    username: username[chatId],
                    alltime_purchases_amount: alltimepurchases[chatId]
                }

                let date = new Date()
                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                let timeOfffset = 6 //Astana GMT +6
                let Astana_date = new Date(utcTime + (3600000 * timeOfffset))
                let date_now = Astana_date.getDate() + '_' + (Astana_date.getMonth() + 1) + '_' + Astana_date.getFullYear() + '__' + Astana_date.getHours() + '_' + Astana_date.getMinutes()                

                order_name[chatId] = 'Basement/cities/' + userCity[chatId] + '/points/' + userPoint[chatId] + '/bills/' + date_now.toString()
                console.log('ORDER NAME: ' + order_name[chatId])
                order_date[chatId] = date_now.toString()

                //date_now = Date.now()
                //date_string = date_now.getDate() + ',' + date_now.getHours() + ':' + date_now.getMinutes()
                let newbill = {
                    date_ordered: Astana_date.getTime(),
                    order_info: finalbasket[chatId],
                    price: finalprice[chatId],
                    client_id: chatId,
                    phone: user_phone[chatId],
                    order_status: abonement_statuses_text[0],
                    adress: user_adress[chatId],
                    client_name: user_name[chatId],
                    user_personsamount: user_personsamount[chatId],
                    user_payingmethod: user_payingmethod[chatId],
                    user_deliverdate: user_deliverdate[chatId],
                    user_sdachainfo: user_sdachainfo[chatId],
                    user_howtocome: user_howtocome[chatId]
                }

                let clientsamount = fb.database().ref('Basement/clients/clients_amount');
                    clientsamount.get().then((snapshot) => {
                    let count = snapshot.val();
                    if (userstatus[chatId] === 'unregistered'){
                        count++
                        updates['Basement/clients/clients_amount'] = count
                        userstatus[chatId] = 'registered'
                    }

                    updates['Basement/clients/' + chatId] = newuser
                    updates[order_name[chatId]] = newbill

                    fb.database().ref().update(updates)

                    AddMailingData()
                    StartCheckingOrder()
                })

                                  ////////////////////–û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê///////////////////////////////////                 
    let options = { weekday: 'short'}
    
let minutes = Astana_date.getMinutes()
if (minutes < 10) minutes = '0' + minutes
let hours = Astana_date.getHours()
if (hours < 10) hours = '0' + hours
let visible_date = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date.getDate() + '.' + (Astana_date.getMonth() + 1)

    abonements_bill_topic = abonement_bill_topic_names[0]
    abonemets_bill_client_info = `

<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b> (–ù—É—Ä-–°—É–ª—Ç–∞–Ω GMT+6)
‚îú –§–ò–û: ` + user_name[chatId] + `
‚îú –ê–¥—Ä–µ—Å: ` + user_adress[chatId] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chatId] + `

`
    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>
` + finalbasket[chatId] + `

`
    
    deliver_bill_finalprice = `<b>üíµ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b>
` + finalprice[chatId] + ` —Ç–≥.

`

    deliver_bill_order_details = `<b>‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b> (–ù—É—Ä-–°—É–ª—Ç–∞–Ω GMT+6)
‚îî –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ` + visible_date + `

`
    deliver_bill_help_info = `<b>üìå –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
‚îú –ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω: ` + user_personsamount[chatId] + `
‚îú –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ` + user_payingmethod[chatId] + `
‚îú –ö—É–ø—é—Ä–∞ –æ–ø–ª–∞—Ç—ã: ` + user_sdachainfo[chatId] + `
‚îî –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: ` + user_deliverdate[chatId] + `

<b>üö¥‚Äç‚ôÇÔ∏è –ö–∞–∫ –ø—Ä–æ–π—Ç–∏?</b>
` + user_howtocome[chatId] + `

`
    console.log('order_date! ' + order_date[chatId])
    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info + deliver_bill_finalprice + deliver_bill_help_info + deliver_bill_order_details
    console.log('last message id: ' + msg.message_id)
    let current_chat = fb.database().ref('Basement/cities/' + userCity[chatId] + '/points/' + userPoint[chatId] + '/chats/');
    current_chat.get().then((snapshot) => {
        if (user_mode[chatId] === usermodes[0][1]){
            operators_chat[chatId] = snapshot.val().delivers_chat
        }
        if (user_mode[chatId] === usermodes[1][1]){
            operators_chat[chatId] = snapshot.val().waiters_chat
        }

        bot.sendMessage(operators_chat[chatId], abonements_bill, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard:[
                    [{
                        text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: accept_order_callback + order_date[chatId]
                    }],
                    [{
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: refuse_order_callback + order_date[chatId]
                    }]
                ]
            }
        }).then(() => {
            //bot.sendContact(delivery_chat, user_phone[chatId], user_name[chatId]).then(() => {
            
            /* let update = {}
            let bill_message_id = query.message.message_id
            console.log('bills message id: ' + bill_message_id)
            update['Basement/bills/' + order_date/*  + '/bill_message_id' ] = bill_message_id
            console.log('adding message id: ' + 'Basement/bills/' + order_date) */
        })
    })

    
            }
        }
        else {
            bot.deleteMessage(chatId, add_info_msg[chatId]).then(() => {
                abonement_status[chatId] = abonement_statuses_text[0]
                bot.sendMessage(chatId, abonementrequest_sended, {
                    reply_markup: {
                        keyboard: unregistered_keyboard[3],
                        resize_keyboard: true
    
                    }
                })

                let updates = {};

                let username = []
                username[chatId] = "undefined"
                if (msg.chat.username != undefined) username[chatId] = msg.chat.username.toString()
                
                let alltimepurchases = []
                alltimepurchases[chatId] = 1
                if (abonements_bought[chatId] > 0){
                    alltimepurchases[chatId] = abonements_bought[chatId] + 1
                }
                

                let newuser = {
                    adress: user_adress[chatId],
                    average_price: average_price[chatId],
                    average_purchases: average_purchases[chatId],
                    coins: user_coins[chatId],
                    email: user_email[chatId],
                    favourite_food: favourite_program[chatId],
                    id: chatId,
                    name: user_name[chatId],
                    phone: user_phone[chatId],
                    username: username[chatId],
                    alltime_purchases_amount: alltimepurchases[chatId]
                }

                let date = new Date()
                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                let timeOfffset = 6 //Astana GMT +6
                let Astana_date = new Date(utcTime + (3600000 * timeOfffset))
                let date_now = Astana_date.getDate() + '_' + (Astana_date.getMonth() + 1) + '_' + Astana_date.getFullYear() + '__' + Astana_date.getHours() + '_' + Astana_date.getMinutes()                

                //date_now = Date.now()
                //date_string = date_now.getDate() + ',' + date_now.getHours() + ':' + date_now.getMinutes()
                order_name[chatId] = 'Basement/cities/' + userCity[chatId] + '/points/' + userPoint[chatId] + '/bills/' + date_now.toString()
                order_date[chatId] = date_now.toString()
                console.log('ORDER NAME: ' + order_name[chatId])

                let newbill = {
                    date_ordered: Astana_date.getTime(),
                    order_info: finalbasket[chatId],
                    price: finalprice[chatId],
                    client_id: chatId,
                    phone: user_phone[chatId],
                    order_status: abonement_statuses_text[0],
                    adress: user_adress[chatId],
                    client_name: user_name[chatId],
                    user_personsamount: user_personsamount[chatId],
                    user_payingmethod: user_payingmethod[chatId],
                    user_deliverdate: user_deliverdate[chatId],
                    user_sdachainfo: user_sdachainfo[chatId],
                    user_howtocome: user_howtocome[chatId]
                }

                let clientsamount = fb.database().ref('Basement/clients/clients_amount');
                    clientsamount.get().then((snapshot) => {
                    let count = snapshot.val();
                    console.log('WARNING! ' + userstatus[chatId])
                    if (userstatus[chatId] === 'unregistered'){
                        count++
                        updates['Basement/clients/clients_amount'] = count
                        userstatus[chatId] = 'registered'
                    }

                    updates['Basement/clients/' + chatId] = newuser
                    updates[order_name[chatId]] = newbill

                    fb.database().ref().update(updates)

                    AddMailingData()
                    StartCheckingOrder() 
                    
                }).catch(err => {
                    console.log('error: ' + err)
                })

                   ////////////////////–û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê///////////////////////////////////                 
    let options = { weekday: 'short'}
    let minutes = Astana_date.getMinutes()
    if (minutes < 10) minutes = '0' + minutes
    let hours = Astana_date.getHours()
    if (hours < 10) hours = '0' + hours
    let visible_date = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date.getDate() + '.' + (Astana_date.getMonth() + 1)
    
    abonements_bill_topic = abonement_bill_topic_names[0]
    abonemets_bill_client_info = `

<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + user_name[chatId] + `
‚îú –ê–¥—Ä–µ—Å: ` + user_adress[chatId] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chatId] + `

`
    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>
` + finalbasket[chatId] + `

`
    
    deliver_bill_finalprice = `<b>üíµ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b>
` + finalprice[chatId] + ` —Ç–≥.

`

    deliver_bill_order_details = `<b>‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b> (–ù—É—Ä-–°—É–ª—Ç–∞–Ω GMT+6)
‚îî –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ` + visible_date + `

`
deliver_bill_help_info = `<b>üìå –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
‚îú –ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω: ` + user_personsamount[chatId] + `
‚îú –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ` + user_payingmethod[chatId] + `
‚îú –ö—É–ø—é—Ä–∞ –æ–ø–ª–∞—Ç—ã: ` + user_sdachainfo[chatId] + `
‚îî –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: ` + user_deliverdate[chatId] + `

<b>üö¥‚Äç‚ôÇÔ∏è –ö–∞–∫ –ø—Ä–æ–π—Ç–∏?</b>
` + user_howtocome[chatId] + `

`
    console.log('order_date! ' + order_date[chatId])

    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info + deliver_bill_finalprice + deliver_bill_help_info + deliver_bill_order_details
    console.log('last message id: ' + msg.message_id)
    let current_chat = fb.database().ref('Basement/cities/' + userCity[chatId] + '/points/' + userPoint[chatId] + '/chats/');
    current_chat.get().then((snapshot) => {
        if (user_mode[chatId] === usermodes[0][1]){
            operators_chat[chatId] = snapshot.val().delivers_chat
        }
        if (user_mode[chatId] === usermodes[1][1]){
            operators_chat[chatId] = snapshot.val().waiters_chat
        }

        bot.sendMessage(operators_chat[chatId], abonements_bill, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard:[
                    [{
                        text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: accept_order_callback + order_date[chatId]
                    }],
                    [{
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: refuse_order_callback + order_date[chatId]
                    }]
                ]
            }
        }).then(() => {
            //bot.sendContact(delivery_chat, user_phone[chatId], user_name[chatId])
            /* let update = {}
            let bill_message_id = query.message.message_id
            console.log('bills message id: ' + bill_message_id)
            update['Basement/bills/' + order_date/*  + '/bill_message_id' ] = bill_message_id
            console.log('adding message id: ' + 'Basement/bills/' + order_date) */
        }).catch(err => {
            console.log('error: ' + err)
        })
    })
    

    ////////////////////////////////////////////////////////////////////////

                //console.log('Date: ' + date_now.getHours() + ':' + date_now.getMinutes())
            }).catch(err => {
                console.log('error: ' + err)
            })
        }
    }

    if (msg.text === order_status_button){
        bot.deleteMessage(msg.chatId, msg.message_id).then(() => {
            console.log('Order name: "' + order_name[chatId] + '"')
            let userdata = fb.database().ref(order_name[chatId])
            userdata.get().then((result) => {
                abonement_status[chatId] = result.val().order_status
                console.log('order_status: ' + result.val().order_status)
                console.log('order link: Basement/bills/' + order_name[chatId])
                bot.sendMessage(msg.chatId, '–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: ' + abonement_status[chatId])
            }) 
        })
    }

    if (msg.text === 'erheoirhjeoihri'){
        bot.deleteMessage(chatId, msg.message_id - 1)
        bot.deleteMessage(chatId, msg.message_id).then(() => {

            user_coins[chatId] = user_coins[chatId] + (finalprice[chatId] * cashback)
            user_coins[chatId] = Math.round(user_coins[chatId])
            added_coins[chatId] = (finalprice[chatId] * cashback)
            added_coins[chatId] = Math.round(added_coins[chatId])
            console.log('coins = ' + user_coins[chatId] + '. –ë—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ' + added_coins[chatId] + '. Cashback: ' + cashback + '. Finalprice: ' + finalprice[chatId])

/*             order_status[chatId] = 'unknown'
            order_name[chatId] = ''
            finalbasket[chatId] = ''
            finalprice[chatId] = 0
            basket[chatId] = [] */

            let poll_text = '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–∫–∏: '
            bot.sendMessage(chatId, poll_text).then(() => {
                bot.sendPoll(chatId, '–ö–∞–∫ –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å?', feedback_options, {
                    is_anonymous: false
                })
            })

            /* if (user_email[chatId] === 'unknown'){
                
                let tmp_text = `–í–∞–º –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>` + added_coins[chatId] + `</b> —Ç–µ–Ω–≥–µ. –í–∞—à —Å—á–µ—Ç: ` + user_coins[chatId] + ` —Ç–µ–Ω–≥–µ. –ò–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã. 
                
–ö—Å—Ç–∞—Ç–∏, –µ—Å–ª–∏ –í—ã –ø—Ä–∏–≤—è–∂–µ—Ç–µ –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É —Å–≤–æ–π email, —Ç–æ –ø–æ–ª—É—á–∏—Ç–µ –µ—â–µ <b>` + (added_coins[chatId] * percent_foremail) + `</b> —Ç–µ–Ω–≥–µ. 

–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –º—ã –Ω–µ –±—É–¥–µ–º —Å–ª–∞—Ç—å –í–∞–º —Å–ø–∞–º üòè `
                bot.sendMessage(chatId, tmp_text, {
                    parse_mode: 'HTML',
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: add_email,
                                callback_data: add_email
                            }],
                            [{
                                text: dont_add_email,
                                callback_data: dont_add_email
                            }]
                        ]
                    }
                })
            }

            else if (user_email[chatId] !== 'unknown'){
                let updates = {};
                updates['Basement/clients/' + msg.chatId + '/coins'] = user_coins[chatId]
                fb.database().ref().update(updates).then(() => {
                    //—Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    for (let i=0; i<100; i++){
                        bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                            console.log(err)
                        })
                    }
                    bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chatId] + '. ' + emailalreadyadded_text).then(() => {
                        Reset(chatId)
                        anotherpoint_multiple[chatId] = 2
                        keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], categories_count[chatId], fb, bot, chatId, msg, anotherpoint_text, choosecategory_text, hellomessage_text, location_text, phone_text)
                    })
                })
            } */
        })
    }

    if (msg.text === dont_add_email){
        isMakingChanges[chatId] = 0
        //—Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏, –Ω–æ —Ç—ã —Ä–µ–≥–∏—Å—Ç–µ—Ä–µ–¥

        let updates = {};
        updates['Basement/clients/' + msg.chatId + '/coins'] = user_coins[chatId]
        fb.database().ref().update(updates).then(() => {
            //—Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            for (let i=0; i<100; i++){
                bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                    console.log(err)
                })
            }
            bot.sendMessage(chatId, didntaddemail_text).then(() => {
                IdentifyUser(chatId)
                anotherpoint_multiple[chatId] = 2
                keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], fb, bot, chatId, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chatId], userPoint[chatId], user_mode[chatId])
            })
        })

    }

    if (msg.text === declineorder_button){
        let updates = {}
        updates[order_name[chatId]] = null
        bot.deleteMessage(chatId, msg.message_id)
        fb.database().ref().update(updates).then(() => {
            for (let i=0; i<100; i++){
                bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                    //console.log(err)
                })
            }
            bot.sendMessage(chatId, '–ñ–∞–ª—å, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ üò¢').then(() => {
                IdentifyUser(chatId)
                anotherpoint_multiple[chatId] = 2
                keyboards.CategoriesKeyboard(category_keyboard[chatId], userCategories[chatId], fb, bot, chatId, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chatId], userPoint[chatId], user_mode[chatId])
            })
        }).catch(err => {
            console.log(err)
        })
    }
})

bot.on('callback_query', query => {
    const { chat, message_id, text } = query.message
    current_chat = chat.id

    console.log(query.data)
    console.log(query)

    if (userstatus[query.from.id] === 'unknown' || userstatus[query.from.id] === undefined){
        if (chat.type === 'group' || chat.type === 'supergroup'){
            bot.getChat(chat.id).then(result => {
                if (result.description !== undefined && result.description !== null){
                    console.log('group: ' + result.description)
                    let del_userdata = []
                    del_userdata[chat.id] = result.description.split('/')
                    if (del_userdata[chat.id].length === 3 && del_userdata[chat.id][2] === (chat.id).toString()){
                        club_name_fb[query.from.id] = del_userdata[chat.id][0]
                        IdentifyUser(query.from.id)
                    }
                }
            })
        }
        else {
            if (club_name_fb[chat.id] === undefined || club_name_fb[chat.id] === null){
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chat.id, message_id - i + 1).catch(err => {
                        //console.log(err)
                    })
                }
                IdentifyUser(chat.id)
                keyboards.GymsKeyboard(gym_keyboard[chat.id], userGyms[chat.id], fb, bot, chat.id, mother_link, choosegym_text)
            }
        }
        console.log('dont know users status, lets check it')
        
    }

    if (chat.type === 'private'  && chat.id !== admin_id[chat.id]){ 
    
        if (query.data === keyboards.main_menu_buttons[1][1]){
            //bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
            bot.editMessageText(text, {
                chat_id: chat.id,
                message_id: message_id
            }).catch(err => {console.log('here: ' + err)})
            keyboards.ProgramCategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], fb, bot, chat.id, backtomain_text, choosecategory_text, club_name_fb[chat.id])
        }

        if (query.data === keyboards.main_menu_buttons[2][1]){
            bot.editMessageText(text, {
                chat_id: chat.id,
                message_id: message_id
            }).catch(err => {console.log('here: ' + err)})
            keyboards.TrenersKeyboard(trener_keyboard[chat.id], userTreners[chat.id], fb, bot, chat.id, backtomain_text, choosetrener_text, club_name_fb[chat.id])
        }
    
        if (query.data === query_deletethismessage){
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
            for (let i=0; i<100; i++){
                bot.deleteMessage(chat.id, message_id - i).catch(err => {
                    //console.log(err)
                })
            }
            bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
            .then(() => {
                anotherpoint_multiple[chat.id] = 2
                bot.sendMessage(chat.id, hellomessage_text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: keyboards.main_menu_keyboard
                    }
                })
            })
        }

        if (query.data === igotmyitem_text[1]){
            if (skidka[chat.id] !== 0) {
                let updates = {}
                updates['Fitness/'+club_name_fb[chat.id]+'/clients/'+chat.id + '/coins'] = user_coins[chat.id] - skidka[chat.id]
                fb.database().ref().update(updates)
            }
            if (userstatus[chat.id] === 'registered'){
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chat.id, message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                .then(() => {
                    anotherpoint_multiple[chat.id] = 2
                    bot.sendMessage(chat.id, hellomessage_text, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: keyboards.main_menu_keyboard
                        }
                    })
                })
            }
        }

        if (query.data === keyboards.main_menu_buttons[0][1]){
            if (userstatus[chat.id] !== 'registered'){
                bot.editMessageText(text, {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_id
                }).then(() => {
                    bot.sendMessage(chat.id, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. –°–∞–º–æ–µ –≤—Ä–µ–º—è –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å!', {
                        parse_mode: 'HTML',
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: backtomain_text,
                                    callback_data: backtomain_text
                                }],
                                [{
                                    text: keyboards.main_menu_buttons[1][0],
                                    callback_data: keyboards.main_menu_buttons[1][1]
                                }]
                            ]
                        }
                    })
                })
            }
            if (userstatus[chat.id] === 'registered'){
                
                bot.editMessageText(text, {
                    parse_mode: 'HTML',
                    chat_id: chat.id,
                    message_id: message_id
                }).then(() => {
                    let abonem_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id)
                    abonem_data.on('value', (result) => {

                        let Astana_date_end = new Date(result.val().abonement.end_date)  
                        let minutes = Astana_date_end.getMinutes()
                        if (minutes < 10) minutes = '0' + minutes
                        let hours = Astana_date_end.getHours()
                        if (hours < 10) hours = '0' + hours
                        let visible_date_end = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_end) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date_end.getDate() + '.' + (Astana_date_end.getMonth() + 1) + '.' + Astana_date_end.getFullYear()        

                        let temp_mes = `<b>–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç: </b>` + result.val().abonement.abonement_status + `

<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b> ` + result.val().abonement.name + `
<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </b>` + result.val().abonement.period + ` –º–µ—Å.
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: </b>` + result.val().abonement.price + ` —Ç–µ–Ω–≥–µ

<b>üïî –ê–±–æ–Ω–µ–º–µ–Ω—Ç –≥–æ–¥–µ–Ω –¥–æ:</b> ` + visible_date_end

                        if (result.val().abonement.freeze_amount !== false){
                            temp_mes += `
‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ` + result.val().abonement.freeze_amount
                        }

                        if (result.val().coins > 0){
                            temp_mes += `
üí∞ –ë–∞–ª–∞–Ω—Å: ` + result.val().coins + ` —Ç–µ–Ω–≥–µ`
                        }
                        
                        bot.sendMessage(chat.id, temp_mes, {
                            parse_mode: 'HTML',
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: backtomain_text,
                                        callback_data: backtomain_text
                                    }]
                                ]
                            }
                        })
                    })
                    
                })
            }
        }

        if (query.data === keyboards.main_menu_buttons[3][1]){
            bot.editMessageText(text, {
                chat_id: chat.id,
                message_id: message_id
            }).catch(err => {console.log('here: ' + err)})
            keyboards.ShopCategoriesKeyboard(shop_keyboard[chat.id], userShopCategories[chat.id], fb, bot, chat.id, backtomain_text, chooseshopcategory_text, club_name_fb[chat.id])
        }

        for (let i=0; i<userShopCategories[chat.id].length; i++){
            if (query.data === userShopCategories[chat.id][i]){
                userShopCategory[chat.id] = userShopCategories[chat.id][i]
                keyboards.ShopItemsKeyboard(shopitems_keyboard[chat.id], userItemsList[chat.id], userShopCategory[chat.id], fb, bot, chat, message_id, anothershopcategory_text, chooseitem_text, club_name_fb[chat.id])
            }
        }

        for (let i=0; i < 100; i++){
            console.log(query.data + ', usershopcategory = ' + userShopCategory[chat.id])
            if (query.data === i.toString() && userShopCategory[chat.id] !== undefined && userShopCategory[chat.id] !== null /* && userItem[chat.id] === '' */) {
                console.log(query.data + ', usershopcategory = ' + userShopCategory[chat.id])
                userItem[chat.id] = i
                bot.deleteMessage(chat.id, message_id)
                let itemdata = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/shop/categories/' + userShopCategory[chat.id] + '/items/' + query.data)
                itemdata.get().then((result) => {
                    let temp_text = `<b>`+ result.val().name + `</b>
` + result.val().description + `

üí∞ –¶–µ–Ω–∞: ` + result.val().price + ` —Ç–µ–Ω–≥–µ`
                    userItemPrice[chat.id] = result.val().price
                    if (userstatus[chat.id] === 'registered'){
                        bot.sendPhoto(chat.id, result.val().photo, {
                            parse_mode: 'HTML',
                            caption: temp_text,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: backtoitemslist_text[0],
                                        callback_data: backtoitemslist_text[1]
                                    }],
                                    [{
                                        text: buyitem_text[0],
                                        callback_data: buyitem_text[1]
                                    }]
                                ]
                            }
                        })
                    }
                    if (userstatus[chat.id] !== 'registered'){
                        bot.sendPhoto(chat.id, result.val().photo, {
                            parse_mode: 'HTML',
                            caption: temp_text,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: backtoitemslist_text[0],
                                        callback_data: backtoitemslist_text[1]
                                    }]
                                ]
                            }
                        })
                    }
                })
            }
        }

        if (query.data === buyitem_text[1]){
            bot.deleteMessage(chat.id, message_id).catch(err => {console.log(err)})
            let userdata = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id)
            userdata.get().then((result) => {
                user_coins[chat.id] = result.val().coins
                if(user_coins[chat.id] >= (userItemPrice[chat.id] * min_cashback[chat.id]) && userItemPrice[chat.id] >= min_price[chat.id]){
                    if (user_coins[chat.id] > (userItemPrice[chat.id] * max_cashback[chat.id])){
                        skidka[chat.id] = userItemPrice[chat.id] * max_cashback[chat.id]
                    }
                    else skidka[chat.id] = user_coins[chat.id]

                    bot.sendMessage(chat.id, '–£ –≤–∞—Å –µ—Å—Ç—å ' + user_coins[chat.id] + ' —Ç–µ–Ω–≥–µ, –∏—Ö –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å ' + skidka[chat.id] + ' —Ç–µ–Ω–≥–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –•–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º–∏?', {
                        parse_mode: 'HTML',
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: useskidka_text[0],
                                    callback_data: useskidka_text[1]
                                }],
                                [{
                                    text: dontuseskidka_text[0],
                                    callback_data: dontuseskidka_text[0]
                                }]
                            ]
                        }
                    })

                }
                else {
                    let itemdata = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/shop/categories/' + userShopCategory[chat.id] + '/items/' + userItem[chat.id])
            itemdata.get().then((result) => {
                let billtext = `

<b>‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É</b>
‚îú –ö–ª–∏–µ–Ω—Ç: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: ` + result.val().name + `
‚îú –¶–µ–Ω–∞: ` + result.val().price + `
‚îî –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å—ã `

                bot.sendMessage(chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω"' + billtext, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text:igotmyitem_text[0],
                                callback_data: query_deletethismessage
                            }]
                        ]
                    }
                })

                bot.sendMessage(operators_chat[chat.id], billtext, {
                    parse_mode: 'HTML'
                })
            })
                }
            })
        }

        if (query.data === dontuseskidka_text[1]){
            let itemdata = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/shop/categories/' + userShopCategory[chat.id] + '/items/' + userItem[chat.id])
            itemdata.get().then((result) => {
                let billtext = `

<b>‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É</b>
‚îú –ö–ª–∏–µ–Ω—Ç: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: ` + result.val().name + `
‚îú –¶–µ–Ω–∞: ` + result.val().price + `
‚îî –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å—ã `

                bot.sendMessage(chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω"' + billtext, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text:igotmyitem_text[0],
                                callback_data: query_deletethismessage
                            }]
                        ]
                    }
                })

                bot.sendMessage(operators_chat[chat.id], billtext, {
                    parse_mode: 'HTML'
                })
            })
        }

        if (query.data === useskidka_text[1]){
            let itemdata = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/shop/categories/' + userShopCategory[chat.id] + '/items/' + userItem[chat.id])
            itemdata.get().then((result) => {
                let billtext = `

<b>‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É</b>
‚îú –ö–ª–∏–µ–Ω—Ç: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: ` + result.val().name + `
‚îú –¶–µ–Ω–∞: ` + result.val().price + `
‚îî –ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å—ã: ` + skidka[chat.id] + ` —Ç–µ–Ω–≥–µ

üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ —Ç–æ–≤–∞—Ä: ` + (result.val().price - skidka[chat.id])

                bot.sendMessage(chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫–ª—É–±–∞. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω"' + billtext, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: igotmyitem_text[0],
                                callback_data: igotmyitem_text[1]
                            }]
                        ]
                    }
                })

                bot.sendMessage(operators_chat[chat.id], billtext, {
                    parse_mode: 'HTML'
                })
            })
        }

        if (query.data === sendlocation){
            const msgtext = `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, –∏ –º—ã –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π <b>Coffee BOOM</b> ‚òïÔ∏è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–∫—Ä–µ–ø–∫–∏ (—Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <b>"–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è"</b>
üè™ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ`
            bot.sendVideo(chat.id, './pictures/tutorial.mp4').then(() => {
                bot.sendMessage(chat.id, msgtext, {parse_mode: 'HTML'})
            })
        }

        if (query.data === backtomain_text){
            if (userstatus[chat.id] !== 'registered'){
                IdentifyUser(chat.id)
            }
            for (let i=0; i<100; i++){
                bot.deleteMessage(chat.id, message_id - i).catch(err => {
                    //console.log(err)
                })
            }
            bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)]).then(() => {
                anotherpoint_multiple[chat.id] = 2
                bot.sendMessage(chat.id, hellomessage_text, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: keyboards.main_menu_keyboard
                    }
                })
            })
            
        }

        for (let i = 0; i < userCategories[chat.id].length; i++){
            //console.log('categorycheck: ' + userCategories[chat.id][i])
            if (query.data === userCategories[chat.id][i] && userProgram[chat.id] === ''){
                userCategory[chat.id] = userCategories[chat.id][i]
                userProgram[chat.id] = 'unknown'
                console.log('PRESSED ON CATEGORY!!!')
                //bot.deleteMessage(chat.id, message_id).catch(err => {console.log('here: ' + err)})
                keyboards.ProgramKeyboard(programmes_keyboard[chat.id], userProgrammesList[chat.id], userCategory[chat.id], fb, bot, chat, message_id, anothercategory_text, chooseprogramme_text, club_name_fb[chat.id])
            }
        }

        if (query.data === anothercategory_text){
            userCategory[chat.id] = ''
            userProgram[chat.id] = ''
            bot.deleteMessage(chat.id, message_id)
            keyboards.ProgramCategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], fb, bot, chat.id, backtomain_text, choosecategory_text, club_name_fb[chat.id])
        }

        if (query.data === anothershopcategory_text){
            userShopCategory[chat.id] = ''
            bot.deleteMessage(chat.id, message_id)
            keyboards.ShopCategoriesKeyboard(shop_keyboard[chat.id], userShopCategories[chat.id], fb, bot, chat.id, backtomain_text, chooseshopcategory_text, club_name_fb[chat.id])
        }

        if (query.data === backtoitemslist_text[1]){
            userItem[chat.id] = ''
            userItemPrice[chat.id] = 0
            bot.deleteMessage(chat.id, message_id)
            keyboards.ShopItemsKeyboard(shopitems_keyboard[chat.id], userItemsList[chat.id], userShopCategory[chat.id], fb, bot, chat, message_id, anothershopcategory_text, chooseitem_text, club_name_fb[chat.id])
        }

        for (let i = 0; i < temp_program_types[chat.id].length; i++){
            if (query.data === choosetype_callback + temp_program_types[chat.id][i][3]){
                    myprogram_type[chat.id] = temp_program_types[chat.id][i]
                    bot.editMessageCaption(messages_texts[chat.id][0], {
                        parse_mode: 'HTML',
                        chat_id: chat.id,
                        message_id: messages_todelete[chat.id][0]
                    })
                    .catch(err => {console.log(err)})
                    /* for (let i = 0; i < messages_todelete[chat.id].length; i++){
                        console.log('why? ' + messages_todelete[chat.id].length)
                        bot.deleteMessage(chat.id, messages_todelete[chat.id][i])
                    } */
                    let texttosend = []
                    texttosend[chat.id] = `<b>–û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–∏–º–µ–Ω—Ç–∞: </b>
‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ` + temp_program_types[chat.id][i][0] + ` –º–µ—Å. 
`
                    if (temp_program_types[chat.id][i][4] !== 'unlimited'){
                        texttosend[chat.id] += `üë£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + temp_program_types[chat.id][i][4] + `
`
                    }
                    
                    if (temp_program_types[chat.id][i][2] === 'morning') {
                        texttosend[chat.id] += `üïì –ß–∞—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è: —Å ` + morning_time[chat.id][0][0] + ':' + morning_time[chat.id][0][1] + ' –ø–æ ' + morning_time[chat.id][1][0] + ':' + morning_time[chat.id][1][1] + `
`
                    }

                    if (temp_program_types[chat.id][i][2] === 'evening') {
                        texttosend[chat.id] += `üïì –ß–∞—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è: —Å ` + evening_time[chat.id][0][0] + ':' + evening_time[chat.id][0][1] + ' –ø–æ ' + evening_time[chat.id][1][0] + ':' + evening_time[chat.id][1][1] + `
`
                    }

                    texttosend[chat.id] += `üí∞ –¶–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ` + temp_program_types[chat.id][i][1] + ` —Ç–µ–Ω–≥–µ`

                    if (temp_program_types[chat.id][i][5] !== false){
                        texttosend[chat.id] += `

<i>‚ùÑÔ∏è –í –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤—Ö–æ–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫–∏ (`+ temp_program_types[chat.id][i][5] +` –¥–Ω.) </i>`
                    }

                    if (temp_program_types[chat.id][i][5] === false){
                        texttosend[chat.id] += `

<i>‚ùÑÔ∏è –í –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫–∏ </i>`
                    }
                    types_keyboard[chat.id][2][0] = 
                    {
                        text: fillabonement_text,
                        callback_data: fillabonement_text + temp_program_types[chat.id][i][3]
                    }
                    if (messages_todelete[chat.id][1] !== undefined){
                        bot.editMessageText(texttosend[chat.id], {
                            parse_mode: 'HTML',
                            chat_id: chat.id,
                            message_id: messages_todelete[chat.id][1],
                            reply_markup: {
                                inline_keyboard: types_keyboard[chat.id]
                            }
                        }).catch(err => {console.log('2 ' + err)})
                        .then(res => {messages_texts[chat.id][1] = res.text})
                    }

                    if (messages_todelete[chat.id][1] === undefined){
                        bot.sendMessage(chat.id, texttosend[chat.id], {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: types_keyboard[chat.id]
                            }
                        }) 
                        .then(res => {
                            messages_todelete[chat.id][1] = res.message_id
                            messages_texts[chat.id][1] = res.text
                        })
                        .catch(err => {console.log('1 ' + err)})
                    }
                    
                    
            }
        }

        for (let i = 0; i < userGyms[chat.id].length; i++){
            if (query.data === userGyms[chat.id][i]){
                userstatus[chat.id] = 'unknown'
                club_name_fb[chat.id] = userGyms[chat.id][i]
                console.log('@#$@%')
                
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chat.id, message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                .then(() => {
                    anotherpoint_multiple[chat.id] = 2
                    bot.sendMessage(chat.id, hellomessage_text, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: keyboards.main_menu_keyboard
                        }
                    })
                    .then(() => {
                        IdentifyUser(chat.id)
                    })
                })
                
            }
        }
    
    for (let i = 0; i < userProgrammesList[chat.id].length; i++){
        if (query.data === userProgrammesList[chat.id][i]){
            //console.log('–ö–Ω–æ–ø–∫—É –Ω–∞—à–ª–∏')
            userProgram[chat.id] = userProgrammesList[chat.id][i]
            let program_photo_link = []
            program_photo_link[chat.id] = ''
            let program_description = []
            program_description[chat.id] = ''
            let program_peopleamount = []
            program_peopleamount[chat.id] = ''
            let program_trener_link = []
            program_trener_link[chat.id] = ''
            let program_trener_name = []
            program_trener_name[chat.id] = ''
            let program_name = []
            program_name[chat.id] = ''
            
            bot.deleteMessage(chat.id, message_id).then(() => {
                let prg_info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/')
                prg_info.get().then((snapshot) =>
                {
                    program_photo_link[chat.id] = snapshot.val().photo_link

                    program_description[chat.id] = snapshot.val().description
                    program_name[chat.id] = snapshot.val().name
                    program_trener_link[chat.id] = snapshot.val().trener_link
                    program_trener_name[chat.id] = snapshot.val().trener_name

                    program_peopleamount[chat.id] = snapshot.val().people_in_group

                    let pamount_values = []
                    pamount_values[chat.id] = []

                    if (program_peopleamount[chat.id] !== 'unlimited') {
                        pamount_values[chat.id] = program_peopleamount[chat.id].split('/')
                        pamount_values[chat.id][0] = parseInt(pamount_values[chat.id][0])
                        pamount_values[chat.id][1] = parseInt(pamount_values[chat.id][1])
                    }

                    let types_info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/types/')
                    types_info.get().then((snapshot) => {
                        let types_amount = []
                        types_amount[chat.id] = Object.keys(snapshot.val())
                        types_keyboard[chat.id] = [[],[], []]
                        types_keyboard[chat.id][0][0] = 
                        {
                            text: anotherprogram_text,
                            callback_data: anotherprogram_text
                        }
                        console.log(Object.keys(snapshot.val()))
                        for (let i = 0; i < types_amount[chat.id].length; i++){
                            let info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/Program/categories/' + userCategory[chat.id] + '/programmes/' + userProgram[chat.id] + '/types/' + types_amount[chat.id][i])
                            info.get().then((result) => {
                                temp_program_types[chat.id][i] = [result.val().period, result.val().price, result.val().time, result.val().type_name, result.val().visits, result.val().is_freeze, program_name[chat.id]] 
                                console.log(temp_program_types[chat.id][i])
                                if (pamount_values[chat.id][0] < pamount_values[chat.id][1] || program_peopleamount[chat.id] === 'unlimited') {
                                    types_keyboard[chat.id][1][i] = 
                                    {
                                        text: result.val().type_name,
                                        callback_data: choosetype_callback + result.val().type_name
                                    }
                                }
                                

                                if (i === types_amount[chat.id].length - 1){
                                    temp_food_text[chat.id] = `<b>` + program_name[chat.id] + `</b>
` + program_description[chat.id]
                                    if (program_trener_link[chat.id] !== 'unknown' && program_trener_name[chat.id] !== 'unknown') {
                                        temp_food_text[chat.id] += `
                                            
<b>–¢—Ä–µ–Ω–µ—Ä: </b><a href="`+ program_trener_link[chat.id] +`">`+ program_trener_name[chat.id] + `</a>` 
                                    }
                                    if (program_trener_link[chat.id] === 'unknown' && program_trener_name[chat.id] !== 'unknown') {
                                        temp_food_text[chat.id] += `
                                            
<b>–¢—Ä–µ–Ω–µ—Ä: </b>`+ program_trener_name[chat.id] 
                                    }

                                    if (program_peopleamount[chat.id] !== 'unlimited'){
                                        temp_food_text[chat.id] += `
                                    
<b>–ó–∞–ø–∏—Å–∞–ª–∏—Å—å:</b> ` + program_peopleamount[chat.id]
                                    }

                                    

                                    if (pamount_values[chat.id][0] < pamount_values[chat.id][1] ||  program_peopleamount[chat.id] === 'unlimited') {
                                        temp_food_text[chat.id] += `
                                    
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã: `
                                    }

                                    if (pamount_values[chat.id][0] >= pamount_values[chat.id][1]) {
                                        favourite_program[chat.id] = myprogram_type[chat.id][6]
                                        if (waitlist[chat.id] === ''){
                                            waitlist[chat.id] = myprogram_type[chat.id][6]
                                            let wait_data = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/mailing/waitlist/programmes/' + myprogram_type[chat.id][6])
                                            wait_data.get().then((result) => {
                                                let local_waitlist = result.val()
                                                let lists_array = local_waitlist.split(',')
                                                for(let i = 0; i<lists_array; i++){
                                                    if (lists_array[i] === chat.id){
                                                        break
                                                    }
                                                    if (i === lists_array - 1 && lists_array[i] !== chat.id){
                                                        if (local_waitlist = '0'){
                                                            local_waitlist = (chat.id).toString()
                                                        }
                                                        if (local_waitlist !== '0'){
                                                            local_waitlist += ',' + chat.id
                                                        }
    
                                                        let updates = {}
                                                        updates['Fitness/'+club_name_fb[chat.id]+'/mailing/waitlist/programmes/' + myprogram_type[chat.id][6]] = local_waitlist
                                                        fb.database().ref().update(updates)
                                                    }
                                                }
                                            })
                                        }
                                        
                                        temp_food_text[chat.id] += `
                                    
<i>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã</i> `
                                        types_keyboard[chat.id][1][0] = 
                                        {
                                            text: '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',
                                            url: 'https://t.me/' + support_username[chat.id]
                                        }
                                    }
                                    

                                    bot.sendPhoto(chat.id, program_photo_link[chat.id], {
                                        parse_mode: 'HTML',
                                        caption: temp_food_text[chat.id],
                                        reply_markup:{
                                            inline_keyboard:types_keyboard[chat.id]
                                        }
                                    })
                                    .then(res => {
                                        messages_todelete[chat.id][0] = res.message_id
                                        messages_texts[chat.id][0] = res.caption
                                    })
                                    .catch(err => {console.log(err)})
                                }
                            })
                        }
                    })

                }).catch((err) => {console.log(err)})
            })
        }
    }

        for (let i = 0; i < userTreners[chat.id].length; i++){
            if (query.data === userTreners[chat.id][i]){
                userTrener[chat.id] = userTreners[chat.id][i]

                bot.deleteMessage(chat.id, message_id).then(() => {
                    let prg_info = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/treners/' + userTreners[chat.id][i])
                    prg_info.get().then((snapshot) =>
                    {
                        let description = snapshot.val().description
                        let name = snapshot.val().name
                        let social_link = snapshot.val().social_link
                        let photo_link = snapshot.val().photo
                        
                        const texty = `<b>`+ name +`</b>
` + description

                        bot.sendPhoto(chat.id, photo_link, {
                            parse_mode: 'HTML',
                            caption: texty,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
                                        url: social_link
                                    }],
                                    [{
                                        text: backtotreners_text[0],
                                        callback_data: backtotreners_text[1]
                                    }]
                                ]
                            }
                        })
                        .then(res => {
                            messages_todelete[chat.id][0] = res.message_id
                            messages_texts[chat.id][0] = res.caption
                        })
                        .catch(err => {console.log(err)})
    
                    }).catch((err) => {console.log(err)})
                })
            }
        }

    
    if (query.data === anotherprogram_text){
        userProgram[chat.id] = ''
        bot.deleteMessage(chat.id, messages_todelete[chat.id][0]).catch(err => {console.log(err)})
        .then(() => {messages_todelete[chat.id][0] = undefined})
        if (messages_todelete[chat.id][1] !== null){
            console.log('!!')
            bot.deleteMessage(chat.id, messages_todelete[chat.id][1]).catch(err => {console.log(err)})
            .then(() => {messages_todelete[chat.id][1] = undefined})
        }
        keyboards.ProgramKeyboard(programmes_keyboard[chat.id], userProgrammesList[chat.id], userCategory[chat.id], fb, bot, chat, message_id, anothercategory_text, chooseprogramme_text, club_name_fb[chat.id])
        
    }

    if (query.data === backtotreners_text[1]){
        userTrener[chat.id] = ''
        bot.deleteMessage(chat.id, messages_todelete[chat.id][0]).catch(err => {console.log(err)})
        .then(() => {messages_todelete[chat.id][0] = undefined})
        if (messages_todelete[chat.id][1] !== null){
            console.log('!!')
            bot.deleteMessage(chat.id, messages_todelete[chat.id][1]).catch(err => {console.log(err)})
            .then(() => {messages_todelete[chat.id][1] = undefined})
        }
        keyboards.TrenersKeyboard(trener_keyboard[chat.id], userTreners[chat.id], fb, bot, chat.id, backtomain_text, choosetrener_text, club_name_fb[chat.id])        
    }

    if (query.data === fillabonement_text + myprogram_type[chat.id][3]){
        bot.editMessageText(messages_texts[chat.id][1], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1]
        })
        CheckUser(chat.id, chat.first_name, chat.id, message_id)
    }

    if (query.data === backtofillinginfo_text[1]){
        bot.deleteMessage(chat.id, add_info_msg[chat.id])
        CheckUser(chat.id, chat.first_name, chat.id, message_id)
    }

    if (query.data === backtoprogramme_text[1]){
        console.log('14^ '  + add_info_msg[chat.id])
        bot.deleteMessage(chat.id, messages_todelete[chat.id][2]).catch(err => {console.log('124 ' + err)})
        bot.editMessageText(messages_texts[chat.id][1], {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: messages_todelete[chat.id][1],
            reply_markup: {
                inline_keyboard: types_keyboard[chat.id]
            }
        })
    }

    if (query.data === backtochoosepaingmethod_text[1]){
        user_payingmethod[chat.id] = ''
        bot.editMessageText(dopblank_text, {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtofillinginfo_text[0],
                        callback_data: backtofillinginfo_text[1]
                    }],
                    [{
                        text: user_payingmethods[0][0],
                        callback_data: user_payingmethods[0][1]
                    },
                    {
                        text: user_payingmethods[1][0],
                        callback_data: user_payingmethods[1][1]
                    }]
                ]
            }
        }).then(() => {
            add_info_msg[chat.id] = message_id
            console.log('savedmessage = ' + add_info_msg[chat.id] + ', ' + message_id)
        })
    }

    if (query.data === user_payingmethods[0][1]){
        user_payingmethod[chat.id] = user_payingmethods[0][0]
        let finaltext = card_instructions_text + `

<b>üßæ –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç:</b> 
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + myprogram_type[chat.id][6] + `
‚îú –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ` + myprogram_type[chat.id][0] + ` –º–µ—Å. 
‚îî –¶–µ–Ω–∞: ` + myprogram_type[chat.id][1] + ` —Ç–µ–Ω–≥–µ
                
<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>`
        
        if (card_data[chat.id][0] !== 0) {
            finaltext += `
‚îú KASPI –Ω–æ–º–µ—Ä: ` + card_data[chat.id][0]
        }
        
        if (card_data[chat.id][1] !== 0){
            finaltext += `
‚îú –ö–∞—Ä—Ç–∞: ` + card_data[chat.id][1]
        }
        
        finaltext += `
‚îî –§–ò–û: ` + card_data[chat.id][2]

        bot.editMessageText(finaltext, {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtochoosepaingmethod_text[0],
                        callback_data: backtochoosepaingmethod_text[1]
                    }],
                    [{
                        text: ihavepaid_text[0],
                        callback_data: dataiscorrect2_text
                    }]
                ]
            }
        })
    }

    if (query.data === user_payingmethods[1][1]){
        user_payingmethod[chat.id] = user_payingmethods[1][0]
        let finaltext = cash_instructions_text + `

<b>üßæ –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç:</b> 
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + myprogram_type[chat.id][6] + `
‚îú –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ` + myprogram_type[chat.id][0] + ` –º–µ—Å. 
‚îî –¶–µ–Ω–∞: ` + myprogram_type[chat.id][1] + ` —Ç–µ–Ω–≥–µ`

        bot.editMessageText(finaltext, {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtochoosepaingmethod_text[0],
                        callback_data: backtochoosepaingmethod_text[1]
                    }],
                    [{
                        text: ihavepaid_text[0],
                        callback_data: ihavepaid_text[1]
                    }]
                ]
            }
        })
    }

    if (query.data === dataiscorrect2_text){
        bot.editMessageText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É?', {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtochoosepaingmethod_text[0],
                        callback_data: backtochoosepaingmethod_text[1]
                    }],
                    [{
                        text: '–î–∞, —è –æ–ø–ª–∞—Ç–∏–ª',
                        callback_data: ihavepaid_text[1]
                    }]
                ]
            }
        })
    }

    if (query.data === ihavepaid_text[1]){
        favourite_program[chat.id] = myprogram_type[chat.id][6]
        //–°–æ–∑–¥–∞–µ–º –∞–∫–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤
        if (userstatus[chat.id] !== 'unregistered'){

        }

        else {
            bot.deleteMessage(chat.id, message_id).then(() => 
            {
                abonement_status[chat.id] = abonement_statuses_text[0]
                bot.sendChatAction(chat.id, 'upload_document')
                .catch(err => {console.log('24 ' + err)})
                
                let updates = {};

/*                 let date = new Date()
                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                let timeOfffset = 6 //Astana GMT +6
                let Astana_date = new Date(utcTime + (3600000 * timeOfffset))
                let date_now = Astana_date.getDate() + '_' + (Astana_date.getMonth() + 1) + '_' + Astana_date.getFullYear() + '__' + Astana_date.getHours() + '_' + Astana_date.getMinutes()                
 */
               

                ////////////////////–û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê///////////////////////////////////                 
    
/* let minutes = Astana_date.getMinutes()
if (minutes < 10) minutes = '0' + minutes
let hours = Astana_date.getHours()
if (hours < 10) hours = '0' + hours
let visible_date = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date) + ' ' +  hours + ':' + minutes + ', ' + Astana_date.getDate() + '.' + (Astana_date.getMonth() + 1)
*/
    abonements_bill_topic = abonement_bill_topic_names[0]
    abonemets_bill_client_info = `

<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + user_name[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

`
    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + myprogram_type[chat.id][6] + `
‚îú –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ` + myprogram_type[chat.id][0] + ` –º–µ—Å.
‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: ` + myprogram_type[chat.id][1] + `  —Ç–µ–Ω–≥–µ.

`

if (myprogram_type[chat.id][2] === 'unlimited'){
    abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
}

if (myprogram_type[chat.id][2] !== 'unlimited'){
    if (myprogram_type[chat.id][2] === 'morning'){
        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + morning_time[chat.id][0][0] + `:` + morning_time[chat.id][0][1] + ` –¥–æ ` + morning_time[chat.id][1][0] + `:` + morning_time[chat.id][1][1] 
    }

    if (myprogram_type[chat.id][2] === 'evening'){
        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + evening_time[chat.id][0][0] + `:` + evening_time[chat.id][0][1] + ` –¥–æ ` + evening_time[chat.id][1][0] + `:` + evening_time[chat.id][1][1] 
    }
}

if (myprogram_type[chat.id][4] === 'unlimited'){
    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
}

if (myprogram_type[chat.id][4] !== 'unlimited'){
    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + myprogram_type[chat.id][4]
}

if (myprogram_type[chat.id][5] === false){
    abonements_bill_order_info += `
‚îî –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏`
}

if (myprogram_type[chat.id][5] !== false){
    abonements_bill_order_info += `
‚îî –ö–æ–ª-–≤–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫: ` + myprogram_type[chat.id][5] + ` –¥–Ω–µ–π.`
}

    console.log('order_date! ' + order_date[chat.id])
    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info
    //console.log('last message id: ' + query.message.message_id)

    let username = []
    username[chat.id] = "undefined"
    if (chat.username != undefined) username[chat.id] = chat.username.toString()

    let newuser = {
        coins: user_coins[chat.id],
        email: user_email[chat.id],
        favourite_program: favourite_program[chat.id],
        id: chat.id,
        name: user_name[chat.id],
        phone: user_phone[chat.id],
        username: username[chat.id],
        abonements_bought: abonements_bought[chat.id],
        times_came: user_timescame[chat.id],
        bill_text: abonements_bill,
        bill_msg: 0,
        abonement: {
            name: myprogram_type[chat.id][6],
            time: myprogram_type[chat.id][2],
            visits: myprogram_type[chat.id][4],
            freeze_amount: myprogram_type[chat.id][5],
            period: myprogram_type[chat.id][0],
            price: myprogram_type[chat.id][1],
            freeze_start: '0',
            start_date: '0',
            end_date: '0',
            abonement_status: abonement_statuses_text[0],
            activator_name: 'unknown',
            activator_id: 'unknown',
            paying_method: user_payingmethod[chat.id]
        }
    }

    order_name[chat.id] = 'Fitness/'+club_name_fb[chat.id]+'/clients/' + chat.id
    console.log('ORDER NAME: ' + order_name[chat.id])

    userstatus[chat.id] = 'registered'
    updates[order_name[chat.id]] = newuser

    fb.database().ref().update(updates)
    StartCheckingOrder(chat.id)
    //AddMailingData()

    console.log('delivery_chat: ' + operators_chat[chat.id])
    let cr_chat = fb.database().ref('Fitness/'+club_name_fb[chat.id]+'/chats/');
    cr_chat.get().then((snapshot) => {
        operators_chat[chat.id] = snapshot.val().operators_chat
        console.log('IT WORKS: ' + operators_chat[chat.id])

        bot.sendMessage(operators_chat[chat.id], abonements_bill, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard:[
                    [{
                        text: '‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç',
                        callback_data: accept_order_callback + chat.id
                    }],
                    [{
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: refuse_order_callback + chat.id
                    }]
                ]
            }
        }).then(() => {
            bot.sendMessage(chat.id, abonementrequest_sended, {
                reply_markup: {
                    keyboard: unregistered_keyboard[3],
                    resize_keyboard: true

                }
            })
        })
    })
    

    ////////////////////////////////////////////////////////////////////////

                //console.log('Date: ' + date_now.getHours() + ':' + date_now.getMinutes())
            })
        }
    }

    if (query.data === accepttraining_text[1]){
        bot.deleteMessage(chat.id, message_id)
        StartTraining(chat.id, message_id)
    }
    if (query.data === refusetraining_text[1]){
        bot.deleteMessage(chat.id, message_id)
    }

    if (query.data === anotherfood_text2){
        /* bot.editMessageText(choosefood_text,
            {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_id, //!!!! –ù–ï –¢–û–¢ –ú–ï–°–°–ï–î–ñ ID –£–î–ê–õ–Ø–ï–ú
                reply_markup:{
                    inline_keyboard:foodlist_keyboard[chat.id]
                }
            }) */
            userProgram[chat.id] = ''
            keyboards.ProgramKeyboard(programmes_keyboard[chat.id], userProgrammesList[chat.id], foodlist_count[chat.id], userCategory[chat.id], fb, bot, chat, message_id, anothercategory_text, query, chooseprogramme_text, club_name_fb[chat.id])

        //bot.deleteMessage(chat.id, message_id - 1)
    }
    if (query.data === addto_basket_text){
        bot.editMessageText(text, {
            chat_id: chat.id,
            message_id: message_id
        }) //—É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–ª—é–¥–∞
        for (let i = 0; i < basket[chat.id].length; i++){
            console.log('!!!! ' + basket[chat.id][i][0] + ' ' + userProgrammesList[chat.id][userProgram[chat.id]])
            if (basket[chat.id][i][0] === userProgrammesList[chat.id][userProgram[chat.id]]){

                bot.sendMessage(chat.id, chooseamountoffood_text + basket[chat.id][i][1] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (basket[chat.id][i][1] * temp_program_types[chat.id] + '—Ç–≥.'), {
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: decrease_foodcount,
                                callback_data: decrease_foodcount
                            },
                            {
                                text: increase_foodcount,
                                callback_data: increase_foodcount
                            }],
                            [{
                                
                                text: dont_addto_basket_text2,
                                callback_data: dont_addto_basket_text2
                            },
                            {
                                text: addto_basket_text2,
                                callback_data: addto_basket_text2
                            }]
                        ]
                    }
                })
                break
            }
            if (i === basket[chat.id].length - 1 && basket[chat.id][i][0] !== userProgrammesList[chat.id][userProgram[chat.id]]){
                //–∫–æ–≥–¥–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞...
                console.log('ALARM2: ' + i + ' ' + basket[chat.id].length)
                /*if (i === basket[chat.id].length){
                    bot.sendMessage(chat.id, chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_food_price[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_food_price[chat.id] + '—Ç–≥.'), {
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: decrease_foodcount,
                                    callback_data: decrease_foodcount
                                },
                                    {
                                        text: increase_foodcount,
                                        callback_data: increase_foodcount
                                    }],
                                [{
                                    text: addto_basket_text2,
                                    callback_data: addto_basket_text2
                                },
                                    {
                                        text: dont_addto_basket_text2,
                                        callback_data: dont_addto_basket_text2
                                    }]
                            ]
                        }
                    })
                }*/
                temp_foodamount[chat.id] = 1
                bot.sendMessage(chat.id, chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id] + '—Ç–≥.'), {
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: decrease_foodcount,
                                callback_data: decrease_foodcount
                            },
                                {
                                    text: increase_foodcount,
                                    callback_data: increase_foodcount
                                }],
                            [{
                                text: dont_addto_basket_text2,
                                callback_data: dont_addto_basket_text2
                            },
                            {
                                text: addto_basket_text2,
                                callback_data: addto_basket_text2
                            }]
                        ]
                    }
                })
            }
        }
        if (basket[chat.id].length === 0){
            //–∫–æ–≥–¥–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞...
            bot.sendMessage(chat.id, chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id] + '—Ç–≥.'), {
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: decrease_foodcount,
                            callback_data: decrease_foodcount
                        },
                            {
                                text: increase_foodcount,
                                callback_data: increase_foodcount
                            }],
                        [{
                            text: dont_addto_basket_text2,
                            callback_data: dont_addto_basket_text2
                        },
                        {
                            text: addto_basket_text2,
                            callback_data: addto_basket_text2
                        }]
                    ]
                }
            })
        }
    }
    //—Ç—É—Ç –º—ã –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∞–≤–ª—è–µ–º –∫–æ–ª-–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
    if (query.data === increase_foodcount || query.data === decrease_foodcount){
        console.log(decrease_foodcount + ' ' + increase_foodcount + ' ' + dont_addto_basket_text2 + ' ' + addto_basket_text2)
        if (query.data === increase_foodcount){
            for (let i = 0; i < basket[chat.id].length; i++){
                console.log('226 ' + basket[chat.id][i][0] + ' ' + userProgrammesList[chat.id][userProgram[chat.id]])
                if (basket[chat.id][i][0] === userProgrammesList[chat.id][userProgram[chat.id]]){
                    basket[chat.id][i][1]++
                    console.log('increasing existing food postion +1 ' + basket[chat.id][i][1])
                    bot.editMessageText(chooseamountoffood_text + basket[chat.id][i][1] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (basket[chat.id][i][1] * temp_program_types[chat.id]) + '—Ç–≥.', {
                        chat_id: chat.id,
                        message_id: message_id,
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: decrease_foodcount,
                                    callback_data: decrease_foodcount
                                },
                                    {
                                        text: increase_foodcount,
                                        callback_data: increase_foodcount
                                    }],
                                [{
                                    text: dont_addto_basket_text2,
                                    callback_data: dont_addto_basket_text2
                                },
                                {
                                    text: addto_basket_text2,
                                    callback_data: addto_basket_text2
                                }]
                            ]
                        }
                    })
                    break
                }
                if (i === basket[chat.id].length - 1 && basket[chat.id][i][0] !== userProgrammesList[chat.id][userProgram[chat.id]]){
                    console.log('227 ' + basket[chat.id][i][0] + ' ' + userProgrammesList[chat.id][userProgram[chat.id]])
                    temp_foodamount[chat.id]++
                        bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id]) + '—Ç–≥.', {
                            chat_id: chat.id,
                            message_id: message_id,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: decrease_foodcount,
                                        callback_data: decrease_foodcount
                                    },
                                        {
                                            text: increase_foodcount,
                                            callback_data: increase_foodcount
                                        }],
                                    [{
                                        text: dont_addto_basket_text2,
                                        callback_data: dont_addto_basket_text2
                                    },
                                    {
                                        text: addto_basket_text2,
                                        callback_data: addto_basket_text2
                                    }]
                                ]
                            }
                        })
                        break
                }
            }
            if (basket[chat.id].length === 0){
                temp_foodamount[chat.id]++
                bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id]) + '—Ç–≥.', {
                    chat_id: chat.id,
                    message_id: message_id,
                    reply_markup:{
                        inline_keyboard:[
                            [{
                                text: decrease_foodcount,
                                callback_data: decrease_foodcount
                            },
                                {
                                    text: increase_foodcount,
                                    callback_data: increase_foodcount
                                }],
                            [{
                                text: dont_addto_basket_text2,
                                callback_data: dont_addto_basket_text2
                            },
                            {
                                text: addto_basket_text2,
                                callback_data: addto_basket_text2
                            }]
                        ]
                    }
                })
            }
        }
        if (query.data === decrease_foodcount){
            console.log('descrease')
            for (let i = 0; i < basket[chat.id].length; i++){
                if (basket[chat.id][i][0] === userProgrammesList[chat.id][userProgram[chat.id]]){
                    if (basket[chat.id][i][1] > 1){
                        basket[chat.id][i][1]--
                        bot.editMessageText(chooseamountoffood_text + basket[chat.id][i][1] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (basket[chat.id][i][1] * temp_program_types[chat.id]) + '—Ç–≥.', {
                            chat_id: chat.id,
                            message_id: message_id,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: decrease_foodcount,
                                        callback_data: decrease_foodcount
                                    },
                                        {
                                            text: increase_foodcount,
                                            callback_data: increase_foodcount
                                        }],
                                    [{
                                        text: dont_addto_basket_text2,
                                        callback_data: dont_addto_basket_text2
                                    },
                                    {
                                        text: addto_basket_text2,
                                        callback_data: addto_basket_text2
                                    }]
                                ]
                            }
                        })
                    }
                }
                else{
                    //–∫–æ–≥–¥–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞...
                    /*if (i === basket[chat.id].length){
                        if (temp_foodamount[chat.id] > 1){
                            temp_foodamount[chat.id]--
                            bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_food_price[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_food_price[chat.id]) + '—Ç–≥.', {
                                chat_id: chat.id,
                                message_id: message_id,
                                reply_markup:{
                                    inline_keyboard:[
                                        [{
                                            text: decrease_foodcount,
                                            callback_data: decrease_foodcount
                                        },
                                            {
                                                text: increase_foodcount,
                                                callback_data: increase_foodcount
                                            }],
                                        [{
                                            text: addto_basket_text2,
                                            callback_data: addto_basket_text2
                                        },
                                            {
                                                text: dont_addto_basket_text2,
                                                callback_data: dont_addto_basket_text2
                                            }]
                                    ]
                                }
                            })
                        }
                    }*/

                    if (temp_foodamount[chat.id] > 1){
                        temp_foodamount[chat.id]--
                        bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id]) + '—Ç–≥.', {
                            chat_id: chat.id,
                            message_id: message_id,
                            reply_markup:{
                                inline_keyboard:[
                                    [{
                                        text: decrease_foodcount,
                                        callback_data: decrease_foodcount
                                    },
                                        {
                                            text: increase_foodcount,
                                            callback_data: increase_foodcount
                                        }],
                                    [{
                                        text: dont_addto_basket_text2,
                                        callback_data: dont_addto_basket_text2
                                    },
                                    {
                                        text: addto_basket_text2,
                                        callback_data: addto_basket_text2
                                    }]
                                ]
                            }
                        })
                        break
                    }
                }
            }
            if (basket[chat.id].length === 0){
                if (temp_foodamount[chat.id] > 1){
                    temp_foodamount[chat.id]--
                    bot.editMessageText(chooseamountoffood_text + temp_foodamount[chat.id] + ' x ' + temp_program_types[chat.id] + '—Ç–≥. = ' + (temp_foodamount[chat.id] * temp_program_types[chat.id]) + '—Ç–≥.', {
                        chat_id: chat.id,
                        message_id: message_id,
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: decrease_foodcount,
                                    callback_data: decrease_foodcount
                                },
                                    {
                                        text: increase_foodcount,
                                        callback_data: increase_foodcount
                                    }],
                                [{
                                    text: dont_addto_basket_text2,
                                    callback_data: dont_addto_basket_text2
                                },
                                {
                                    text: addto_basket_text2,
                                    callback_data: addto_basket_text2
                                }]
                            ]
                        }
                    })
                }
            }
        }
    }
    if (query.data === increase_foodcount2 || query.data === decrease_foodcount2){
        if (query.data === increase_foodcount2){
            console.log('–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º: ' + basket[chat.id][temp_backet_food[chat.id]][0])
            basket[chat.id][temp_backet_food[chat.id]][1]++
            bot.editMessageText(chooseamountoffood_text + basket[chat.id][temp_backet_food[chat.id]][1] + ' x ' + basket[chat.id][temp_backet_food[chat.id]][2] + '—Ç–≥. = ' + (basket[chat.id][temp_backet_food[chat.id]][1] * basket[chat.id][temp_backet_food[chat.id]][2]) + '—Ç–≥.', {
                chat_id: chat.id,
                message_id: message_id,
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: decrease_foodcount,
                            callback_data: decrease_foodcount2
                        },
                            {
                                text: increase_foodcount,
                                callback_data: increase_foodcount2
                            }],
                        [{
                            text: dont_addto_basket_text2,
                            callback_data: delete_basketfood
                        },
                        {
                            text: addto_basket_text2,
                            callback_data: addto_basket_text3
                        }]
                    ]
                }
            })
        }
        if (query.data === decrease_foodcount2){
            console.log('–£–º–µ–Ω—å—à–∞–µ–º: ' + basket[chat.id][temp_backet_food[chat.id]][0])
            basket[chat.id][temp_backet_food][1]--
            bot.editMessageText(chooseamountoffood_text + basket[chat.id][temp_backet_food[chat.id]][1] + ' x ' + basket[chat.id][temp_backet_food[chat.id]][2] + '—Ç–≥. = ' + (basket[chat.id][temp_backet_food[chat.id]][1] * basket[chat.id][temp_backet_food[chat.id]][2]) + '—Ç–≥.', {
                chat_id: chat.id,
                message_id: message_id,
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: decrease_foodcount,
                            callback_data: decrease_foodcount2
                        },
                            {
                                text: increase_foodcount,
                                callback_data: increase_foodcount2
                            }],
                        [{
                            text: dont_addto_basket_text2,
                            callback_data: delete_basketfood
                        },
                        {
                            text: addto_basket_text2,
                            callback_data: addto_basket_text3
                        }]
                    ]
                }
            })
        }
    }
    if (query.data === dont_addto_basket_text2){
        for (let i = 0; i < basket[chat.id].length; i++){
            if (userProgrammesList[chat.id][userProgram[chat.id]] === basket[chat.id][i][0]){
                basket[chat.id].splice(i, 1)
                console.log('DELETED')
                //—Ç—É—Ç –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç, –∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–æ –Ω–µ—Ç
            }
        }
        bot.deleteMessage(chat.id, message_id).then(() => {
            bot.editMessageText(temp_food_text[chat.id], {
                parse_mode: 'HTML',
                chat_id: chat.id,
                message_id: message_id - 1,
                reply_markup:{
                    inline_keyboard: [
                        [{
                            text: addto_basket_text,
                            callback_data: addto_basket_text
                        }],
                        [{
                            text: anotherprogram_text,
                            callback_data: anotherprogram_text
                        }]
                    ]
                }
            })
        })
    }
    if (query.data === yesigotorder_text){
        for(let i = 0; i < 100; i++){
            if (i <= 98){
                bot.deleteMessage(chat.id, message_id - i - 1).catch(err => {
                    console.log('–û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞: ' + err)
                })
            }
            if (i === 99){
                bot.deleteMessage(chat.id, message_id - i - 1).catch(err => {
                    console.log('–û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞: ' + err)
                }).then(() => {
                    bot.sendMessage(chat.id, hellomessage_text,
                        {
                                reply_markup:{
                                    inline_keyboard:[
                                        [{
                                            text: '–ù—É—Ä-–°—É–ª—Ç–∞–Ω',
                                            callback_data: '–ù—É—Ä-–°—É–ª—Ç–∞–Ω'
                                        }]/*,
                                        [{
                                            text: '–ê–ª–º–∞—Ç—ã',
                                            callback_data: '–ê–ª–º–∞—Ç—ã'
                                        }]*/
                                    ]
                                }
                        })
                })
                
            }
        }
        
    }
    if (query.data === changename_text){
        isMakingChanges[chat.id] = 1
        bot.editMessageText('üôÇ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è, –æ–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ:', {
            chat_id: chat.id, 
            message_id: message_id,
        })
        .then(res => 
            {
                add_info_msg[chat.id] = res.message_id
                messages_todelete[chat.id][2] = res.message_id
            })
    }
    if (query.data === changephone_text){
        isMakingChanges[chat.id] = 2
        bot.editMessageText('üìû –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:', {
            chat_id: chat.id, 
            message_id: message_id,
        })
        .then(res => 
            {
                add_info_msg[chat.id] = res.message_id
                messages_todelete[chat.id][2] = res.message_id
            })
    }
    if (query.data === changeadress_text){
        isMakingChanges[chat.id] = 3
        bot.editMessageText('üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –£–ª–∏—Ü–∞, –î–æ–º, –ö–≤–∞—Ä—Ç–∏—Ä–∞, –≠—Ç–∞–∂:', {
            chat_id: chat.id, 
            message_id: message_id,
        })
    }
    if (query.data === changeamountof_persons){
        isMakingChanges_2[chat.id] = 1
        bot.editMessageText('üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: ', {
            chat_id: chat.id, 
            message_id: add_info_msg[chat.id],
        })
    }
    if (query.data === changepaying_method){
        //isMakingChanges_2[chat.id] = 2
        bot.editMessageText('üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', {
            chat_id: chat.id, 
            message_id: add_info_msg[chat.id],
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É',
                        callback_data: /* user_payingmethod[chat.id].toString() + */ '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É'
                    }],
                    [{
                        text: '–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É',
                        callback_data: /* user_payingmethod[chat.id].toString() +  */'–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É'
                    }]
                ]
            }
        })
    }
    if (query.data === /* user_payingmethod[chat.id] +  */'–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É' || query.data === /* user_payingmethod[chat.id] + */ '–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É'){
        if (query.data === /* user_payingmethod[chat.id] + */ '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É'){
            user_payingmethod[chat.id] = '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É'

            bot.editMessageText(dopblank_text, {
                chat_id: chat.id, 
                message_id: add_info_msg[chat.id],
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: '–ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω: ' + user_personsamount[current_chat],
                            callback_data: changeamountof_persons
                        }],
                        [{
                            text: '–ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: ' + user_deliverdate[current_chat],
                            callback_data: changedeliver_date
                        }],
                        [{
                            text: '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ' + user_payingmethod[current_chat],
                            callback_data: changepaying_method
                        }],
                        [{
                            text: dataiscorrect_text,
                            callback_data: dataiscorrect2_text
                        }]
                    ]
                }
            })
        }

        else if (query.data === /* user_payingmethod[chat.id] + */ '–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É'){
            user_payingmethod[chat.id] = '–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É'

            bot.editMessageText(dopblank_text, {
                chat_id: chat.id, 
                message_id: add_info_msg[chat.id],
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: '–ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω: ' + user_personsamount[current_chat],
                            callback_data: changeamountof_persons
                        }],
                        [{
                            text: '–ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: ' + user_deliverdate[current_chat],
                            callback_data: changedeliver_date
                        }],
                        [{
                            text: '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ' + user_payingmethod[current_chat],
                            callback_data: changepaying_method
                        }],
                        [{
                            text: dataiscorrect_text,
                            callback_data: dataiscorrect2_text
                        }]
                    ]
                }
            })
        }
    }
    if (query.data === changedeliver_date){
        isMakingChanges_2[chat.id] = 2
        bot.editMessageText('‚è∞ –£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑: ', {
            chat_id: chat.id, 
            message_id: add_info_msg[chat.id],
        })
    }
    if (query.data === dataiscorrect_text){
        isMakingChanges[chat.id] = 0
        bot.editMessageText(dopblank_text, {
            parse_mode: 'HTML',
            chat_id: chat.id,
            message_id: message_id,
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: backtofillinginfo_text[0],
                        callback_data: backtofillinginfo_text[1]
                    }],
                    [{
                        text: user_payingmethods[0][0],
                        callback_data: user_payingmethods[0][1]
                    }],
                    [{
                        text: user_payingmethods[1][0],
                        callback_data: user_payingmethods[1][1]
                    }]
                ]
            }
        }).then(() => {
            add_info_msg[chat.id] = message_id
            console.log('savedmessage = ' + add_info_msg[chat.id] + ', ' + message_id)
        })
    }
    if (query.data === dataiscorrect2_text){
        if (user_payingmethod[chat.id] === '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É'){
            isMakingChanges_2[chat.id] = 3
            bot.editMessageText('–ù–∞–ø–∏—à–∏—Ç–µ, —Å –∫–∞–∫–æ–π —Å—É–º–º—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–¥–∞—á—É: ', {
                chat_id: chat.id, 
                message_id: add_info_msg[chat.id],
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: no_sdacha_text,
                            callback_data: no_sdacha_text
                        }]
                    ]
                }
            })
        }
        else {
            isMakingChanges_2[chat.id] = 4
            user_sdachainfo[chat.id] = no_sdacha_text
            bot.editMessageText('–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫ –∫—É—Ä—å–µ—Ä –º–æ–∂–µ—Ç –¥–æ –≤–∞—Å –¥–æ–±—Ä–∞—Ç—å—Å—è: ', {
                chat_id: chat.id, 
                message_id: add_info_msg[chat.id],
                reply_markup:{
                    inline_keyboard:[
                        [{
                            text: no_howtocome_text,
                            callback_data: no_howtocome_text
                        }]
                    ]
                }
            })
        }
        
    }
    if (query.data === no_sdacha_text){
        isMakingChanges_2[chat.id] = 4
        user_sdachainfo[chat.id] = no_sdacha_text
        bot.editMessageText('–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫ –∫—É—Ä—å–µ—Ä –º–æ–∂–µ—Ç –¥–æ –≤–∞—Å –¥–æ–±—Ä–∞—Ç—å—Å—è: ', {
            chat_id: chat.id, 
            message_id: add_info_msg[chat.id],
            reply_markup:{
                inline_keyboard:[
                    [{
                        text: no_howtocome_text,
                        callback_data: no_howtocome_text
                    }]
                ]
            }
        })
    }
    if (query.data === no_howtocome_text){
        isMakingChanges_2[chat.id] = 0
        isMakingChanges_3[chat.id] = 0
        isMakingChanges[chat.id] = 0
        user_howtocome[chat.id] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        if (userstatus[chat.id] !== 'unregistered'){
            if (user_coins[chat.id] >= (finalprice[chat.id] * min_pay_percentage)){
                if (user_coins[chat.id] <= (finalprice[chat.id] * max_pay_percentage)){
                    //—Ç—É—Ç –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤—Å–µ–º–∏ –±–∞–ª–ª–∞–º–∏.
                    skidka[chat.id] = user_coins[chat.id]
                    bot.sendMessage(chat.id, '–£ –≤–∞—Å –µ—Å—Ç—å ' + user_coins[chat.id] + ' —Ç–µ–Ω–≥–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑. –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: ' + (finalprice[chat.id]-user_coins[chat.id]) + ' —Ç–µ–Ω–≥–µ. –•–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö —Å–µ–π—á–∞—Å?', {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: spendmycoins,
                                    callback_data: spendmycoins
                                },{
                                    text: dontspendmycoins,
                                    callback_data: dontspendmycoins
                                }]
                            ],
                        },
                    })
                }
                else if (user_coins[chat.id] > (finalprice[chat.id] * max_pay_percentage)){
                    //—Ç—É—Ç –æ–ø–ª–∞—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤
                    skidka[chat.id] = finalprice[chat.id] * max_pay_percentage
                    bot.sendMessage(chat.id, '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + user_coins[chat.id] + ' —Ç–µ–Ω–≥–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å ' + finalprice[chat.id] * max_pay_percentage + '—Ç–µ–Ω–≥–µ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞. –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: ' + (finalprice[chat.id] - ( finalprice[chat.id] * max_pay_percentage)) + ' —Ç–µ–Ω–≥–µ. –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ?', {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: spendmycoins,
                                    callback_data: spendmycoins
                                },{
                                    text: dontspendmycoins,
                                    callback_data: dontspendmycoins
                                }]
                            ],
                        },
                    })
                }
            }
            else {
                skidka[chat.id] = 0
             bot.deleteMessage(chat.id, message_id - 1)
            bot.deleteMessage(chat.id, message_id).then(() => {
                abonement_status[chat.id] = abonement_statuses_text[0]
                bot.sendMessage(chat.id, abonementrequest_sended, {
                    reply_markup: {
                        keyboard: unregistered_keyboard[3],
                        resize_keyboard: true
    
                    }
                })
                
                let updates = {};

                let username = []
                username[chat.id] = "undefined"
                if (chat.username != undefined) username[chat.id] = chat.username.toString()
                
                let alltimepurchases = []
                alltimepurchases[chat.id] = 1
                if (abonements_bought[chat.id] > 0){
                    alltimepurchases[chat.id] = abonements_bought[chat.id] + 1
                }

                let newuser = {
                    adress: user_adress[chat.id],
                    average_price: average_price[chat.id],
                    average_purchases: average_purchases[chat.id],
                    coins: user_coins[chat.id],
                    email: user_email[chat.id],
                    favourite_food: favourite_program[chat.id],
                    id: chat.id,
                    name: user_name[chat.id],
                    phone: user_phone[chat.id],
                    username: username[chat.id],
                    alltime_purchases_amount: alltimepurchases[chat.id]
                }

                let date = new Date()
                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                let timeOfffset = 6 //Astana GMT +6
                let Astana_date = new Date(utcTime + (3600000 * timeOfffset))
                let date_now = Astana_date.getDate() + '_' + (Astana_date.getMonth() + 1) + '_' + Astana_date.getFullYear() + '__' + Astana_date.getHours() + '_' + Astana_date.getMinutes()                

                order_name[chat.id] = 'Basement/cities/' + userCity[chat.id] + '/points/' + userPoint[chat.id] + '/bills/' + date_now.toString()
                console.log('ORDER NAME: ' + order_name[chat.id])
                order_date[chat.id] = date_now.toString()

                //date_now = Date.now()
                //date_string = date_now.getDate() + ',' + date_now.getHours() + ':' + date_now.getMinutes()
                let newbill = {
                    date_ordered: Astana_date.getTime(),
                    order_info: finalbasket[chat.id],
                    price: finalprice[chat.id] + 1000,
                    client_id: chat.id,
                    phone: user_phone[chat.id],
                    order_status: abonement_statuses_text[0],
                    adress: user_adress[chat.id],
                    client_name: user_name[chat.id],
                    user_personsamount: user_personsamount[chat.id],
                    user_payingmethod: user_payingmethod[chat.id],
                    user_deliverdate: user_deliverdate[chat.id],
                    user_sdachainfo: user_sdachainfo[chat.id],
                    user_howtocome: user_howtocome[chat.id]
                }

                let clientsamount = fb.database().ref('Basement/clients/clients_amount');
                    clientsamount.get().then((snapshot) => {
                    let count = snapshot.val();
                    if (userstatus[chat.id] === 'unregistered'){
                        count++
                        updates['Basement/clients/clients_amount'] = count
                        userstatus[chat.id] = 'registered'
                    }

                    updates['Basement/clients/' + chat.id] = newuser
                    updates[order_name[chat.id]] = newbill

                    fb.database().ref().update(updates)

                    AddMailingData()
                    StartCheckingOrder()
                })

                                  ////////////////////–û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê///////////////////////////////////                 
    let options = { weekday: 'short'}
    
let minutes = Astana_date.getMinutes()
if (minutes < 10) minutes = '0' + minutes
let hours = Astana_date.getHours()
if (hours < 10) hours = '0' + hours
let visible_date = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date.getDate() + '.' + (Astana_date.getMonth() + 1)

    abonements_bill_topic = abonement_bill_topic_names[0]
    abonemets_bill_client_info = `

<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b> (–ù—É—Ä-–°—É–ª—Ç–∞–Ω GMT+6)
‚îú –§–ò–û: ` + user_name[chat.id] + `
‚îú –ê–¥—Ä–µ—Å: ` + user_adress[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

`
    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>
` + finalbasket[chat.id] + `

`
    
    deliver_bill_finalprice = `<b>üíµ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b>
` + finalprice[chat.id] + ` —Ç–≥.

`

    deliver_bill_order_details = `<b>‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b> (–ù—É—Ä-–°—É–ª—Ç–∞–Ω GMT+6)
‚îî –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ` + visible_date + `

`
    deliver_bill_help_info = `<b>üìå –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
‚îú –ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω: ` + user_personsamount[chat.id] + `
‚îú –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ` + user_payingmethod[chat.id] + `
‚îú –ö—É–ø—é—Ä–∞ –æ–ø–ª–∞—Ç—ã: ` + user_sdachainfo[chat.id] + `
‚îî –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: ` + user_deliverdate[chat.id] + `

<b>üö¥‚Äç‚ôÇÔ∏è –ö–∞–∫ –ø—Ä–æ–π—Ç–∏?</b>
` + user_howtocome[chat.id] + `

`
    console.log('order_date! ' + order_date[chat.id])
    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info + deliver_bill_finalprice + deliver_bill_help_info + deliver_bill_order_details
    console.log('last message id: ' + query.message.message_id)
    console.log('delivery_chat: ' + operators_chat[chat.id])
    let current_chat = fb.database().ref('Basement/cities/' + userCity[chat.id] + '/points/' + userPoint[chat.id] + '/chats/');
    current_chat.get().then((snapshot) => {
        if (user_mode[chat.id] === usermodes[0][1]){
            operators_chat[chat.id] = snapshot.val().delivers_chat
            console.log('IT WORKS: ' + operators_chat[chat.id])
        }
        if (user_mode[chat.id] === usermodes[1][1]){
            operators_chat[chat.id] = snapshot.val().waiters_chat
            console.log('IT WORKS: ' + operators_chat[chat.id])
        }

        bot.sendMessage(operators_chat[chat.id], abonements_bill, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard:[
                    [{
                        text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: accept_order_callback + order_date[chat.id]
                    }],
                    [{
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: refuse_order_callback + order_date[chat.id]
                    }]
                ]
            }
        }).then(() => {
            //bot.sendContact(delivery_chat, user_phone[chat.id], user_name[chat.id]).then(() => {
            
            /* let update = {}
            let bill_message_id = query.message.message_id
            console.log('bills message id: ' + bill_message_id)
            update['Basement/bills/' + order_date/*  + '/bill_message_id' ] = bill_message_id
            console.log('adding message id: ' + 'Basement/bills/' + order_date) */
        })
    })
    

    ////////////////////////////////////////////////////////////////////////

                //console.log('Date: ' + date_now.getHours() + ':' + date_now.getMinutes())
            })
            }
        }
        else {
            bot.deleteMessage(chat.id, message_id - 1)
            bot.deleteMessage(chat.id, message_id).then(() => {
                abonement_status[chat.id] = abonement_statuses_text[0]
                bot.sendMessage(chat.id, abonementrequest_sended, {
                    reply_markup: {
                        keyboard: unregistered_keyboard[3],
                        resize_keyboard: true
    
                    }
                })

                let updates = {};

                let username = []
                username[chat.id] = "undefined"
                if (chat.username != undefined) username[chat.id] = chat.username.toString()
                
                let alltimepurchases = []
                alltimepurchases[chat.id] = 1
                if (abonements_bought[chat.id] > 0){
                    alltimepurchases[chat.id] = abonements_bought[chat.id] + 1
                }
                

                let newuser = {
                    adress: user_adress[chat.id],
                    average_price: average_price[chat.id],
                    average_purchases: average_purchases[chat.id],
                    coins: user_coins[chat.id],
                    email: user_email[chat.id],
                    favourite_food: favourite_program[chat.id],
                    id: chat.id,
                    name: user_name[chat.id],
                    phone: user_phone[chat.id],
                    username: username[chat.id],
                    alltime_purchases_amount: alltimepurchases[chat.id]
                }

                let date = new Date()
                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                let timeOfffset = 6 //Astana GMT +6
                let Astana_date = new Date(utcTime + (3600000 * timeOfffset))
                let date_now = Astana_date.getDate() + '_' + (Astana_date.getMonth() + 1) + '_' + Astana_date.getFullYear() + '__' + Astana_date.getHours() + '_' + Astana_date.getMinutes()                

                //date_now = Date.now()
                //date_string = date_now.getDate() + ',' + date_now.getHours() + ':' + date_now.getMinutes()
                order_name[chat.id] = 'Basement/cities/' + userCity[chat.id] + '/points/' + userPoint[chat.id] + '/bills/' + date_now.toString()
                order_date[chat.id] = date_now.toString()
                console.log('ORDER NAME: ' + order_name[chat.id])

                let newbill = {
                    date_ordered: Astana_date.getTime(),
                    order_info: finalbasket[chat.id],
                    price: finalprice[chat.id] + 1000,
                    client_id: chat.id,
                    phone: user_phone[chat.id],
                    order_status: abonement_statuses_text[0],
                    adress: user_adress[chat.id],
                    client_name: user_name[chat.id],
                    user_personsamount: user_personsamount[chat.id],
                    user_payingmethod: user_payingmethod[chat.id],
                    user_deliverdate: user_deliverdate[chat.id],
                    user_sdachainfo: user_sdachainfo[chat.id],
                    user_howtocome: user_howtocome[chat.id]
                }

                let clientsamount = fb.database().ref('Basement/clients/clients_amount');
                    clientsamount.get().then((snapshot) => {
                    let count = snapshot.val();
                    console.log('WARNING! ' + userstatus[chat.id])
                    if (userstatus[chat.id] === 'unregistered'){
                        count++
                        updates['Basement/clients/clients_amount'] = count
                        userstatus[chat.id] = 'registered'
                    }

                    updates['Basement/clients/' + chat.id] = newuser
                    updates[order_name[chat.id]] = newbill

                    fb.database().ref().update(updates)

                    AddMailingData()
                    StartCheckingOrder() 
                    
                }).catch(err => {
                    console.log('error: ' + err)
                })

                   ////////////////////–û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê///////////////////////////////////                 
    let options = { weekday: 'short'}
    let minutes = Astana_date.getMinutes()
    if (minutes < 10) minutes = '0' + minutes
    let hours = Astana_date.getHours()
    if (hours < 10) hours = '0' + hours
    let visible_date = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date.getDate() + '.' + (Astana_date.getMonth() + 1)
    
    abonements_bill_topic = abonement_bill_topic_names[0]
    abonemets_bill_client_info = `

<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + user_name[chat.id] + `
‚îú –ê–¥—Ä–µ—Å: ` + user_adress[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

`
    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>
` + finalbasket[chat.id] + `

`
    
    deliver_bill_finalprice = `<b>üíµ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b>
` + finalprice[chat.id] + ` —Ç–≥.

`

    deliver_bill_order_details = `<b>‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b> (–ù—É—Ä-–°—É–ª—Ç–∞–Ω GMT+6)
‚îî –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ` + visible_date + `

`

    deliver_bill_help_info = `<b>üìå –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
‚îú –ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω: ` + user_personsamount[chat.id] + `
‚îú –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ` + user_payingmethod[chat.id] + `
‚îú –ö—É–ø—é—Ä–∞ –æ–ø–ª–∞—Ç—ã: ` + user_sdachainfo[chat.id] + `
‚îî –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: ` + user_deliverdate[chat.id] + `

<b>üö¥‚Äç‚ôÇÔ∏è –ö–∞–∫ –ø—Ä–æ–π—Ç–∏?</b>
` + user_howtocome[chat.id] + `

`
    console.log('order_date! ' + order_date[chat.id])

    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info + deliver_bill_finalprice + deliver_bill_help_info + deliver_bill_order_details
    console.log('last message id: ' + query.message.message_id)
    let current_chat = fb.database().ref('Basement/cities/' + userCity[chat.id] + '/points/' + userPoint[chat.id] + '/chats/');
    current_chat.get().then((snapshot) => {
        if (user_mode[chat.id] === usermodes[0][1]){
            operators_chat[chat.id] = snapshot.val().delivers_chat
        }
        if (user_mode[chat.id] === usermodes[1][1]){
            operators_chat[chat.id] = snapshot.val().waiters_chat
        }

        bot.sendMessage(operators_chat[chat.id], abonements_bill, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard:[
                    [{
                        text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: accept_order_callback + order_date[chat.id]
                    }],
                    [{
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: refuse_order_callback + order_date[chat.id]
                    }]
                ]
            }
        }).then(() => {
            //bot.sendContact(delivery_chat, user_phone[chat.id], user_name[chat.id])
            /* let update = {}
            let bill_message_id = query.message.message_id
            console.log('bills message id: ' + bill_message_id)
            update['Basement/bills/' + order_date/*  + '/bill_message_id' ] = bill_message_id
            console.log('adding message id: ' + 'Basement/bills/' + order_date) */
        }).catch(err => {
            console.log('error: ' + err)
        })
    })
    

    ////////////////////////////////////////////////////////////////////////

                //console.log('Date: ' + date_now.getHours() + ':' + date_now.getMinutes())
            }).catch(err => {
                console.log('error: ' + err)
            })
        }
    }
    if (query.data === spendmycoins){
        skidka[chat.id] = Math.round(skidka[chat.id])
        finalprice[chat.id] = finalprice[chat.id] - skidka[chat.id]
        finalprice[chat.id] = Math.round(finalprice[chat.id])
        user_coins[chat.id] -= skidka[chat.id]
        user_coins[chat.id] = Math.round(user_coins[chat.id])
        finalbasket[chat.id] += `

–¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: ` + finalprice[chat.id] + ' —Ç–≥.'

        bot.deleteMessage(chat.id, message_id - 1)
            bot.deleteMessage(chat.id, message_id).then(() => {
                abonement_status[chat.id] = abonement_statuses_text[0]
                bot.sendMessage(chat.id, abonementrequest_sended, {
                    reply_markup: {
                        keyboard: unregistered_keyboard[3],
                        resize_keyboard: true
    
                    }
                })

                let updates = {}

                let username = []
                username[chat.id] = "undefined"
                if (chat.username != undefined) username[chat.id] = chat.username.toString()
                
                let alltimepurchases = []
                alltimepurchases[chat.id] = 1
                if (abonements_bought[chat.id] > 0){
                    alltimepurchases[chat.id] = abonements_bought[chat.id] + 1
                }

                //console.log(user_adress[chat.id] + ' ' + average_price[chat.id] + ' ' + average_purchases[chat.id] + ' ' + user_coins[chat.id] + ' ' + user_email[chat.id] + ' ' + favourite_food + ' ' + chat.id + ' ' + user_name[chat.id] + ' ' + user_phone[chat.id] + ' ' + username[chat.id] + ' ' + alltimepurchases[chat.id])

                let newuser = {
                    adress: user_adress[chat.id],
                    average_price: average_price[chat.id],
                    average_purchases: average_purchases[chat.id],
                    coins: user_coins[chat.id],
                    email: user_email[chat.id],
                    favourite_food: favourite_program[chat.id],
                    id: chat.id,
                    name: user_name[chat.id],
                    phone: user_phone[chat.id],
                    username: username[chat.id],
                    alltime_purchases_amount: alltimepurchases[chat.id]
                }

                let date = new Date()
                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                let timeOfffset = 6 //Astana GMT +6
                let Astana_date = new Date(utcTime + (3600000 * timeOfffset))
                let date_now = Astana_date.getDate() + '_' + (Astana_date.getMonth() + 1) + '_' + Astana_date.getFullYear() + '__' + Astana_date.getHours() + '_' + Astana_date.getMinutes()                

                order_name[chat.id] = 'Basement/cities/' + userCity[chat.id] + '/points/' + userPoint[chat.id] + '/bills/' + date_now.toString()
                order_date[chat.id] = date_now.toString()
                console.log('ORDER NAME: ' + order_name[chat.id])

                //date_now = Date.now()
                //date_string = date_now.getDate() + ',' + date_now.getHours() + ':' + date_now.getMinutes()
                let newbill = {
                    date_ordered: Astana_date.getTime(),
                    order_info: finalbasket[chat.id],
                    price: finalprice[chat.id] + 1000,
                    client_id: chat.id,
                    phone: user_phone[chat.id],
                    order_status: abonement_statuses_text[0],
                    adress: user_adress[chat.id],
                    client_name: user_name[chat.id],
                    user_personsamount: user_personsamount[chat.id],
                    user_payingmethod: user_payingmethod[chat.id],
                    user_deliverdate: user_deliverdate[chat.id],
                    user_sdachainfo: user_sdachainfo[chat.id],
                    user_howtocome: user_howtocome[chat.id]
                }

                let clientsamount = fb.database().ref('Basement/clients/clients_amount');
                    clientsamount.get().then((snapshot) => {
                    let count = snapshot.val();
                    if (userstatus[chat.id] === 'unregistered'){
                        count++
                        updates['Basement/clients/clients_amount'] = count
                        userstatus[chat.id] = 'registered'
                    }

                    updates['Basement/clients/' + chat.id] = newuser
                    updates[order_name[chat.id]] = newbill

                    fb.database().ref().update(updates)

                    AddMailingData()
                    StartCheckingOrder()
                }).catch(error => {
                    console.log(error)
                })

                                ////////////////////–û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê///////////////////////////////////                 
    let options = { weekday: 'short'}
    
let minutes = Astana_date.getMinutes()
if (minutes < 10) minutes = '0' + minutes
let hours = Astana_date.getHours()
if (hours < 10) hours = '0' + hours
let visible_date = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date.getDate() + '.' + (Astana_date.getMonth() + 1)  
    
abonements_bill_topic = abonement_bill_topic_names[0]
    abonemets_bill_client_info = `

<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + user_name[chat.id] + `
‚îú –ê–¥—Ä–µ—Å: ` + user_adress[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

`
    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>
` + finalbasket[chat.id] + `

`
    
    deliver_bill_finalprice = `<b>üíµ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b>
` + finalprice[chat.id] + ` —Ç–≥.

`

    deliver_bill_order_details = `<b>‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b> (–ù—É—Ä-–°—É–ª—Ç–∞–Ω GMT+6)
‚îî –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ` + visible_date + `

`
    deliver_bill_help_info = `<b>üìå –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
‚îú –ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω: ` + user_personsamount[chat.id] + `
‚îú –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ` + user_payingmethod[chat.id] + `
‚îú –ö—É–ø—é—Ä–∞ –æ–ø–ª–∞—Ç—ã: ` + user_sdachainfo[chat.id] + `
‚îî –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: ` + user_deliverdate[chat.id] + `

<b>üö¥‚Äç‚ôÇÔ∏è –ö–∞–∫ –ø—Ä–æ–π—Ç–∏?</b>
` + user_howtocome[chat.id] + `

`
    console.log('order_date! ' + order_date[chat.id])
    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info + deliver_bill_finalprice + deliver_bill_help_info + deliver_bill_order_details
    console.log('last message id: ' + query.message.message_id)
    let current_chat = fb.database().ref('Basement/cities/' + userCity[chat.id] + '/points/' + userPoint[chat.id] + '/chats/');
    current_chat.get().then((snapshot) => {
        if (user_mode[chat.id] === usermodes[0][1]){
            operators_chat[chat.id] = snapshot.val().delivers_chat
        }
        if (user_mode[chat.id] === usermodes[1][1]){
            operators_chat[chat.id] = snapshot.val().waiters_chat
        }

        bot.sendMessage(operators_chat[chat.id], abonements_bill, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard:[
                    [{
                        text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: accept_order_callback + order_date[chat.id]
                    }],
                    [{
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: refuse_order_callback + order_date[chat.id]
                    }]
                ]
            }
        }).then(() => {
            //bot.sendContact(delivery_chat, user_phone[chat.id], user_name[chat.id])
            /* let update = {}
            let bill_message_id = query.message.message_id
            console.log('bills message id: ' + bill_message_id)
            update['Basement/bills/' + order_date/*  + '/bill_message_id' ] = bill_message_id
            console.log('adding message id: ' + 'Basement/bills/' + order_date) */
        })
    })
    

    ////////////////////////////////////////////////////////////////////////

                //console.log('Date: ' + date_now.getHours() + ':' + date_now.getMinutes())
            })
    }
    if (query.data === dontspendmycoins){
        skidka[chat.id] = 0
        bot.deleteMessage(chat.id, message_id - 1)
            bot.deleteMessage(chat.id, message_id).then(() => {
                abonement_status[chat.id] = abonement_statuses_text[0]
                bot.sendMessage(chat.id, abonementrequest_sended, {
                    reply_markup: {
                        keyboard: unregistered_keyboard[3],
                        resize_keyboard: true
    
                    }
                })
                
                let updates = {};

                let username = []
                username[chat.id] = "undefined"
                if (chat.username != undefined) username[chat.id] = chat.username.toString()
                
                let alltimepurchases = []
                alltimepurchases[chat.id] = 1
                if (abonements_bought[chat.id] > 0){
                    alltimepurchases[chat.id] = abonements_bought[chat.id] + 1
                }

                let newuser = {
                    adress: user_adress[chat.id],
                    average_price: average_price[chat.id],
                    average_purchases: average_purchases[chat.id],
                    coins: user_coins[chat.id],
                    email: user_email[chat.id],
                    favourite_food: favourite_program[chat.id],
                    id: chat.id,
                    name: user_name[chat.id],
                    phone: user_phone[chat.id],
                    username: username[chat.id],
                    alltime_purchases_amount: alltimepurchases[chat.id]
                }

                let date = new Date()
                let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                let timeOfffset = 6 //Astana GMT +6
                let Astana_date = new Date(utcTime + (3600000 * timeOfffset))
                let date_now = Astana_date.getDate() + '_' + (Astana_date.getMonth() + 1) + '_' + Astana_date.getFullYear() + '__' + Astana_date.getHours() + '_' + Astana_date.getMinutes()                

                order_name[chat.id] = 'Basement/cities/' + userCity[chat.id] + '/points/' + userPoint[chat.id] + '/bills/' + date_now.toString()
                console.log('ORDER NAME: ' + order_name[chat.id])
                order_date[chat.id] = date_now.toString()

                //date_now = Date.now()
                //date_string = date_now.getDate() + ',' + date_now.getHours() + ':' + date_now.getMinutes()
                let newbill = {
                    date_ordered: Astana_date.getTime(),
                    order_info: finalbasket[chat.id],
                    price: finalprice[chat.id] + 1000,
                    client_id: chat.id,
                    phone: user_phone[chat.id],
                    order_status: abonement_statuses_text[0],
                    adress: user_adress[chat.id],
                    client_name: user_name[chat.id],
                    user_personsamount: user_personsamount[chat.id],
                    user_payingmethod: user_payingmethod[chat.id],
                    user_deliverdate: user_deliverdate[chat.id],
                    user_sdachainfo: user_sdachainfo[chat.id],
                    user_howtocome: user_howtocome[chat.id]
                }

                let clientsamount = fb.database().ref('Basement/clients/clients_amount');
                    clientsamount.get().then((snapshot) => {
                    let count = snapshot.val();
                    if (userstatus[chat.id] === 'unregistered'){
                        count++
                        updates['Basement/clients/clients_amount'] = count
                        userstatus[chat.id] = 'registered'
                    }

                    updates['Basement/clients/' + chat.id] = newuser
                    updates[order_name[chat.id]] = newbill

                    fb.database().ref().update(updates)

                    AddMailingData()
                    StartCheckingOrder()
                })

                                  ////////////////////–û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê///////////////////////////////////                 
    let options = { weekday: 'short'}
    
let minutes = Astana_date.getMinutes()
if (minutes < 10) minutes = '0' + minutes
let hours = Astana_date.getHours()
if (hours < 10) hours = '0' + hours
let visible_date = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date.getDate() + '.' + (Astana_date.getMonth() + 1)

    abonements_bill_topic = abonement_bill_topic_names[0]
    abonemets_bill_client_info = `

<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b> (–ù—É—Ä-–°—É–ª—Ç–∞–Ω GMT+6)
‚îú –§–ò–û: ` + user_name[chat.id] + `
‚îú –ê–¥—Ä–µ—Å: ` + user_adress[chat.id] + `
‚îî –ù–æ–º–µ—Ä: ` + user_phone[chat.id] + `

`
    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>
` + finalbasket[chat.id] + `

`
    
    deliver_bill_finalprice = `<b>üíµ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b>
` + finalprice[chat.id] + ` —Ç–≥.

`

    deliver_bill_order_details = `<b>‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b> (–ù—É—Ä-–°—É–ª—Ç–∞–Ω GMT+6)
‚îî –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ` + visible_date + `

`
    deliver_bill_help_info = `<b>üìå –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>
‚îú –ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω: ` + user_personsamount[chat.id] + `
‚îú –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ` + user_payingmethod[chat.id] + `
‚îú –ö—É–ø—é—Ä–∞ –æ–ø–ª–∞—Ç—ã: ` + user_sdachainfo[chat.id] + `
‚îî –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: ` + user_deliverdate[chat.id] + `

<b>üö¥‚Äç‚ôÇÔ∏è –ö–∞–∫ –ø—Ä–æ–π—Ç–∏?</b>
` + user_howtocome[chat.id] + `

`
    console.log('order_date! ' + order_date[chat.id])
    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info + deliver_bill_finalprice + deliver_bill_help_info + deliver_bill_order_details
    console.log('last message id: ' + query.message.message_id)
    let current_chat = fb.database().ref('Basement/cities/' + userCity[chat.id] + '/points/' + userPoint[chat.id] + '/chats/');
    current_chat.get().then((snapshot) => {
        if (user_mode[chat.id] === usermodes[0][1]){
            operators_chat[chat.id] = snapshot.val().delivers_chat
        }
        if (user_mode[chat.id] === usermodes[1][1]){
            operators_chat[chat.id] = snapshot.val().waiters_chat
        }

        bot.sendMessage(operators_chat[chat.id], abonements_bill, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard:[
                    [{
                        text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: accept_order_callback + order_date[chat.id]
                    }],
                    [{
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: refuse_order_callback + order_date[chat.id]
                    }]
                ]
            }
        }).then(() => {
            //bot.sendContact(delivery_chat, user_phone[chat.id], user_name[chat.id]).then(() => {
            
            /* let update = {}
            let bill_message_id = query.message.message_id
            console.log('bills message id: ' + bill_message_id)
            update['Basement/bills/' + order_date/*  + '/bill_message_id' ] = bill_message_id
            console.log('adding message id: ' + 'Basement/bills/' + order_date) */
        })
    })
    

    ////////////////////////////////////////////////////////////////////////

                //console.log('Date: ' + date_now.getHours() + ':' + date_now.getMinutes())
            })
    }
    if (query.data === add_email){
        isMakingChanges[chat.id] = 4
        bot.deleteMessage(chat.id, message_id)
        bot.sendMessage(chat.id, 'üì© –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à email:', {
            reply_markup:{
                keyboard:[
                    [{
                        text: dont_add_email,
                    }]
                ],
                resize_keyboard: true
            }
        })
    }
    if (query.data === dont_add_email){
        isMakingChanges[chat.id] = 0

        let updates = {};
        updates['Basement/clients/' + chat.id + '/coins'] = user_coins[chat.id]
        fb.database().ref().update(updates).then(() => {
            //—Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            for (let i=0; i<100; i++){
                bot.deleteMessage(chat.id, message_id - i).catch(err => {
                    console.log(err)
                })
            }
            bot.sendMessage(chat.id, didntaddemail_text).then(() => {
                IdentifyUser(chat.id)
                anotherpoint_multiple[chat.id] = 2
                keyboards.CategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], fb, bot, chat.id, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chat.id], userPoint[chat.id], user_mode[chat.id])
            })
        })
    }  
    if (query.data === dontleavecomment){
        let orderinfo = fb.database().ref(order_name[chat.id]);
        orderinfo.get().then((snapshot) => 
        {
            console.log('saving poll...')
            let updates = {}
            let bill_update = {
                adress: snapshot.val().adress,
                client_name: snapshot.val().client_name,
                date_ordered: snapshot.val().date_ordered,
                client_id: snapshot.val().client_id,
                order_info: snapshot.val().order_info,
                phone: snapshot.val().phone,
                price: snapshot.val().price,
                order_status: snapshot.val().order_status,
                deliver_name: snapshot.val().deliver_name,
                accept_date: snapshot.val().accept_date,
                deliver_id: snapshot.val().deliver_id,
                message_id: snapshot.val().message_id,
                delivered_date: snapshot.val().delivered_date,
                feedback: feedback_options[answered_feedback[chat.id]],
                bill_text: snapshot.val().bill_text,
                user_personsamount: snapshot.val().user_personsamount,
                user_payingmethod: snapshot.val().user_payingmethod,
                user_deliverdate: snapshot.val().user_deliverdate,
                user_sdachainfo: snapshot.val().user_sdachainfo,
                user_howtocome: snapshot.val().user_howtocome
            }
            updates[order_name[chat.id]] = bill_update
            updates['Basement/clients/' + chat.id + '/coins'] = user_coins[chat.id]
            fb.database().ref().update(updates).then(() => {
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chat.id, query.message.message_id - i).catch(err => {
                        //console.log(err)
                    })
                }

                let temp_bill = snapshot.val().bill_text + `
<b>üí¨ –û—Ç–∑—ã–≤ –æ –¥–æ—Å—Ç–∞–≤–∫–µ:</b>                    
‚îî –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: ` + feedback_options[answered_feedback[chat.id]]
                    bot.editMessageText(temp_bill, {
                        parse_mode: 'HTML',
                        chat_id: operators_chat[chat.id],
                        message_id: snapshot.val().message_id
                    })
                bot.sendSticker(chat.id, sticker_hello[Math.floor(Math.random() * sticker_hello.length)]).then(() => {
                    IdentifyUser(chat.id)
                    anotherpoint_multiple[chat.id] = 2
                    //keyboards.CategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], fb, bot, chat.id, query.message, anotherpoint_text, choosecategory_text, location_text, phone_text, userCity[chat.id], userPoint[chat.id], user_mode[chat.id])
                    bot.sendMessage(chat.id, hellomessage_text, {
                        parse_mode: 'HTML',
                        reply_markup:{
                            inline_keyboard:[
                                [{
                                    text: usermodes[0][0],
                                    callback_data: usermodes[0][1]
                                },
                                {
                                    text: usermodes[1][0],
                                    callback_data: usermodes[1][1]
                                }]
                            ]
                        }
                    })
                })
            })
        }) 
    }
    if (query.data === leavecomment){
        bot.editMessageText('üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:', {
            chat_id: chat.id,
            message_id: message_id
        }).then(() => {
            buttons_message[chat.id] = message_id
            isMakingChanges[chat.id] = 5
        })/* .catch(err => {
            bot.editMessageText('üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:', {
                chat_id: chat.id,
                message_id: message_id - 1
            }).then(() => {
                buttons_message[chat.id] = message_id - 1
                isMakingChanges[chat.id] = 5
            }).catch(err2 => {
                bot.editMessageText('üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:', {
                    chat_id: chat.id,
                    message_id: message_id - 2
                }).then(() => {
                    buttons_message[chat.id] = message_id - 2
                    isMakingChanges[chat.id] = 5
                }).catch(err3 => {
                    for (let i=0; i<100; i++){
                        bot.deleteMessage(chat.id, message_id - i).catch(smth => {
                            //console.log(smth)
                        })
                    }
                    bot.sendSticker(chat.id, sticker_hello).then(() => {
                        Reset(chat.id)
                        anotherpoint_multiple[chat.id] = 2
                        keyboards.CategoriesKeyboard(category_keyboard[chat.id], userCategories[chat.id], categories_count[chat.id], fb, bot, chat.id, query.message, anotherpoint_text, choosecategory_text, hellomessage_text, location_text, phone_text)
                    })
                })
            })
        }) */
        
    }
    }

    if (chat.type === 'group' || chat.type === 'supergroup'){
        bot.getChat(chat.id).then((result0) => {
            if (result0.description !== null || result0.description !== undefined){
                let del_userdata = []
                console.log(result0)
                del_userdata[chat.id] = result0.description.split('/')
                console.log('Chats| this: ' + chat.id + ', ' + del_userdata[chat.id][2])
                if (del_userdata[chat.id][2] === (chat.id).toString()){
                    let userdata = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'/clients/')
                    userdata.get().then((result) => {
                        let clients_array = Object.keys(result.val())
                        console.log('–í—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É callback –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ' + query.data + ', array = ' + clients_array.length)
                        for(let i = clients_array.length - 1; i >= 0; i--){
                            console.log(i + ' Processing... ' + query.data + ', ' + (accept_order_callback + clients_array[i]))
                            if (query.data === accept_order_callback + clients_array[i].toString()){
                                accepted_order_name = clients_array[i]
                                console.log('–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑: ' + accepted_order_name)
                                //—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —á–µ–∫–µ –∞–π–¥–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ –æ–Ω –º–æ–≥ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
                                let orderinfo = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'/clients/' + clients_array[i]);
                                orderinfo.get().then((snapshot) => 
                                {
                                    console.log(query)
                                    console.log('acceptor name2 : ' + query.from.first_name + ', ' + query.from.id)
                                    let date = new Date()
                                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                                    let timeOfffset = 6 //Astana GMT +6
                                    let accept_date = new Date(utcTime + (3600000 * timeOfffset))
                                    let end_date = new Date (accept_date.getFullYear(), accept_date.getMonth(), accept_date.getDate(), accept_date.getHours(), accept_date.getMinutes())
                                    end_date.setMonth(accept_date.getMonth() + snapshot.val().abonement.period, accept_date.getDate())
                                    /* if (snapshot.val().abonement.period < 12){
                                    }
                                    if (snapshot.val().abonement.period >= 12){
                                        end_date.setFullYear(accept_date.getFullYear() + 1,accept_date.getMonth(), accept_date.getDate())
                                    } */
                                    console.log('–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ' + accept_date.getTime() + ', –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞: ' + end_date.getTime() + ', ' + snapshot.val().abonement.period)
                                      
                                    /////–ò–ó–ú–ï–ù–Ø–ï–ú –ß–ï–ö///////////////

                                    let Astana_date_accept = new Date(accept_date.getTime())  
                                    let minutes2 = Astana_date_accept.getMinutes()
                                    if (minutes2 < 10) minutes2 = '0' + minutes2
                                    let hours2 = Astana_date_accept.getHours()
                                    if (hours2 < 10) hours2 = '0' + hours2
                                    let visible_date_accept = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_accept) + ' ' +  */hours2 + ':' + minutes2 + ', ' + Astana_date_accept.getDate() + '.' + (Astana_date_accept.getMonth() + 1) + '.' + Astana_date_accept.getFullYear()
                                
                                    let Astana_date_end = new Date(end_date.getTime())  
                                    let minutes = Astana_date_end.getMinutes()
                                    if (minutes < 10) minutes = '0' + minutes
                                    let hours = Astana_date_end.getHours()
                                    if (hours < 10) hours = '0' + hours
                                    let visible_date_end = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_end) + ' ' +  */hours + ':' + minutes + ', ' + Astana_date_end.getDate() + '.' + (Astana_date_end.getMonth() + 1) + '.' + Astana_date_end.getFullYear()
                                
                                    abonements_bill_topic = abonement_bill_topic_names[1]
                                    abonemets_bill_client_info = `
                                
<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + snapshot.val().name + `
‚îî –ù–æ–º–µ—Ä: ` + snapshot.val().phone + `
                                
`
                                    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + snapshot.val().abonement.name + `
‚îú –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ` + snapshot.val().abonement.period + ` –º–µ—Å.
‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: ` +snapshot.val().abonement.price + `  —Ç–µ–Ω–≥–µ.
                                
`
                                
                                if (snapshot.val().abonement.time === 'unlimited'){
abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
                                }
                                
                                if (snapshot.val().abonement.time !== 'unlimited'){
                                    if (snapshot.val().abonement.time === 'morning'){
                                        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + morning_time[query.from.id][0][0] + `:` + morning_time[query.from.id][0][1] + ` –¥–æ ` + morning_time[query.from.id][1][0] + `:` + morning_time[query.from.id][1][1] 
                                    }
                                
                                    if (snapshot.val().abonement.time === 'evening'){
                                        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + evening_time[query.from.id][0][0] + `:` + evening_time[query.from.id][0][1] + ` –¥–æ ` + evening_time[query.from.id][1][0] + `:` + evening_time[query.from.id][1][1] 
                                    }
                                }
                                
                                if (snapshot.val().abonement.visits === 'unlimited'){
                                    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
                                }
                                
                                if (snapshot.val().abonement.visits !== 'unlimited'){
                                    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + snapshot.val().abonement.visits
                                }
                                
                                if (snapshot.val().abonement.freeze_amount === false){
                                    abonements_bill_order_info += `
‚îî –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏`
                                }
                                
                                if (snapshot.val().abonement.freeze_amount !== false){
                                    abonements_bill_order_info += `
‚îî –ö–æ–ª-–≤–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫: ` + snapshot.val().abonement.freeze_amount + ` –¥–Ω–µ–π.`
                                }

                                    abonements_bill_order_info += `

<b>üïî –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>
‚îú –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ` + visible_date_accept + `
‚îú –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: ` + visible_date_end + `
‚îî –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ` + query.from.first_name + ', id: ' + query.from.id
                                
                                    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info

                                    let updates = {}
                                    let abonement_update = {
                                        coins: snapshot.val().coins,
                                        email: snapshot.val().email,
                                        favourite_program: snapshot.val().favourite_program,
                                        id: snapshot.val().id,
                                        name: snapshot.val().name,
                                        phone: snapshot.val().phone,
                                        username: snapshot.val().username,
                                        abonements_bought: snapshot.val().abonements_bought + 1,
                                        times_came: snapshot.val().times_came,
                                        bill_text: abonements_bill,
                                        bill_msg: query.message.message_id,
                                        abonement: {
                                            name: snapshot.val().abonement.name,
                                            time: snapshot.val().abonement.time,
                                            visits: snapshot.val().abonement.visits,
                                            freeze_amount: snapshot.val().abonement.freeze_amount,
                                            period: snapshot.val().abonement.period,
                                            price: snapshot.val().abonement.price,
                                            freeze_start: snapshot.val().abonement.freeze_start,
                                            start_date: accept_date.getTime(),
                                            end_date: end_date.getTime(),
                                            abonement_status: abonement_statuses_text[2],
                                            activator_name: query.from.first_name,
                                            activator_id: query.from.id,
                                            paying_method: snapshot.val().abonement.paying_method
                                        }
                                    }
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i]] = abonement_update
                                    //updates['Basement/clients/CLIENTID/EGO_CHECK'] = order_update
                                    fb.database().ref().update(updates)

                                    bot.editMessageText(abonements_bill, {
                                        parse_mode: 'HTML',
                                        chat_id: chat.id,
                                        message_id: message_id
                                    })
                                })
                                break
                            }
                            else if (query.data === refuse_order_callback + clients_array[i]){
                                console.log('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑: ' + clients_array[i])
                                let orderinfo = fb.database().ref('Fitness/'+del_userdata[chat.id][0]+'/clients/' + clients_array[i]);
                                orderinfo.get().then((snapshot) => 
                                {
                                    let date = new Date()
                                    let utcTime = date.getTime() + (date.getTimezoneOffset() * 60000)
                                    let timeOfffset = 6 //Astana GMT +6
                                    let refuse_date = new Date(utcTime + (3600000 * timeOfffset))
                                    
                                    let Astana_date_accept = new Date(refuse_date)
                                    let minutes2 = Astana_date_accept.getMinutes()
                                    if (minutes2 < 10) minutes2 = '0' + minutes2
                                    let hours2 = Astana_date_accept.getHours()
                                    if (hours2 < 10) hours2 = '0' + hours2
                                    let visible_date_refuse = /* new Intl.DateTimeFormat('ru-RU', options).format(Astana_date_accept) + ' ' +  */hours2 + ':' + minutes2 + ', ' + Astana_date_accept.getDate() + '.' + (Astana_date_accept.getMonth() + 1) + '.' + Astana_date_accept.getFullYear()
                                
                                    abonements_bill_topic = abonement_bill_topic_names[2]
                                    abonemets_bill_client_info = `
                                
<b>üë§ –ó–∞–∫–∞–∑—á–∏–∫</b>
‚îú –§–ò–û: ` + snapshot.val().name + `
‚îî –ù–æ–º–µ—Ä: ` + snapshot.val().phone + `
                                
`
                                    abonements_bill_order_info = `<b>üßæ –û–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</b>
‚îú –ü—Ä–æ–≥—Ä–∞–º–º–∞: ` + snapshot.val().abonement.name + `
‚îú –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ` + snapshot.val().abonement.period + ` –º–µ—Å.
‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: ` +snapshot.val().abonement.price + `  —Ç–µ–Ω–≥–µ.
                                
`
                                
                                if (snapshot.val().abonement.time === 'unlimited'){
abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
                                }
                                
                                if (snapshot.val().abonement.time !== 'unlimited'){
                                    if (snapshot.val().abonement.time === 'morning'){
                                        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + morning_time[chat.id][0][0] + `:` + morning_time[chat.id][0][1] + ` –¥–æ ` + morning_time[chat.id][1][0] + `:` + morning_time[chat.id][1][1] 
                                    }
                                
                                    if (snapshot.val().abonement.time === 'evening'){
                                        abonements_bill_order_info += `<b>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: c ` + evening_time[chat.id][0][0] + `:` + evening_time[chat.id][0][1] + ` –¥–æ ` + evening_time[chat.id][1][0] + `:` + evening_time[chat.id][1][1] 
                                    }
                                }
                                
                                if (snapshot.val().abonement.visits === 'unlimited'){
                                    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ`
                                }
                                
                                if (snapshot.val().abonement.visits !== 'unlimited'){
                                    abonements_bill_order_info += `
‚îú –ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: ` + snapshot.val().abonement.visits
                                }
                                
                                if (snapshot.val().abonement.freeze_amount === false){
                                    abonements_bill_order_info += `
‚îî –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏`
                                }
                                
                                if (snapshot.val().abonement.freeze_amount !== false){
                                    abonements_bill_order_info += `
‚îî –ö–æ–ª-–≤–æ –∑–∞–º–æ—Ä–æ–∑–æ–∫: ` + snapshot.val().abonement.freeze_amount + ` –¥–Ω–µ–π.`
                                }

                                    abonements_bill_order_info += `

<b>üïî –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>
‚îú –î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞ –≤ –∑–∞—è–≤–∫–µ: ` + visible_date_refuse + `
‚îî –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ` + query.from.first_name + ', id: ' + query.from.id
                                
                                    abonements_bill = abonements_bill_topic + abonemets_bill_client_info + abonements_bill_order_info

                                    let updates = {}
                                    let abonement_update = {
                                        coins: snapshot.val().coins,
                                        email: snapshot.val().email,
                                        favourite_program: snapshot.val().favourite_program,
                                        id: snapshot.val().id,
                                        name: snapshot.val().name,
                                        phone: snapshot.val().phone,
                                        username: snapshot.val().username,
                                        abonements_bought: snapshot.val().abonements_bought + 1,
                                        times_came: snapshot.val().times_came,
                                        bill_text: abonements_bill,
                                        bill_msg: query.message.message_id,
                                        abonement: {
                                            name: snapshot.val().abonement.name,
                                            time: snapshot.val().abonement.time,
                                            visits: snapshot.val().abonement.visits,
                                            freeze_amount: snapshot.val().abonement.freeze_amount,
                                            period: snapshot.val().abonement.period,
                                            price: snapshot.val().abonement.price,
                                            freeze_start: snapshot.val().abonement.freeze_start,
                                            start_date: '0',
                                            end_date: '0',
                                            abonement_status: abonement_statuses_text[3],
                                            activator_name: query.from.first_name,
                                            activator_id: query.from.id,
                                            paying_method: snapshot.val().abonement.paying_method
                                        }
                                    }
                                    updates['Fitness/'+del_userdata[chat.id][0]+'/clients/'+ clients_array[i]] = abonement_update
                                    //updates['Basement/clients/CLIENTID/EGO_CHECK'] = order_update
                                    fb.database().ref().update(updates)

                                    bot.editMessageText(abonements_bill, {
                                        parse_mode: 'HTML',
                                        chat_id: chat.id,
                                        message_id: message_id
                                    })
                                })
                                break
                            }
                            else if (i === 0) {
                                console.log(i + 'HERE IT IS')
                                bot.editMessageText('üí≠ –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
                                    chat_id: chat.id,
                                    message_id: message_id
                                })
                            }
                        }
                    })
                }
            }
            else {
                bot.sendMessage(chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö ü•∫')
            }
        })
    
    }
})

bot.onText(/Admin_controller:GetChatInfo/, msg =>
{
    //console.log(msg)
    const chatId = msg.chat.id
    bot.sendMessage(chatId, chatId)

})
bot.onText(/\/start/, msg => {
    const chatId = msg.chat.id
    current_chat = chatId
    //userstatus[chatId] = 'registered'
    if (msg.chat.type === 'private'){
        if (msg.text === '/start'){
            if (club_name_fb[chatId] !== undefined && club_name_fb[chatId] !== ''){
                //—á–µ–ª —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º –∫–ª—É–±–∞, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏ –≥–æ–≤–æ—Ä–∏–º –ø—Ä–∏–≤–µ—Ç
                
                for (let i=0; i<100; i++){
                    bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                        //console.log(err)
                    })
                }
                bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                .then(() => {
                    anotherpoint_multiple[chatId] = 2
                    bot.sendMessage(chatId, hellomessage_text, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: keyboards.main_menu_keyboard
                        }
                    })
                    .then(() => {
                        IdentifyUser(chatId)
                    })
                })
            }
    
            else {
                //–ø–æ—Å—ã–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–∞–ª–æ–∫
                //IdentifyUser(chatId)
                gym_keyboard[chatId] = []
                userGyms[chatId] = []
                keyboards.GymsKeyboard(gym_keyboard[chatId], userGyms[chatId], fb, bot, chatId, mother_link, choosegym_text)
            }
        }
        else {
            let userdata = fb.database().ref('Fitness/')
            userdata.get().then((result) => 
            {
                let clubs = Object.keys(result.val())
                for (let i = 0; i < clubs.length; i++){
                    if (msg.text === '/start ' + clubs[i] + '_start'){
                        let temp = (msg.text).split(' ')
                        temp[1] = temp[1].split('_')
                        //
                        console.log(club_name_fb[chatId])
                        if (userstatus[chatId] === 'registered' && club_name_fb[chatId] === temp[1][0]){
                            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∞–Ω –∏ –µ–≥–æ –∫–ª—É–± —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª—É–±–æ–º –∏–∑ —Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
                            StartTraining(chatId, msg.message_id)
    
                            for (let i=0; i<100; i++){
                                bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                                    //console.log(err)
                                })
                            }
                            bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                            .then(() => {
                                anotherpoint_multiple[chatId] = 2
                                bot.sendMessage(chatId, hellomessage_text, {
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: keyboards.main_menu_keyboard
                                    }
                                })
                            })
                        }
                        else {
                            club_name_fb[chatId] = temp[1][0]
                            console.log(club_name_fb[chatId])
                            
                            for (let i=0; i<100; i++){
                                bot.deleteMessage(chatId, msg.message_id - i).catch(err => {
                                    //console.log(err)
                                })
                            }
                            bot.sendSticker(chatId, sticker_hello[Math.floor(Math.random() * sticker_hello.length)])
                            .then(() => {
                                anotherpoint_multiple[chatId] = 2
                                bot.sendMessage(chatId, hellomessage_text, {
                                    parse_mode: 'HTML',
                                    reply_markup: {
                                        inline_keyboard: keyboards.main_menu_keyboard
                                    }
                                })
                                .then(() => {
                                    IdentifyUser(chatId)
                                })
                            })
    
                        }
                    }
                }
            })
        }
    }

    if (msg.chat.type === 'group' || msg.chat.type === 'supergroup'){
        bot.getChat(chatId).then(result => {
            if (result.description !== undefined && result.description !== null){
                console.log('group: ' + result.description)
                let del_userdata = []
                del_userdata[chatId] = result.description.split('/')
                if (del_userdata[chatId].length === 3 && del_userdata[chatId][2] === (chatId).toString())(
                    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å—é–¥–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –°–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ—Å—Ç—É–ø–∏–≤—à–µ–π –Ω–∞ –í–∞—à —Å—á–µ—Ç. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç')
                )
                else {
                    bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
                        reply_markup: {
                            inline_keyboard:[
                                [{
                                    text: 'ctOS ü§ñ',
                                    url: mother_link
                                }]
                            ]
                        }
                    })
                }
            }
            else {
                bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
                    reply_markup: {
                        inline_keyboard:[
                            [{
                                text: 'ctOS ü§ñ',
                                url: mother_link
                            }]
                        ]
                    }
                })
            }
        })
    }
})

function IdentifyUser(current_chat){

    console.log(club_name_fb[current_chat])
    user_phone[current_chat] = ''
    user_email[current_chat] = 'unknown'
    user_adress[current_chat] = ''
    user_name[current_chat] = ''
    user_username[current_chat] = 'unknown'
    user_id[current_chat] = 0
    average_price[current_chat] = 0
    average_purchases[current_chat] = 0
    user_coins[current_chat] = 0
    added_coins[current_chat] = 0
    favourite_program[current_chat] = 'unknown'
    abonements_bought[current_chat] = 0
        userstatus[current_chat] = 'unknown'
    order_name[current_chat] = ''
    order_date[current_chat] = ''
    abonement_status[current_chat] = 'unknown'
    skidka[current_chat] = 0
    //user_lastbill[current_chat] = []

    finalprice[current_chat] = 0
    finalbasket[current_chat] = ''
    temp_backet_food[current_chat] = 0
    temp_food_text[current_chat] = ''
    temp_program_types[current_chat] = []
    myprogram_type[current_chat] = []
    temp_foodamount[current_chat] = 1

    basket[current_chat] = []

    food_categories[current_chat] = [['‚òïÔ∏è –ö–æ—Ñ–µ', 0, 'coffee'], ['üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ', 0, 'icecream'], ['üç£ –°—É—à–∏', 0, 'sushi'], ['üç∞ –î–µ—Å–µ—Ä—Ç—ã', 0, 'deserts'], ['üçî –§–∞—Å—Ç-—Ñ—É–¥', 0, 'fastfood'], ['–û—Å—Ç–∞–ª—å–Ω–æ–µ', 0, 'other']]

    add_info_msg[current_chat] = 0

    anotherpoint_multiple[current_chat] = 0

    temp_message[current_chat] = 0
    userCity[current_chat] = 0 // 0-NurSultan, 1-Almaty
    userPoint[current_chat] = 0
    //
    userCategory[current_chat] = ''
    userCategories[current_chat] = []
    category_keyboard[current_chat] = []
    categories_count[current_chat] = 0
    //
    userProgram[current_chat] = ''
    userProgrammesList[current_chat] = []
    programmes_keyboard[current_chat] = []
    foodlist_count[current_chat] = 0
    //
    userCity[current_chat] = ''
    userCities[current_chat] = []
    userPoint[current_chat] = ''
    userPoints[current_chat] = []
    cities_keyboard[current_chat] = []
    points_keyboard[current_chat] = []
    cities_count[current_chat] = 0
    points_count[current_chat] = 0

    trener_keyboard[current_chat] = []
    userTreners[current_chat] = []
    userTrener[current_chat] = ''

    isMakingChanges[current_chat] = 0
    isMakingChanges_2[current_chat] = 0
    isMakingChanges_3[current_chat] = 0

    userlocation[current_chat] = [0.1,0.1]
    nearest_place[current_chat] = 0
    min_distance[current_chat] = 9999999

    buttons_message[current_chat] = 0
    messages_todelete[current_chat] = []
    messages_texts[current_chat] = []
    
    answered_feedback[current_chat] = 0
    isAnswered_feedback[current_chat] = 0

    user_payingmethod[current_chat] = ''
    user_timescame[current_chat] = 0

    operators_chat[current_chat] = 0
    types_keyboard[current_chat] = []

    waitlist[current_chat] = ''
    //club_name_fb[current_chat] = ''

    userGyms[current_chat] = []
    gym_keyboard[current_chat] = []

    card_data[current_chat] = []
    point_location[current_chat] = []

    morning_time[current_chat] = []
    evening_time[current_chat] = []

    shop_keyboard[current_chat] = []
    userShopCategories[current_chat] = []
    userShopCategory[current_chat] = ''

    shopitems_keyboard[current_chat] = []
    userItemsList[current_chat] = []
    userItem[current_chat] = ''
    userItemPrice[current_chat] = 0

    var other_data = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/other_info')
    other_data.get().then((snapshot) => 
    {
        help_phone[current_chat] = snapshot.val().contact_phone
        point_location[current_chat][0] = snapshot.val().latitude
        point_location[current_chat][1] = snapshot.val().longitude
        point_adress[current_chat] = snapshot.val().adress_text

        morning_time[current_chat] = snapshot.val().morning_time
        morning_time[current_chat] = snapshot.val().morning_time.split('-')
        morning_time[current_chat][0] = morning_time[current_chat][0].split(':')
        morning_time[current_chat][1] = morning_time[current_chat][1].split(':')

        evening_time[current_chat] = snapshot.val().evening_time
        evening_time[current_chat] = snapshot.val().evening_time.split('-')
        evening_time[current_chat][0] = evening_time[current_chat][0].split(':')
        evening_time[current_chat][1] = evening_time[current_chat][1].split(':')

        support_username[current_chat] = snapshot.val().support_username

        card_data[current_chat][0] = snapshot.val().kaspi_phone
        card_data[current_chat][1] = snapshot.val().card
        card_data[current_chat][2] = snapshot.val().fio

    })

    var loyalsys_data = fb.database().ref('Fitness/'+ club_name_fb[current_chat] + '/loyal_system/')
    loyalsys_data.get().then((snapshot) => 
        {
            cashback[current_chat] = snapshot.val().cashback
            max_cashback[current_chat] = snapshot.val().max_cashback
            min_cashback[current_chat] = snapshot.val().min_cashback
            min_price[current_chat] = snapshot.val().min_price
        }
    )
    
/*     var mailing_data = fb.database().ref('Basement/mailing/preferences')
        mailing_data.get().then((snapshot) => 
        {
            reach_min = snapshot.val().reach_min
            group_buys_amount = snapshot.val().group_buys_amount
            cheap_max = snapshot.val().cheap_max
        }
    ) */
    
    var chats_data = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/chats')
        chats_data.get().then((snapshot) => 
        {
            admin_id[current_chat] = snapshot.val().admin_chat
            operators_chat[current_chat] = snapshot.val().operators_chat
            console.log('!!! ' + admin_id[current_chat] + ' ' + operators_chat[current_chat])
        }
    )

    //—Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—Ä–µ–≥–∞–Ω –ª–∏ —é–∑–µ—Ä. –ï—Å–ª–∏ –¥ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    let identifyes = fb.database().ref('Fitness/'+club_name_fb[current_chat]+'/clients/' + current_chat);
    identifyes.get().then((snapshot) => {
        if (snapshot.exists()){
            userstatus[current_chat] = 'registered'
            user_coins[current_chat] = snapshot.val().coins
            user_email[current_chat] = snapshot.val().email
            favourite_program[current_chat] = snapshot.val().favourite_program
            user_name[current_chat] = snapshot.val().name
            abonements_bought[current_chat] = snapshot.val().abonements_bought
            user_timescame[current_chat] = snapshot.val().times_came
            user_phone[current_chat] = snapshot.val().phone

            myprogram_type[current_chat][6] = snapshot.val().abonement.name
            myprogram_type[current_chat][2] = snapshot.val().abonement.time
            myprogram_type[current_chat][4] = snapshot.val().abonement.visits
            myprogram_type[current_chat][5] = snapshot.val().abonement.freeze_amount
            myprogram_type[current_chat][0] = snapshot.val().abonement.period
            myprogram_type[current_chat][1] = snapshot.val().abonement.price
            user_payingmethod[current_chat] = snapshot.val().paying_method

            const temp_tex = '–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –í—ã <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å–≤–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.</b>'
            bot.sendMessage(current_chat, temp_tex, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: accepttraining_text[0],
                            callback_data: accepttraining_text[1]
                        },{
                            text: refusetraining_text[0],
                            callback_data: refusetraining_text[1]
                        }]
                    ],
                }
            })
        }
        else {
            userstatus[current_chat] = 'unregistered'
        }
    }).catch(err => {console.log('1 ' + err)})

}

process.on('uncaughtException', function (err) {
    console.log(err);
});

